
oscope4.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	b2 79 00    	nop       
Disassembly of section .aivt._AltAMP1Interrupt:

000001e2 <.aivt._AltAMP1Interrupt>:
 1e2:	b2 79 00    	nop       
Disassembly of section .aivt._AltAMP2Interrupt:

000001e4 <.aivt._AltAMP2Interrupt>:
 1e4:	b2 79 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	b2 79 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	b2 79 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <__CONFIG1-0x15664>:
 19a:	b2 79 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <__CONFIG2-0x1564e>:
 1ae:	b2 79 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <__CONFIG3-0x156c2>:
 138:	b2 79 00    	nop       
Disassembly of section .aivt._AltDAC1Interrupt:

000001b0 <__CONFIG4-0x15648>:
 1b0:	b2 79 00    	nop       
Disassembly of section .aivt._AltDAC2Interrupt:

000001b2 <.aivt._AltDAC2Interrupt>:
 1b2:	b2 79 00    	nop       
Disassembly of section .aivt._AltDMA0Interrupt:

0000011c <.aivt._AltDMA0Interrupt>:
 11c:	b2 79 00    	nop       
Disassembly of section .aivt._AltDMA1Interrupt:

00000130 <.aivt._AltDMA1Interrupt>:
 130:	b2 79 00    	nop       
Disassembly of section .aivt._AltDMA2Interrupt:

00000144 <.aivt._AltDMA2Interrupt>:
 144:	b2 79 00    	nop       
Disassembly of section .aivt._AltDMA3Interrupt:

0000015c <.aivt._AltDMA3Interrupt>:
 15c:	b2 79 00    	nop       
Disassembly of section .aivt._AltDMA4Interrupt:

00000170 <.aivt._AltDMA4Interrupt>:
 170:	b2 79 00    	nop       
Disassembly of section .aivt._AltDMA5Interrupt:

0000018e <.aivt._AltDMA5Interrupt>:
 18e:	b2 79 00    	nop       
Disassembly of section .aivt._AltFSTInterrupt:

000001e8 <.aivt._AltFSTInterrupt>:
 1e8:	b2 79 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	b2 79 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	b2 79 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	b2 79 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	b2 79 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	b2 79 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	b2 79 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	b2 79 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	b2 79 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	b2 79 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	b2 79 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	b2 79 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	b2 79 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	b2 79 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt101:

000001de <.aivt._AltInterrupt101>:
 1de:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt102:

000001e0 <.aivt._AltInterrupt102>:
 1e0:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt107:

000001ea <.aivt._AltInterrupt107>:
 1ea:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt108:

000001ec <.aivt._AltInterrupt108>:
 1ec:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt109:

000001ee <.aivt._AltInterrupt109>:
 1ee:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt110:

000001f0 <.aivt._AltInterrupt110>:
 1f0:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt111:

000001f2 <.aivt._AltInterrupt111>:
 1f2:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt112:

000001f4 <.aivt._AltInterrupt112>:
 1f4:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt113:

000001f6 <.aivt._AltInterrupt113>:
 1f6:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt114:

000001f8 <.aivt._AltInterrupt114>:
 1f8:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt115:

000001fa <.aivt._AltInterrupt115>:
 1fa:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt116:

000001fc <.aivt._AltInterrupt116>:
 1fc:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt84:

000001bc <.aivt._AltInterrupt84>:
 1bc:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt85:

000001be <.aivt._AltInterrupt85>:
 1be:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt90:

000001c8 <.aivt._AltInterrupt90>:
 1c8:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt91:

000001ca <.aivt._AltInterrupt91>:
 1ca:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt94:

000001d0 <.aivt._AltInterrupt94>:
 1d0:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt95:

000001d2 <.aivt._AltInterrupt95>:
 1d2:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt96:

000001d4 <.aivt._AltInterrupt96>:
 1d4:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt97:

000001d6 <.aivt._AltInterrupt97>:
 1d6:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt98:

000001d8 <.aivt._AltInterrupt98>:
 1d8:	b2 79 00    	nop       
Disassembly of section .aivt._AltInterrupt99:

000001da <.aivt._AltInterrupt99>:
 1da:	b2 79 00    	nop       
Disassembly of section .aivt._AltJTAGInterrupt:

000001fe <.aivt._AltJTAGInterrupt>:
 1fe:	b2 79 00    	nop       
Disassembly of section .aivt._AltLCDInterrupt:

000001dc <.aivt._AltLCDInterrupt>:
 1dc:	b2 79 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	b2 79 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	b2 79 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	b2 79 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	b2 79 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	b2 79 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	b2 79 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	b2 79 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	b2 79 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	b2 79 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	b2 79 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	b2 79 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	b2 79 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	b2 79 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	b2 79 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	b2 79 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	b2 79 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	b2 79 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	b2 79 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	b2 79 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	b2 79 00    	nop       
Disassembly of section .aivt._AltSDA1Interrupt:

000001e6 <.aivt._AltSDA1Interrupt>:
 1e6:	b2 79 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	b2 79 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	b2 79 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	b2 79 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	b2 79 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	b2 79 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	b2 79 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	b2 79 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	b2 79 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	b2 79 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	b2 79 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	b2 79 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	b2 79 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	b2 79 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	b2 79 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	b2 79 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	b2 79 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	b2 79 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	b2 79 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	b2 79 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	b2 79 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	b2 79 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	b2 79 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	b2 79 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	b2 79 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	b2 79 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	40 11 04    	goto      0x1140 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001140 <__reset>:
    1140:	ef 59 22    	mov.w     #0x259e, w15
    1142:	0e 7f 22    	mov.w     #0x27f0, w14
    1144:	0e 01 88    	mov.w     w14, 0x20
    1146:	00 00 00    	nop       
    1148:	00 00 20    	mov.w     #0x0, w0
    114a:	00 00 e0    	cp0.w     w0
    114c:	02 00 32    	bra       Z, 0x1152 <CORCON_RESET>
    114e:	00 01 20    	mov.w     #0x10, w0
    1150:	20 02 88    	mov.w     w0, 0x44

00001152 <CORCON_RESET>:
    1152:	14 00 07    	rcall     0x117c <__psv_init>
    1154:	17 01 07    	rcall     0x1384 <__crt_start_mode> <__crt_start_mode_normal>
    1156:	00 00 e0    	cp0.w     w0
    1158:	03 00 3a    	bra       NZ, 0x1160 <L11>
    115a:	c0 65 27    	mov.w     #0x765c, w0
    115c:	01 00 20    	mov.w     #0x0, w1
    115e:	02 00 37    	bra       0x1164 <L21>

00001160 <L11>:
    1160:	00 00 20    	mov.w     #0x0, w0
    1162:	01 00 20    	mov.w     #0x0, w1

00001164 <L21>:
    1164:	81 0f 70    	ior.w     w0, w1, [w15]
    1166:	01 00 32    	bra       Z, 0x116a <L12>
    1168:	14 00 07    	rcall     0x1192 <__data_init> <__data_init_da>

0000116a <L12>:
    116a:	00 00 20    	mov.w     #0x0, w0
    116c:	00 00 e0    	cp0.w     w0
    116e:	02 00 32    	bra       Z, 0x1174 <L13>
    1170:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x1134>
    1172:	00 00 00 

00001174 <L13>:
    1174:	30 79 02    	call      0x7930 <_main>
    1176:	00 00 00 
    1178:	00 40 da    	break     
    117a:	00 00 fe    	reset     

0000117c <__psv_init>:
    117c:	44 40 a9    	bclr.b    0x44, #0x2
    117e:	80 29 20    	mov.w     #0x298, w0
    1180:	00 00 e0    	cp0.w     w0
    1182:	03 00 32    	bra       Z, 0x118a <L14>
    1184:	00 20 20    	mov.w     #0x200, w0
    1186:	90 01 88    	mov.w     w0, 0x32
    1188:	44 40 a8    	bset.b    0x44, #0x2

0000118a <L14>:
    118a:	00 00 06    	return    

0000118c <__long_indirect_call>:
    118c:	8a 1f 78    	mov.w     w10, [w15++]
    118e:	8b 1f 78    	mov.w     w11, [w15++]
    1190:	00 00 06    	return    

00001192 <__data_init>:
    1192:	a1 02 88    	mov.w     w1, 0x54
    1194:	80 04 78    	mov.w     w0, w9
    1196:	00 00 eb    	clr.w     w0
    1198:	1f 00 37    	bra       0x11d8 <L41>

0000119a <L11>:
    119a:	e2 84 44    	add.w     w9, #0x2, w9
    119c:	54 a0 b4    	addc.w    0x54
    119e:	99 05 ba    	tblrdl.w  [w9], w11
    11a0:	e2 84 44    	add.w     w9, #0x2, w9
    11a2:	54 a0 b4    	addc.w    0x54
    11a4:	99 06 ba    	tblrdl.w  [w9], w13
    11a6:	e2 84 44    	add.w     w9, #0x2, w9
    11a8:	54 a0 b4    	addc.w    0x54
    11aa:	00 06 eb    	clr.w     w12
    11ac:	47 6f de    	lsr.w     w13, #0x7, w14
    11ae:	fd 07 b2    	and.w     #0x7f, w13
    11b0:	ae 01 88    	mov.w     w14, 0x34
    11b2:	63 6c e1    	cp.b      w13, #0x3
    11b4:	03 00 3a    	bra       NZ, 0x11bc <L21>
    11b6:	ea ff 07    	rcall     0x118c <__long_indirect_call>
    11b8:	00 00 eb    	clr.w     w0
    11ba:	0e 00 37    	bra       0x11d8 <L41>

000011bc <L21>:
    11bc:	60 6c e1    	cp.b      w13, #0x0
    11be:	08 00 3a    	bra       NZ, 0x11d0 <L22>

000011c0 <L91>:
    11c0:	00 4d eb    	clr.b     [w10]
    11c2:	0a 05 e8    	inc.w     w10, w10
    11c4:	02 00 39    	bra       NC, 0x11ca <L81>
    11c6:	34 20 ec    	inc.w     0x34
    11c8:	0a f0 a0    	bset.w    w10, #0xf

000011ca <L81>:
    11ca:	8b 05 e9    	dec.w     w11, w11
    11cc:	f9 ff 3e    	bra       GTU, 0x11c0 <L91>
    11ce:	04 00 37    	bra       0x11d8 <L41>

000011d0 <L22>:
    11d0:	61 68 e1    	cp.w      w13, #0x1
    11d2:	01 00 32    	bra       Z, 0x11d6 <L31>
    11d4:	00 86 eb    	setm.w    w12

000011d6 <L31>:
    11d6:	0b 00 07    	rcall     0x11ee <L13> <__memcpyd3extended>

000011d8 <L41>:
    11d8:	19 c7 ba    	tblrdh.b  [w9], w14
    11da:	19 05 ba    	tblrdl.w  [w9], w10
    11dc:	0e 04 e0    	cp0.b     w14
    11de:	03 00 3a    	bra       NZ, 0x11e6 <L12>
    11e0:	0a 00 e0    	cp0.w     w10
    11e2:	db ff 3a    	bra       NZ, 0x119a <L11>
    11e4:	00 00 06    	return    

000011e6 <L12>:
    11e6:	fe 07 b2    	and.w     #0x7f, w14
    11e8:	ae 02 88    	mov.w     w14, 0x54
    11ea:	8a 04 78    	mov.w     w10, w9
    11ec:	f5 ff 37    	bra       0x11d8 <L41>

000011ee <L13>:
    11ee:	0c d0 a3    	btst.c    w12, #0xd
    11f0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11f2:	1c 00 39    	bra       NC, 0x122c <L23>
    11f4:	89 02 78    	mov.w     w9, w5
    11f6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11f8:	0a 05 e8    	inc.w     w10, w10
    11fa:	02 00 39    	bra       NC, 0x1200 <L32>
    11fc:	34 20 ec    	inc.w     0x34
    11fe:	0a f0 a0    	bset.w    w10, #0xf

00001200 <L32>:
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	0f 00 32    	bra       Z, 0x1222 <L42>
    1204:	25 4d ba    	tblrdl.b  [w5--], [w10]
    1206:	0a 05 e8    	inc.w     w10, w10
    1208:	02 00 39    	bra       NC, 0x120e <L33>
    120a:	34 20 ec    	inc.w     0x34
    120c:	0a f0 a0    	bset.w    w10, #0xf

0000120e <L33>:
    120e:	8b 05 e9    	dec.w     w11, w11
    1210:	08 00 32    	bra       Z, 0x1222 <L42>
    1212:	0c 00 e0    	cp0.w     w12
    1214:	06 00 32    	bra       Z, 0x1222 <L42>
    1216:	15 cd ba    	tblrdh.b  [w5], [w10]
    1218:	0a 05 e8    	inc.w     w10, w10
    121a:	02 00 39    	bra       NC, 0x1220 <L34>
    121c:	34 20 ec    	inc.w     0x34
    121e:	0a f0 a0    	bset.w    w10, #0xf

00001220 <L34>:
    1220:	8b 05 e9    	dec.w     w11, w11

00001222 <L42>:
    1222:	89 84 e8    	inc2.w    w9, w9
    1224:	54 a0 b4    	addc.w    0x54
    1226:	0b 00 e0    	cp0.w     w11
    1228:	e2 ff 3a    	bra       NZ, 0x11ee <L13> <__memcpyd3extended>
    122a:	00 00 06    	return    

0000122c <L23>:
    122c:	99 02 ba    	tblrdl.w  [w9], w5
    122e:	05 5d 78    	mov.b     w5, [w10++]
    1230:	8b 05 e9    	dec.w     w11, w11
    1232:	f7 ff 32    	bra       Z, 0x1222 <L42>
    1234:	c8 2a de    	lsr.w     w5, #0x8, w5
    1236:	05 5d 78    	mov.b     w5, [w10++]
    1238:	8b 05 e9    	dec.w     w11, w11
    123a:	f3 ff 32    	bra       Z, 0x1222 <L42>
    123c:	0c 00 e0    	cp0.w     w12
    123e:	f1 ff 32    	bra       Z, 0x1222 <L42>
    1240:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1242:	ee ff 37    	bra       0x1220 <L34>

00001244 <.handle>:
    1244:	3c 6b 04    	goto      0x6b3c <_cdc_setup_callback>
    1246:	00 00 00 
    1248:	dc 6c 04    	goto      0x6cdc <_cdc_rx_service>
    124a:	00 00 00 
    124c:	66 6c 04    	goto      0x6c66 <_cdc_tx_service>
    124e:	00 00 00 
    1250:	e6 78 04    	goto      0x78e6 <_set_config_callback>
    1252:	00 00 00 
    1254:	3e 16 04    	goto      0x163e <_trigger_sweep_at_4MSps>
    1256:	00 00 00 
    1258:	3a 73 04    	goto      0x733a <_trigger_sweep_lt_4MSps>
    125a:	00 00 00 
    125c:	be 51 04    	goto      0x51be <_send_next_vals>
    125e:	00 00 00 
    1260:	30 52 04    	goto      0x5230 <_send_next_vals_bin>
    1262:	00 00 00 
    1264:	a4 59 04    	goto      0x59a4 <_parser_normal>
    1266:	00 00 00 
    1268:	e0 48 04    	goto      0x48e0 <_ui_handler>
    126a:	00 00 00 
    126c:	38 4b 04    	goto      0x4b38 <_dig_handler>
    126e:	00 00 00 
    1270:	b2 4e 04    	goto      0x4eb2 <_scope_handler>
    1272:	00 00 00 
    1274:	66 52 04    	goto      0x5266 <_wavegen_handler>
    1276:	00 00 00 
    1278:	9c 56 04    	goto      0x569c <_flash_handler>
    127a:	00 00 00 
    127c:	32 49 04    	goto      0x4932 <_led1_handler>
    127e:	00 00 00 
    1280:	ba 49 04    	goto      0x49ba <_led1Q_handler>
    1282:	00 00 00 
    1284:	d4 49 04    	goto      0x49d4 <_led2_handler>
    1286:	00 00 00 
    1288:	5c 4a 04    	goto      0x4a5c <_led2Q_handler>
    128a:	00 00 00 
    128c:	76 4a 04    	goto      0x4a76 <_led3_handler>
    128e:	00 00 00 
    1290:	00 4b 04    	goto      0x4b00 <_led3Q_handler>
    1292:	00 00 00 
    1294:	1c 4b 04    	goto      0x4b1c <_sw1Q_handler>
    1296:	00 00 00 
    1298:	8a 4b 04    	goto      0x4b8a <_set_handler>
    129a:	00 00 00 
    129c:	a6 4b 04    	goto      0x4ba6 <_clear_handler>
    129e:	00 00 00 
    12a0:	c2 4b 04    	goto      0x4bc2 <_toggle_handler>
    12a2:	00 00 00 
    12a4:	de 4b 04    	goto      0x4bde <_write_handler>
    12a6:	00 00 00 
    12a8:	1e 4c 04    	goto      0x4c1e <_read_handler>
    12aa:	00 00 00 
    12ac:	46 4c 04    	goto      0x4c46 <_od_handler>
    12ae:	00 00 00 
    12b0:	86 4c 04    	goto      0x4c86 <_odQ_handler>
    12b2:	00 00 00 
    12b4:	ae 4c 04    	goto      0x4cae <_mode_handler>
    12b6:	00 00 00 
    12b8:	ee 4c 04    	goto      0x4cee <_modeQ_handler>
    12ba:	00 00 00 
    12bc:	16 4d 04    	goto      0x4d16 <_period_handler>
    12be:	00 00 00 
    12c0:	56 4d 04    	goto      0x4d56 <_periodQ_handler>
    12c2:	00 00 00 
    12c4:	7e 4d 04    	goto      0x4d7e <_duty_handler>
    12c6:	00 00 00 
    12c8:	be 4d 04    	goto      0x4dbe <_dutyQ_handler>
    12ca:	00 00 00 
    12cc:	e6 4d 04    	goto      0x4de6 <_width_handler>
    12ce:	00 00 00 
    12d0:	26 4e 04    	goto      0x4e26 <_widthQ_handler>
    12d2:	00 00 00 
    12d4:	4e 4e 04    	goto      0x4e4e <_timer1period_handler>
    12d6:	00 00 00 
    12d8:	8e 4e 04    	goto      0x4e8e <_timer1periodQ_handler>
    12da:	00 00 00 
    12dc:	04 4f 04    	goto      0x4f04 <_ch1gain_handler>
    12de:	00 00 00 
    12e0:	48 4f 04    	goto      0x4f48 <_ch1gainQ_handler>
    12e2:	00 00 00 
    12e4:	62 4f 04    	goto      0x4f62 <_ch2gain_handler>
    12e6:	00 00 00 
    12e8:	a4 4f 04    	goto      0x4fa4 <_ch2gainQ_handler>
    12ea:	00 00 00 
    12ec:	be 4f 04    	goto      0x4fbe <_interval_handler>
    12ee:	00 00 00 
    12f0:	fe 4f 04    	goto      0x4ffe <_intervalQ_handler>
    12f2:	00 00 00 
    12f4:	22 50 04    	goto      0x5022 <_maxavg_handler>
    12f6:	00 00 00 
    12f8:	56 50 04    	goto      0x5056 <_maxavgQ_handler>
    12fa:	00 00 00 
    12fc:	6c 50 04    	goto      0x506c <_numavgQ_handler>
    12fe:	00 00 00 
    1300:	82 50 04    	goto      0x5082 <_sweepQ_handler>
    1302:	00 00 00 
    1304:	a6 50 04    	goto      0x50a6 <_trigger_handler>
    1306:	00 00 00 
    1308:	b6 50 04    	goto      0x50b6 <_bufferQ_handler>
    130a:	00 00 00 
    130c:	1c 51 04    	goto      0x511c <_bufferbinQ_handler>
    130e:	00 00 00 
    1310:	b8 52 04    	goto      0x52b8 <_gain_handler>
    1312:	00 00 00 
    1314:	fc 52 04    	goto      0x52fc <_gainQ_handler>
    1316:	00 00 00 
    1318:	16 53 04    	goto      0x5316 <_shape_handler>
    131a:	00 00 00 
    131c:	84 53 04    	goto      0x5384 <_shapeQ_handler>
    131e:	00 00 00 
    1320:	9a 53 04    	goto      0x539a <_freq_handler>
    1322:	00 00 00 
    1324:	da 53 04    	goto      0x53da <_freqQ_handler>
    1326:	00 00 00 
    1328:	fe 53 04    	goto      0x53fe <_phase_handler>
    132a:	00 00 00 
    132c:	2c 54 04    	goto      0x542c <_phaseQ_handler>
    132e:	00 00 00 
    1330:	42 54 04    	goto      0x5442 <_amp_handler>
    1332:	00 00 00 
    1334:	70 54 04    	goto      0x5470 <_ampQ_handler>
    1336:	00 00 00 
    1338:	86 54 04    	goto      0x5486 <_offset_handler>
    133a:	00 00 00 
    133c:	ee 54 04    	goto      0x54ee <_offsetQ_handler>
    133e:	00 00 00 
    1340:	04 55 04    	goto      0x5504 <_sqadj_handler>
    1342:	00 00 00 
    1344:	32 55 04    	goto      0x5532 <_sqadjQ_handler>
    1346:	00 00 00 
    1348:	48 55 04    	goto      0x5548 <_nsqadj_handler>
    134a:	00 00 00 
    134c:	76 55 04    	goto      0x5576 <_nsqadjQ_handler>
    134e:	00 00 00 
    1350:	8c 55 04    	goto      0x558c <_wavegen_offset_interval_handler>
    1352:	00 00 00 
    1354:	cc 55 04    	goto      0x55cc <_wavegen_offset_intervalQ_handler>
    1356:	00 00 00 
    1358:	f0 55 04    	goto      0x55f0 <_wavegen_offset_mode_handler>
    135a:	00 00 00 
    135c:	46 56 04    	goto      0x5646 <_wavegen_offset_modeQ_handler>
    135e:	00 00 00 
    1360:	5e 56 04    	goto      0x565e <_wavegen_offset_start_handler>
    1362:	00 00 00 
    1364:	68 56 04    	goto      0x5668 <_wavegen_offset_stop_handler>
    1366:	00 00 00 
    1368:	72 56 04    	goto      0x5672 <_wavegen_offset_sweepQ_handler>
    136a:	00 00 00 
    136c:	ee 56 04    	goto      0x56ee <_flash_erase_handler>
    136e:	00 00 00 
    1370:	58 57 04    	goto      0x5758 <_flash_read_handler>
    1372:	00 00 00 
    1374:	34 58 04    	goto      0x5834 <_flash_write_handler>
    1376:	00 00 00 
    1378:	ee 6a 04    	goto      0x6aee <_cdc_set_line_coding_out_callback>
    137a:	00 00 00 
    137c:	aa 5a 04    	goto      0x5aaa <_usb_set_address_callback>
    137e:	00 00 00 
    1380:	66 62 04    	goto      0x6266 <_usb_send_data_packet>
    1382:	00 00 00 

00001384 <__crt_start_mode>:
    1384:	00 00 05    	retlw.w   #0x0, w0

00001386 <___udivsi3>:
    1386:	60 22 b8    	mul.uu    w4, #0x0, w4
    1388:	06 02 20    	mov.w     #0x20, w6

0000138a <nextbit>:
    138a:	00 00 d0    	sl.w      w0, w0
    138c:	81 80 d2    	rlc.w     w1, w1
    138e:	04 82 d2    	rlc.w     w4, w4
    1390:	85 82 d2    	rlc.w     w5, w5
    1392:	00 00 a0    	bset.w    w0, #0x0
    1394:	02 02 52    	sub.w     w4, w2, w4
    1396:	83 82 5a    	subb.w    w5, w3, w5
    1398:	03 00 31    	bra       C, 0x13a0 <iterate>
    139a:	02 02 42    	add.w     w4, w2, w4
    139c:	83 82 4a    	addc.w    w5, w3, w5
    139e:	00 00 a1    	bclr.w    w0, #0x0

000013a0 <iterate>:
    13a0:	06 03 e9    	dec.w     w6, w6
    13a2:	f3 ff 3a    	bra       NZ, 0x138a <nextbit>
    13a4:	00 00 06    	return    
Disassembly of section __CONFIG4:

000157f8 <__CONFIG4>:
   157f8:	3f 03 00    	nop       
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	83 0f 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	1f f1 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	3f ba 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x134>:
    1000:	40 11 04    	goto      0x1140 <__reset>
    1002:	00 00 00 
    1004:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	0e 75 04    	goto      0x750e <__T2Interrupt>
    1036:	00 00 00 
    1038:	50 79 04    	goto      0x7950 <.LFE1>
    103a:	00 00 00 
    103c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	50 76 04    	goto      0x7650 <__DMA1Interrupt>
    1052:	00 00 00 
    1054:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    110a:	00 00 00 
    110c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    110e:	00 00 00 
    1110:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1112:	00 00 00 
    1114:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1116:	00 00 00 
    1118:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    111a:	00 00 00 
    111c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    111e:	00 00 00 
    1120:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1122:	00 00 00 
    1124:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1126:	00 00 00 
    1128:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    112a:	00 00 00 
    112c:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    112e:	00 00 00 
    1130:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1132:	00 00 00 

00001134 <__DEFAULT_VECTOR>:
    1134:	b2 79 04    	goto      0x79b2 <__DefaultInterrupt>
    1136:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	34 11 00    	nop       
  10:	34 11 00    	nop       
  12:	34 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	28 10 00    	nop       
  1e:	2c 10 00    	nop       
  20:	30 10 00    	nop       
  22:	34 10 00    	nop       
  24:	38 10 00    	nop       
  26:	3c 10 00    	nop       
  28:	40 10 00    	nop       
  2a:	44 10 00    	nop       
  2c:	48 10 00    	nop       
  2e:	4c 10 00    	nop       
  30:	50 10 00    	nop       
  32:	34 11 00    	nop       
  34:	54 10 00    	nop       
  36:	58 10 00    	nop       
  38:	5c 10 00    	nop       
  3a:	60 10 00    	nop       
  3c:	64 10 00    	nop       
  3e:	34 11 00    	nop       
  40:	68 10 00    	nop       
  42:	6c 10 00    	nop       
  44:	70 10 00    	nop       
  46:	74 10 00    	nop       
  48:	78 10 00    	nop       
  4a:	7c 10 00    	nop       
  4c:	80 10 00    	nop       
  4e:	84 10 00    	nop       
  50:	88 10 00    	nop       
  52:	8c 10 00    	nop       
  54:	90 10 00    	nop       
  56:	94 10 00    	nop       
  58:	34 11 00    	nop       
  5a:	34 11 00    	nop       
  5c:	98 10 00    	nop       
  5e:	9c 10 00    	nop       
  60:	a0 10 00    	nop       
  62:	a4 10 00    	nop       
  64:	a8 10 00    	nop       
  66:	ac 10 00    	nop       
  68:	b0 10 00    	nop       
  6a:	b4 10 00    	nop       
  6c:	b8 10 00    	nop       
  6e:	bc 10 00    	nop       
  70:	c0 10 00    	nop       
  72:	34 11 00    	nop       
  74:	34 11 00    	nop       
  76:	c4 10 00    	nop       
  78:	c8 10 00    	nop       
  7a:	34 11 00    	nop       
  7c:	34 11 00    	nop       
  7e:	cc 10 00    	nop       
  80:	d0 10 00    	nop       
  82:	34 11 00    	nop       
  84:	34 11 00    	nop       
  86:	34 11 00    	nop       
  88:	34 11 00    	nop       
  8a:	34 11 00    	nop       
  8c:	34 11 00    	nop       
  8e:	d4 10 00    	nop       
  90:	d8 10 00    	nop       
  92:	34 11 00    	nop       
  94:	34 11 00    	nop       
  96:	dc 10 00    	nop       
  98:	e0 10 00    	nop       
  9a:	e4 10 00    	nop       
  9c:	34 11 00    	nop       
  9e:	34 11 00    	nop       
  a0:	34 11 00    	nop       
  a2:	34 11 00    	nop       
  a4:	e8 10 00    	nop       
  a6:	34 11 00    	nop       
  a8:	34 11 00    	nop       
  aa:	34 11 00    	nop       
  ac:	34 11 00    	nop       
  ae:	ec 10 00    	nop       
  b0:	f0 10 00    	nop       
  b2:	f4 10 00    	nop       
  b4:	34 11 00    	nop       
  b6:	f8 10 00    	nop       
  b8:	fc 10 00    	nop       
  ba:	00 11 00    	nop       
  bc:	34 11 00    	nop       
  be:	34 11 00    	nop       
  c0:	04 11 00    	nop       
  c2:	08 11 00    	nop       
  c4:	0c 11 00    	nop       
  c6:	10 11 00    	nop       
  c8:	34 11 00    	nop       
  ca:	34 11 00    	nop       
  cc:	14 11 00    	nop       
  ce:	18 11 00    	nop       
  d0:	34 11 00    	nop       
  d2:	34 11 00    	nop       
  d4:	34 11 00    	nop       
  d6:	34 11 00    	nop       
  d8:	34 11 00    	nop       
  da:	34 11 00    	nop       
  dc:	1c 11 00    	nop       
  de:	34 11 00    	nop       
  e0:	34 11 00    	nop       
  e2:	20 11 00    	nop       
  e4:	24 11 00    	nop       
  e6:	28 11 00    	nop       
  e8:	2c 11 00    	nop       
  ea:	34 11 00    	nop       
  ec:	34 11 00    	nop       
  ee:	34 11 00    	nop       
  f0:	34 11 00    	nop       
  f2:	34 11 00    	nop       
  f4:	34 11 00    	nop       
  f6:	34 11 00    	nop       
  f8:	34 11 00    	nop       
  fa:	34 11 00    	nop       
  fc:	34 11 00    	nop       
  fe:	30 11 00    	nop       
Disassembly of section .const:

000093a6 <.LC0>:
    93a6:	55 49       	.word 0x4955
    93a8:	00 44       	.word 0x4400

000093a9 <.LC1>:
    93a9:	00 00       	.word 0
    93ab:	00 00       	.word 0

000093ad <.LC2>:
    93ad:	00 00       	.word 0
    93af:	00 00       	.word 0
    93b1:	00 00       	.word 0

000093b3 <.LC3>:
    93b3:	00 00       	.word 0
    93b5:	00 00       	.word 0
    93b7:	00 00       	.word 0
    93b9:	00 00       	.word 0

000093bb <.LC4>:
    93bb:	00 00       	.word 0
    93bd:	00 00       	.word 0
    93bf:	00 00       	.word 0

000093c1 <.LC5>:
    93c1:	00 00       	.word 0
    93c3:	00 00       	.word 0
	...

000093c6 <.LC6>:
    93c6:	4c 45       	.word 0x454c
    93c8:	44 31       	.word 0x3144
    93ca:	3f 00       	.word 0x3f

000093cc <.LC7>:
    93cc:	4c 45       	.word 0x454c
    93ce:	44 32       	.word 0x3244
    93d0:	00 4c       	.word 0x4c00

000093d1 <.LC8>:
    93d1:	00 00       	.word 0
    93d3:	00 00       	.word 0
    93d5:	00 00       	.word 0

000093d7 <.LC9>:
    93d7:	00 00       	.word 0
    93d9:	00 00       	.word 0
	...

000093dc <.LC10>:
    93dc:	4c 45       	.word 0x454c
    93de:	44 33       	.word 0x3344
    93e0:	3f 00       	.word 0x3f

000093e2 <.LC11>:
    93e2:	53 57       	.word 0x5753
    93e4:	31 3f       	.word 0x3f31
    93e6:	00 53       	.word 0x5300

000093e7 <.LC12>:
    93e7:	00 00       	.word 0
    93e9:	00 00       	.word 0

000093eb <.LC13>:
    93eb:	00 00       	.word 0
    93ed:	00 00       	.word 0
    93ef:	00 00       	.word 0

000093f1 <.LC14>:
    93f1:	00 00       	.word 0
    93f3:	00 00       	.word 0
    93f5:	00 00       	.word 0
	...

000093f8 <.LC15>:
    93f8:	57 52       	.word 0x5257
    93fa:	49 54       	.word 0x5449
    93fc:	45 00       	.word 0x45

000093fe <.LC16>:
    93fe:	52 45       	.word 0x4552
    9400:	41 44       	.word 0x4441
    9402:	00 4f       	.word 0x4f00

00009403 <.LC17>:
    9403:	00 00       	.word 0
	...

00009406 <.LC18>:
    9406:	4f 44       	.word 0x444f
    9408:	3f 00       	.word 0x3f

0000940a <.LC19>:
    940a:	4d 4f       	.word 0x4f4d
    940c:	44 45       	.word 0x4544
    940e:	00 4d       	.word 0x4d00

0000940f <.LC20>:
    940f:	00 00       	.word 0
    9411:	00 00       	.word 0
    9413:	00 00       	.word 0

00009415 <.LC21>:
    9415:	00 00       	.word 0
    9417:	00 00       	.word 0
    9419:	00 00       	.word 0
	...

0000941c <.LC22>:
    941c:	50 45       	.word 0x4550
    941e:	52 49       	.word 0x4952
    9420:	4f 44       	.word 0x444f
    9422:	3f 00       	.word 0x3f

00009424 <.LC23>:
    9424:	44 55       	.word 0x5544
    9426:	54 59       	.word 0x5954
    9428:	00 44       	.word 0x4400

00009429 <.LC24>:
    9429:	00 00       	.word 0
    942b:	00 00       	.word 0
    942d:	00 00       	.word 0

0000942f <.LC25>:
    942f:	00 00       	.word 0
    9431:	00 00       	.word 0
    9433:	00 00       	.word 0

00009435 <.LC26>:
    9435:	00 00       	.word 0
    9437:	00 00       	.word 0
    9439:	00 00       	.word 0
	...

0000943c <.LC27>:
    943c:	54 31       	.word 0x3154
    943e:	50 45       	.word 0x4550
    9440:	52 49       	.word 0x4952
    9442:	4f 44       	.word 0x444f
    9444:	00 54       	.word 0x5400

00009445 <.LC28>:
    9445:	00 00       	.word 0
    9447:	00 00       	.word 0
    9449:	00 00       	.word 0
    944b:	00 00       	.word 0
    944d:	00 00       	.word 0

0000944f <.LC29>:
    944f:	00 00       	.word 0
    9451:	00 00       	.word 0
    9453:	00 00       	.word 0
    9455:	00 00       	.word 0

00009457 <.LC30>:
    9457:	00 00       	.word 0
    9459:	00 00       	.word 0
    945b:	00 00       	.word 0
    945d:	00 00       	.word 0
	...

00009460 <.LC31>:
    9460:	43 48       	.word 0x4843
    9462:	32 47       	.word 0x4732
    9464:	41 49       	.word 0x4941
    9466:	4e 00       	.word 0x4e

00009468 <.LC32>:
    9468:	43 48       	.word 0x4843
    946a:	32 47       	.word 0x4732
    946c:	41 49       	.word 0x4941
    946e:	4e 3f       	.word 0x3f4e
    9470:	00 49       	.word 0x4900

00009471 <.LC33>:
    9471:	00 00       	.word 0
    9473:	00 00       	.word 0
    9475:	00 00       	.word 0
    9477:	00 00       	.word 0
	...

0000947a <.LC34>:
    947a:	49 4e       	.word 0x4e49
    947c:	54 45       	.word 0x4554
    947e:	52 56       	.word 0x5652
    9480:	41 4c       	.word 0x4c41
    9482:	3f 00       	.word 0x3f

00009484 <.LC35>:
    9484:	4d 41       	.word 0x414d
    9486:	58 41       	.word 0x4158
    9488:	56 47       	.word 0x4756
    948a:	00 4d       	.word 0x4d00

0000948b <.LC36>:
    948b:	00 00       	.word 0
    948d:	00 00       	.word 0
    948f:	00 00       	.word 0
    9491:	00 00       	.word 0

00009493 <.LC37>:
    9493:	00 00       	.word 0
    9495:	00 00       	.word 0
    9497:	00 00       	.word 0
    9499:	00 00       	.word 0

0000949b <.LC38>:
    949b:	00 00       	.word 0
    949d:	00 00       	.word 0
    949f:	00 00       	.word 0
	...

000094a2 <.LC39>:
    94a2:	54 52       	.word 0x5254
    94a4:	49 47       	.word 0x4749
    94a6:	47 45       	.word 0x4547
    94a8:	52 00       	.word 0x52

000094aa <.LC40>:
    94aa:	42 55       	.word 0x5542
    94ac:	46 46       	.word 0x4646
    94ae:	45 52       	.word 0x5245
    94b0:	3f 00       	.word 0x3f

000094b2 <.LC41>:
    94b2:	42 55       	.word 0x5542
    94b4:	46 46       	.word 0x4646
    94b6:	45 52       	.word 0x5245
    94b8:	42 49       	.word 0x4942
    94ba:	4e 3f       	.word 0x3f4e
    94bc:	00 47       	.word 0x4700

000094bd <.LC42>:
    94bd:	00 00       	.word 0
    94bf:	00 00       	.word 0
	...

000094c2 <.LC43>:
    94c2:	47 41       	.word 0x4147
    94c4:	49 4e       	.word 0x4e49
    94c6:	3f 00       	.word 0x3f

000094c8 <.LC44>:
    94c8:	53 48       	.word 0x4853
    94ca:	41 50       	.word 0x5041
    94cc:	45 00       	.word 0x45

000094ce <.LC45>:
    94ce:	53 48       	.word 0x4853
    94d0:	41 50       	.word 0x5041
    94d2:	45 3f       	.word 0x3f45
    94d4:	00 46       	.word 0x4600

000094d5 <.LC46>:
    94d5:	00 00       	.word 0
    94d7:	00 00       	.word 0
	...

000094da <.LC47>:
    94da:	46 52       	.word 0x5246
    94dc:	45 51       	.word 0x5145
    94de:	3f 00       	.word 0x3f

000094e0 <.LC48>:
    94e0:	50 48       	.word 0x4850
    94e2:	41 53       	.word 0x5341
    94e4:	45 00       	.word 0x45

000094e6 <.LC49>:
    94e6:	50 48       	.word 0x4850
    94e8:	41 53       	.word 0x5341
    94ea:	45 3f       	.word 0x3f45
    94ec:	00 41       	.word 0x4100

000094ed <.LC50>:
    94ed:	00 00       	.word 0
    94ef:	00 00       	.word 0
    94f1:	00 00       	.word 0
    94f3:	00 00       	.word 0
    94f5:	00 00       	.word 0

000094f7 <.LC51>:
    94f7:	00 00       	.word 0
    94f9:	00 00       	.word 0
    94fb:	00 00       	.word 0
    94fd:	00 00       	.word 0
    94ff:	00 00       	.word 0
	...

00009502 <.LC52>:
    9502:	4f 46       	.word 0x464f
    9504:	46 53       	.word 0x5346
    9506:	45 54       	.word 0x5445
    9508:	00 4f       	.word 0x4f00

00009509 <.LC53>:
    9509:	00 00       	.word 0
    950b:	00 00       	.word 0
    950d:	00 00       	.word 0
    950f:	00 00       	.word 0

00009511 <.LC54>:
    9511:	00 00       	.word 0
    9513:	00 00       	.word 0
    9515:	00 00       	.word 0

00009517 <.LC55>:
    9517:	00 00       	.word 0
    9519:	00 00       	.word 0
    951b:	00 00       	.word 0
	...

0000951e <.LC56>:
    951e:	4e 53       	.word 0x534e
    9520:	51 41       	.word 0x4151
    9522:	44 4a       	.word 0x4a44
    9524:	00 4e       	.word 0x4e00

00009525 <.LC57>:
    9525:	00 00       	.word 0
    9527:	00 00       	.word 0
    9529:	00 00       	.word 0
    952b:	00 00       	.word 0

0000952d <.LC58>:
    952d:	00 00       	.word 0
    952f:	00 00       	.word 0
    9531:	00 00       	.word 0

00009533 <.LC59>:
    9533:	00 00       	.word 0
    9535:	00 00       	.word 0
	...

00009538 <.LC60>:
    9538:	45 52       	.word 0x5245
    953a:	41 53       	.word 0x5341
    953c:	45 00       	.word 0x45

0000953e <.LC61>:
    953e:	3a 2c       	.word 0x2c3a
    9540:	20 00       	.word 0x20

00009542 <.LC62>:
    9542:	4f 4e       	.word 0x4e4f
    9544:	00 4f       	.word 0x4f00

00009545 <.LC63>:
    9545:	00 00       	.word 0
    9547:	00 00       	.word 0

00009549 <.LC64>:
    9549:	00 00       	.word 0
    954b:	00 00       	.word 0
    954d:	00 00       	.word 0
	...

00009550 <.LC65>:
    9550:	31 0d       	.word 0xd31
    9552:	0a 00       	.word 0xa

00009554 <.LC66>:
    9554:	30 0d       	.word 0xd30
    9556:	0a 00       	.word 0xa

00009558 <.LC67>:
    9558:	2c 20       	.word 0x202c
    955a:	00 0d       	.word 0xd00

0000955b <.LC68>:
    955b:	00 00       	.word 0
	...

0000955e <.LC69>:
    955e:	2c 00       	.word 0x2c

00009560 <.LC70>:
    9560:	44 43       	.word 0x4344
    9562:	00 53       	.word 0x5300

00009563 <.LC71>:
    9563:	00 00       	.word 0
    9565:	00 00       	.word 0

00009567 <.LC72>:
    9567:	00 00       	.word 0
    9569:	00 00       	.word 0
    956b:	00 00       	.word 0
	...

0000956e <.LC73>:
    956e:	54 52       	.word 0x5254
    9570:	49 41       	.word 0x4149
    9572:	4e 47       	.word 0x474e
    9574:	4c 45       	.word 0x454c
    9576:	00 53       	.word 0x5300

00009577 <.LC74>:
    9577:	00 00       	.word 0
    9579:	00 00       	.word 0
    957b:	00 00       	.word 0
	...

0000957e <.LC75>:
    957e:	52 45       	.word 0x4552
    9580:	50 45       	.word 0x4550
    9582:	41 54       	.word 0x5441
    9584:	00 31       	.word 0x3100

00009585 <.LC76>:
    9585:	00 00       	.word 0
	...

00009588 <.LC77>:
    9588:	30 2c       	.word 0x2c30
    958a:	00 00       	.word 0

0000958c <_Device>:
    958c:	12 01       	.word 0x112
    958e:	00 02       	.word 0x200
    9590:	02 00       	.word 0x2
    9592:	00 40       	.word 0x4000
    9594:	66 66       	.word 0x6666
    9596:	dc 0c       	.word 0xcdc
    9598:	00 00       	.word 0
    959a:	01 02       	.word 0x201
    959c:	00 01       	.word 0x100

0000959e <_Configuration1>:
    959e:	09 02       	.word 0x209
    95a0:	43 00       	.word 0x43
    95a2:	02 01       	.word 0x102
    95a4:	00 a0       	.word 0xa000
    95a6:	32 09       	.word 0x932
    95a8:	04 00       	.word 0x4
    95aa:	00 01       	.word 0x100
    95ac:	02 02       	.word 0x202
    95ae:	00 00       	.word 0
    95b0:	05 24       	.word 0x2405
    95b2:	00 10       	.word 0x1000
    95b4:	01 04       	.word 0x401
    95b6:	24 02       	.word 0x224
    95b8:	02 05       	.word 0x502
    95ba:	24 06       	.word 0x624
    95bc:	00 01       	.word 0x100
    95be:	05 24       	.word 0x2405
    95c0:	01 01       	.word 0x101
    95c2:	01 07       	.word 0x701
    95c4:	05 81       	.word 0x8105
    95c6:	03 0a       	.word 0xa03
    95c8:	00 40       	.word 0x4000
    95ca:	09 04       	.word 0x409
    95cc:	01 00       	.word 0x1
    95ce:	02 0a       	.word 0xa02
    95d0:	00 00       	.word 0
    95d2:	00 07       	.word 0x700
    95d4:	05 02       	.word 0x205
    95d6:	02 40       	.word 0x4002
    95d8:	00 00       	.word 0
    95da:	07 05       	.word 0x507
    95dc:	82 02       	.word 0x282
    95de:	40 00       	.word 0x40
    95e0:	00 00       	.word 0

000095e2 <_Configurations>:
    95e2:	9e 95       	.word 0x959e

000095e4 <_String0>:
    95e4:	04 03       	.word 0x304
    95e6:	09 04       	.word 0x409

000095e8 <_String1>:
    95e8:	1a 03       	.word 0x31a
    95ea:	4f 00       	.word 0x4f
    95ec:	6c 00       	.word 0x6c
    95ee:	69 00       	.word 0x69
    95f0:	6e 00       	.word 0x6e
    95f2:	20 00       	.word 0x20
    95f4:	43 00       	.word 0x43
    95f6:	6f 00       	.word 0x6f
    95f8:	6c 00       	.word 0x6c
    95fa:	6c 00       	.word 0x6c
    95fc:	65 00       	.word 0x65
    95fe:	67 00       	.word 0x67
    9600:	65 00       	.word 0x65

00009602 <_String2>:
    9602:	36 03       	.word 0x336
    9604:	50 00       	.word 0x50
    9606:	49 00       	.word 0x49
    9608:	43 00       	.word 0x43
    960a:	32 00       	.word 0x32
    960c:	34 00       	.word 0x34
    960e:	46 00       	.word 0x46
    9610:	4a 00       	.word 0x4a
    9612:	31 00       	.word 0x31
    9614:	32 00       	.word 0x32
    9616:	38 00       	.word 0x38
    9618:	47 00       	.word 0x47
    961a:	43 00       	.word 0x43
    961c:	30 00       	.word 0x30
    961e:	30 00       	.word 0x30
    9620:	36 00       	.word 0x36
    9622:	20 00       	.word 0x20
    9624:	43 00       	.word 0x43
    9626:	44 00       	.word 0x44
    9628:	43 00       	.word 0x43
    962a:	20 00       	.word 0x20
    962c:	44 00       	.word 0x44
    962e:	65 00       	.word 0x65
    9630:	76 00       	.word 0x76
    9632:	69 00       	.word 0x69
    9634:	63 00       	.word 0x63
    9636:	65 00       	.word 0x65

00009638 <_Strings>:
    9638:	e4 95       	.word 0x95e4
    963a:	e8 95       	.word 0x95e8
    963c:	02 96       	.word 0x9602
Disassembly of section .text:

0000163e <_trigger_sweep_at_4MSps>:
extern uint16_t scope_buffer[];

uint16_t *ch1ptr, *ch2ptr;

void trigger_sweep_at_4MSps(void) {
    163e:	00 00 fa    	lnk       #0x0

    ch1ptr = &scope_buffer[0];
    1640:	80 88 20    	mov.w     #0x888, w0
    1642:	20 44 88    	mov.w     w0, 0x884
    ch2ptr = &scope_buffer[SCOPE_BUFFER_SIZE / 2];
    1644:	00 44 21    	mov.w     #0x1440, w0
    1646:	30 44 88    	mov.w     w0, 0x886

    disable_interrupts();
    1648:	ff 3f fc    	disi      #0x3fff
    ADCON3bits.SLEN0 = 1;           // enable sample list 0 in ADCON3
    164a:	05 05 a8    	bset.b    0x505, #0x0
    ADL0CONLbits.SLEN = 1;          // enable sample list 0
    164c:	1d e5 a8    	bset.b    0x51d, #0x7
    ADL0CONLbits.SAMP = 0;
    164e:	1d c5 a9    	bclr.b    0x51d, #0x6
    __asm__("mov _ch1ptr, W0");
    1650:	20 44 80    	mov.w     0x884, w0
    __asm__("mov _ch2ptr, W1");
    1652:	31 44 80    	mov.w     0x886, w1
	...
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("mov _ADRES0, W2");
    166c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    166e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1670:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1672:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1674:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1676:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1678:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    167a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    167c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    167e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1680:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1682:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1684:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1686:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1688:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    168a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    168c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    168e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1690:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1692:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1694:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1696:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1698:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    169a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    169c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    169e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    16f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    16fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    16fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    16fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1700:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1702:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1704:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1706:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1708:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    170a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    170c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    170e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1710:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1712:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1714:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1716:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1718:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    171a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    171c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    171e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1720:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1722:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1724:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1726:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1728:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    172a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    172c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    172e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1730:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1732:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1734:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1736:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1738:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    173a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    173c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    173e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1740:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1742:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1744:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1746:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1748:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    174a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    174c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    174e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1750:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1752:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1754:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1756:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1758:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    175a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    175c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    175e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1760:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1762:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1764:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1766:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1768:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    176a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    176c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    176e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1770:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1772:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1774:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1776:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1778:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    177a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    177c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    177e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1780:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1782:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1784:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1786:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1788:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    178a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    178c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    178e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1790:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1792:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1794:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1796:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1798:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    179a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    179c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    179e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    17f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    17fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    17fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    17fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1800:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1802:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1804:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1806:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1808:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    180a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    180c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    180e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1810:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1812:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1814:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1816:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1818:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    181a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    181c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    181e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1820:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1822:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1824:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1826:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1828:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    182a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    182c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    182e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1830:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1832:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1834:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1836:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1838:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    183a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    183c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    183e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1840:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1842:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1844:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1846:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1848:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    184a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    184c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    184e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1850:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1852:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1854:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1856:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1858:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    185a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    185c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    185e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1860:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1862:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1864:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1866:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1868:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    186a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    186c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    186e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1870:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1872:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1874:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1876:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1878:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    187a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    187c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    187e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1880:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1882:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1884:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1886:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1888:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    188a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    188c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    188e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1890:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1892:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1894:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1896:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1898:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    189a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    189c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    189e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    18f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    18fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    18fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    18fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1900:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1902:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1904:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1906:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1908:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    190a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    190c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    190e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1910:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1912:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1914:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1916:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1918:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    191a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    191c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    191e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1920:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1922:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1924:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1926:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1928:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    192a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    192c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    192e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1930:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1932:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1934:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1936:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1938:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    193a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    193c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    193e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1940:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1942:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1944:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1946:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1948:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    194a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    194c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    194e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1950:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1952:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1954:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1956:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1958:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    195a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    195c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    195e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1960:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1962:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1964:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1966:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1968:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    196a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    196c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    196e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1970:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1972:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1974:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1976:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1978:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    197a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    197c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    197e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1980:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1982:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1984:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1986:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1988:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    198a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    198c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    198e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1990:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1992:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1994:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1996:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1998:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    199a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    199c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    199e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    19f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    19fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    19fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    19fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1a98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1a9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1a9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1a9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1aa0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1aa2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1aa4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1aa6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1aa8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1aaa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1aac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1aae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ab0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ab2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ab4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ab6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ab8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1aba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1abc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1abe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ac0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ac2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ac4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ac6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ac8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1aca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1acc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ace:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ad0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ad2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ad4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ad6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ad8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ada:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1adc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ade:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ae0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ae2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ae4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ae6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ae8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1aea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1aec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1aee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1af0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1af2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1af4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1af6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1af8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1afa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1afc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1afe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1b98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1b9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1b9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1b9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ba0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ba2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ba4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ba6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ba8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1baa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1bac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1bae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1bb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1bb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1bb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1bb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1bb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1bba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1bbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1bbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1bc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1bc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1bc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1bc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1bc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1bca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1bcc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1bce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1bd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1bd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1bd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1bd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1bd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1bda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1bdc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1bde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1be0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1be2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1be4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1be6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1be8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1bea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1bec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1bee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1bf0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1bf2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1bf4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1bf6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1bf8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1bfa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1bfc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1bfe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1c98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1c9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1c9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1c9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ca0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ca2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ca4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ca6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ca8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1caa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1cac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1cae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1cb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1cb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1cb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1cb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1cb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1cba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1cbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1cbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1cc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1cc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1cc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1cc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1cc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1cca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ccc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1cce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1cd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1cd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1cd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1cd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1cd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1cda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1cdc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1cde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ce0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ce2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ce4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ce6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ce8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1cea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1cec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1cee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1cf0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1cf2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1cf4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1cf6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1cf8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1cfa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1cfc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1cfe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1d98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1d9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1d9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1d9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1da0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1da2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1da4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1da6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1da8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1daa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1dac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1dae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1db0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1db2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1db4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1db6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1db8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1dba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1dbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1dbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1dc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1dc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1dc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1dc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1dc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1dca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1dcc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1dce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1dd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1dd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1dd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1dd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1dd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1dda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ddc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1dde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1de0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1de2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1de4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1de6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1de8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1dea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1dec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1dee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1df0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1df2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1df4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1df6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1df8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1dfa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1dfc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1dfe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1e98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1e9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1e9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1e9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ea0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ea2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ea4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ea6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ea8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1eaa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1eac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1eae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1eb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1eb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1eb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1eb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1eb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1eba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ebc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ebe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ec0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ec2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ec4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ec6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ec8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1eca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ecc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ece:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ed0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ed2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ed4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ed6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ed8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1eda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1edc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ede:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ee0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ee2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ee4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ee6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ee8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1eea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1eec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1eee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ef0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ef2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ef4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ef6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ef8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1efa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1efc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1efe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1f98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1f9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1f9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1f9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1fa0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1fa2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1fa4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1fa6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1fa8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1faa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1fac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1fae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1fb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1fb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1fb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1fb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1fb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1fba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1fbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1fbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1fc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1fc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1fc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1fc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1fc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1fca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1fcc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1fce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1fd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1fd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1fd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1fd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1fd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1fda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1fdc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1fde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1fe0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1fe2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1fe4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1fe6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1fe8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1fea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1fec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1fee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ff0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ff2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ff4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ff6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    1ff8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    1ffa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    1ffc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    1ffe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2000:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2002:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2004:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2006:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2008:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    200a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    200c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    200e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2010:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2012:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2014:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2016:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2018:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    201a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    201c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    201e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2020:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2022:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2024:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2026:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2028:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    202a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    202c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    202e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2030:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2032:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2034:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2036:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2038:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    203a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    203c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    203e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2040:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2042:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2044:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2046:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2048:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    204a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    204c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    204e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2050:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2052:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2054:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2056:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2058:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    205a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    205c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    205e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2060:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2062:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2064:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2066:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2068:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    206a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    206c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    206e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2070:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2072:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2074:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2076:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2078:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    207a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    207c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    207e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2080:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2082:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2084:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2086:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2088:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    208a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    208c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    208e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2090:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2092:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2094:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2096:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2098:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    209a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    209c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    209e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    20f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    20fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    20fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    20fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2100:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2102:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2104:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2106:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2108:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    210a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    210c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    210e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2110:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2112:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2114:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2116:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2118:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    211a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    211c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    211e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2120:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2122:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2124:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2126:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2128:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    212a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    212c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    212e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2130:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2132:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2134:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2136:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2138:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    213a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    213c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    213e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2140:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2142:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2144:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2146:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2148:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    214a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    214c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    214e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2150:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2152:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2154:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2156:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2158:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    215a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    215c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    215e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2160:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2162:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2164:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2166:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2168:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    216a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    216c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    216e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2170:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2172:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2174:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2176:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2178:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    217a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    217c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    217e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2180:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2182:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2184:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2186:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2188:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    218a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    218c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    218e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2190:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2192:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2194:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2196:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2198:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    219a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    219c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    219e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    21f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    21fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    21fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    21fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2200:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2202:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2204:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2206:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2208:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    220a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    220c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    220e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2210:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2212:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2214:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2216:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2218:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    221a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    221c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    221e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2220:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2222:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2224:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2226:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2228:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    222a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    222c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    222e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2230:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2232:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2234:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2236:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2238:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    223a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    223c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    223e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2240:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2242:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2244:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2246:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2248:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    224a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    224c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    224e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2250:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2252:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2254:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2256:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2258:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    225a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    225c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    225e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2260:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2262:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2264:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2266:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2268:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    226a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    226c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    226e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2270:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2272:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2274:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2276:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2278:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    227a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    227c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    227e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2280:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2282:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2284:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2286:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2288:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    228a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    228c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    228e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2290:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2292:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2294:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2296:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2298:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    229a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    229c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    229e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    22f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    22fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    22fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    22fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2300:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2302:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2304:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2306:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2308:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    230a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    230c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    230e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2310:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2312:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2314:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2316:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2318:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    231a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    231c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    231e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2320:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2322:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2324:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2326:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2328:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    232a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    232c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    232e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2330:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2332:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2334:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2336:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2338:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    233a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    233c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    233e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2340:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2342:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2344:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2346:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2348:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    234a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    234c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    234e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2350:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2352:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2354:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2356:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2358:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    235a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    235c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    235e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2360:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2362:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2364:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2366:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2368:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    236a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    236c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    236e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2370:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2372:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2374:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2376:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2378:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    237a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    237c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    237e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2380:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2382:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2384:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2386:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2388:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    238a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    238c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    238e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2390:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2392:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2394:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2396:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2398:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    239a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    239c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    239e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    23f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    23fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    23fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    23fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2400:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2402:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2404:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2406:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2408:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    240a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    240c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    240e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2410:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2412:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2414:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2416:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2418:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    241a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    241c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    241e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2420:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2422:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2424:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2426:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2428:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    242a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    242c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    242e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2430:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2432:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2434:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2436:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2438:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    243a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    243c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    243e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2440:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2442:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2444:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2446:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2448:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    244a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    244c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    244e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2450:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2452:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2454:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2456:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2458:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    245a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    245c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    245e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2460:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2462:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2464:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2466:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2468:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    246a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    246c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    246e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2470:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2472:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2474:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2476:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2478:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    247a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    247c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    247e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2480:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2482:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2484:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2486:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2488:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    248a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    248c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    248e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2490:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2492:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2494:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2496:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2498:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    249a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    249c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    249e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    24f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    24fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    24fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    24fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2500:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2502:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2504:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2506:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2508:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    250a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    250c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    250e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2510:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2512:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2514:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2516:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2518:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    251a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    251c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    251e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2520:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2522:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2524:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2526:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2528:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    252a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    252c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    252e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2530:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2532:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2534:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2536:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2538:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    253a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    253c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    253e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2540:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2542:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2544:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2546:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2548:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    254a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    254c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    254e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2550:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2552:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2554:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2556:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2558:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    255a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    255c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    255e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2560:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2562:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2564:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2566:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2568:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    256a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    256c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    256e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2570:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2572:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2574:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2576:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2578:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    257a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    257c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    257e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2580:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2582:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2584:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2586:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2588:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    258a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    258c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    258e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2590:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2592:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2594:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2596:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2598:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    259a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    259c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    259e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    25f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    25fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    25fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    25fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2600:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2602:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2604:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2606:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2608:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    260a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    260c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    260e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2610:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2612:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2614:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2616:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2618:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    261a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    261c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    261e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2620:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2622:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2624:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2626:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2628:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    262a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    262c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    262e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2630:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2632:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2634:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2636:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2638:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    263a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    263c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    263e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2640:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2642:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2644:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2646:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2648:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    264a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    264c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    264e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2650:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2652:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2654:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2656:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2658:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    265a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    265c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    265e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2660:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2662:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2664:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2666:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2668:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    266a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    266c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    266e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2670:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2672:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2674:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2676:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2678:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    267a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    267c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    267e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2680:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2682:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2684:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2686:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2688:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    268a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    268c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    268e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2690:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2692:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2694:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2696:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2698:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    269a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    269c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    269e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    26f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    26fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    26fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    26fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2700:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2702:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2704:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2706:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2708:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    270a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    270c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    270e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2710:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2712:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2714:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2716:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2718:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    271a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    271c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    271e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2720:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2722:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2724:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2726:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2728:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    272a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    272c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    272e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2730:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2732:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2734:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2736:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2738:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    273a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    273c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    273e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2740:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2742:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2744:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2746:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2748:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    274a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    274c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    274e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2750:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2752:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2754:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2756:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2758:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    275a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    275c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    275e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2760:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2762:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2764:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2766:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2768:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    276a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    276c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    276e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2770:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2772:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2774:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2776:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2778:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    277a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    277c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    277e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2780:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2782:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2784:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2786:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2788:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    278a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    278c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    278e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2790:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2792:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2794:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2796:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2798:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    279a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    279c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    279e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    27f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    27fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    27fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    27fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2800:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2802:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2804:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2806:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2808:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    280a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    280c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    280e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2810:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2812:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2814:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2816:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2818:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    281a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    281c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    281e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2820:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2822:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2824:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2826:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2828:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    282a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    282c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    282e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2830:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2832:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2834:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2836:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2838:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    283a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    283c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    283e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2840:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2842:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2844:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2846:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2848:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    284a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    284c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    284e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2850:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2852:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2854:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2856:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2858:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    285a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    285c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    285e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2860:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2862:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2864:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2866:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2868:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    286a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    286c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    286e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2870:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2872:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2874:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2876:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2878:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    287a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    287c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    287e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2880:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2882:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2884:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2886:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2888:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    288a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    288c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    288e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2890:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2892:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2894:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2896:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2898:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    289a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    289c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    289e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    28f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    28fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    28fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    28fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2900:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2902:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2904:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2906:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2908:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    290a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    290c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    290e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2910:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2912:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2914:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2916:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2918:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    291a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    291c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    291e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2920:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2922:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2924:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2926:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2928:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    292a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    292c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    292e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2930:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2932:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2934:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2936:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2938:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    293a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    293c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    293e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2940:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2942:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2944:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2946:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2948:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    294a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    294c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    294e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2950:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2952:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2954:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2956:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2958:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    295a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    295c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    295e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2960:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2962:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2964:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2966:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2968:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    296a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    296c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    296e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2970:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2972:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2974:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2976:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2978:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    297a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    297c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    297e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2980:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2982:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2984:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2986:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2988:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    298a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    298c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    298e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2990:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2992:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2994:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2996:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2998:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    299a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    299c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    299e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    29f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    29fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    29fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    29fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2a98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2a9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2a9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2a9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2aa0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2aa2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2aa4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2aa6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2aa8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2aaa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2aac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2aae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ab0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ab2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ab4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ab6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ab8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2aba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2abc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2abe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ac0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ac2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ac4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ac6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ac8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2aca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2acc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ace:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ad0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ad2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ad4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ad6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ad8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ada:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2adc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ade:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ae0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ae2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ae4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ae6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ae8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2aea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2aec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2aee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2af0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2af2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2af4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2af6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2af8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2afa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2afc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2afe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2b98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2b9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2b9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2b9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ba0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ba2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ba4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ba6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ba8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2baa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2bac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2bae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2bb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2bb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2bb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2bb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2bb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2bba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2bbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2bbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2bc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2bc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2bc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2bc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2bc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2bca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2bcc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2bce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2bd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2bd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2bd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2bd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2bd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2bda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2bdc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2bde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2be0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2be2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2be4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2be6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2be8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2bea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2bec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2bee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2bf0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2bf2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2bf4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2bf6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2bf8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2bfa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2bfc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2bfe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2c98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2c9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2c9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2c9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ca0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ca2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ca4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ca6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ca8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2caa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2cac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2cae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2cb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2cb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2cb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2cb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2cb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2cba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2cbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2cbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2cc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2cc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2cc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2cc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2cc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2cca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ccc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2cce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2cd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2cd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2cd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2cd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2cd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2cda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2cdc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2cde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ce0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ce2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ce4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ce6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ce8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2cea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2cec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2cee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2cf0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2cf2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2cf4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2cf6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2cf8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2cfa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2cfc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2cfe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2d98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2d9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2d9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2d9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2da0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2da2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2da4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2da6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2da8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2daa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2dac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2dae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2db0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2db2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2db4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2db6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2db8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2dba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2dbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2dbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2dc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2dc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2dc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2dc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2dc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2dca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2dcc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2dce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2dd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2dd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2dd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2dd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2dd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2dda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ddc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2dde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2de0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2de2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2de4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2de6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2de8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2dea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2dec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2dee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2df0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2df2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2df4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2df6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2df8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2dfa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2dfc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2dfe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2e98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2e9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2e9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2e9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ea0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ea2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ea4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ea6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ea8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2eaa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2eac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2eae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2eb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2eb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2eb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2eb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2eb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2eba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ebc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ebe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ec0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ec2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ec4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ec6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ec8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2eca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ecc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ece:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ed0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ed2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ed4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ed6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ed8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2eda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2edc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ede:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ee0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ee2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ee4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ee6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ee8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2eea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2eec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2eee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ef0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ef2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ef4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ef6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ef8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2efa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2efc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2efe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2f98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2f9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2f9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2f9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2fa0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2fa2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2fa4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2fa6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2fa8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2faa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2fac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2fae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2fb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2fb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2fb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2fb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2fb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2fba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2fbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2fbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2fc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2fc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2fc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2fc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2fc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2fca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2fcc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2fce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2fd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2fd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2fd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2fd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2fd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2fda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2fdc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2fde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2fe0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2fe2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2fe4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2fe6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2fe8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2fea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2fec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2fee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ff0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ff2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ff4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ff6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    2ff8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    2ffa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    2ffc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    2ffe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3000:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3002:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3004:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3006:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3008:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    300a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    300c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    300e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3010:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3012:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3014:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3016:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3018:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    301a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    301c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    301e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3020:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3022:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3024:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3026:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3028:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    302a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    302c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    302e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3030:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3032:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3034:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3036:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3038:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    303a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    303c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    303e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3040:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3042:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3044:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3046:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3048:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    304a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    304c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    304e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3050:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3052:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3054:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3056:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3058:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    305a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    305c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    305e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3060:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3062:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3064:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3066:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3068:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    306a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    306c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    306e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3070:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3072:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3074:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3076:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3078:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    307a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    307c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    307e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3080:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3082:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3084:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3086:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3088:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    308a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    308c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    308e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3090:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3092:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3094:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3096:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3098:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    309a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    309c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    309e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    30f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    30fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    30fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    30fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3100:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3102:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3104:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3106:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3108:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    310a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    310c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    310e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3110:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3112:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3114:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3116:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3118:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    311a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    311c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    311e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3120:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3122:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3124:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3126:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3128:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    312a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    312c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    312e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3130:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3132:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3134:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3136:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3138:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    313a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    313c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    313e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3140:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3142:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3144:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3146:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3148:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    314a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    314c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    314e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3150:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3152:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3154:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3156:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3158:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    315a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    315c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    315e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3160:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3162:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3164:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3166:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3168:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    316a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    316c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    316e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3170:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3172:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3174:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3176:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3178:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    317a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    317c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    317e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3180:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3182:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3184:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3186:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3188:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    318a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    318c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    318e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3190:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3192:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3194:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3196:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3198:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    319a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    319c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    319e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    31f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    31fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    31fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    31fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3200:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3202:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3204:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3206:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3208:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    320a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    320c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    320e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3210:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3212:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3214:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3216:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3218:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    321a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    321c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    321e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3220:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3222:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3224:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3226:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3228:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    322a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    322c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    322e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3230:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3232:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3234:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3236:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3238:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    323a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    323c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    323e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3240:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3242:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3244:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3246:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3248:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    324a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    324c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    324e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3250:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3252:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3254:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3256:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3258:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    325a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    325c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    325e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3260:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3262:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3264:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3266:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3268:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    326a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    326c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    326e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3270:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3272:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3274:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3276:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3278:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    327a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    327c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    327e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3280:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3282:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3284:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3286:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3288:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    328a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    328c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    328e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3290:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3292:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3294:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3296:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3298:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    329a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    329c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    329e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    32f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    32fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    32fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    32fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3300:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3302:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3304:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3306:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3308:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    330a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    330c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    330e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3310:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3312:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3314:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3316:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3318:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    331a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    331c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    331e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3320:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3322:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3324:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3326:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3328:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    332a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    332c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    332e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3330:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3332:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3334:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3336:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3338:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    333a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    333c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    333e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3340:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3342:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3344:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3346:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3348:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    334a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    334c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    334e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3350:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3352:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3354:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3356:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3358:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    335a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    335c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    335e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3360:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3362:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3364:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3366:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3368:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    336a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    336c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    336e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3370:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3372:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3374:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3376:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3378:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    337a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    337c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    337e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3380:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3382:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3384:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3386:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3388:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    338a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    338c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    338e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3390:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3392:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3394:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3396:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3398:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    339a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    339c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    339e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    33f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    33fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    33fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    33fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3400:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3402:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3404:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3406:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3408:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    340a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    340c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    340e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3410:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3412:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3414:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3416:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3418:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    341a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    341c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    341e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3420:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3422:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3424:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3426:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3428:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    342a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    342c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    342e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3430:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3432:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3434:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3436:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3438:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    343a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    343c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    343e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3440:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3442:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3444:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3446:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3448:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    344a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    344c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    344e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3450:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3452:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3454:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3456:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3458:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    345a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    345c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    345e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3460:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3462:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3464:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3466:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3468:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    346a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    346c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    346e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3470:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3472:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3474:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3476:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3478:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    347a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    347c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    347e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3480:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3482:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3484:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3486:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3488:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    348a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    348c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    348e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3490:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3492:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3494:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3496:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3498:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    349a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    349c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    349e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    34f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    34fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    34fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    34fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3500:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3502:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3504:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3506:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3508:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    350a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    350c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    350e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3510:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3512:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3514:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3516:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3518:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    351a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    351c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    351e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3520:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3522:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3524:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3526:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3528:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    352a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    352c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    352e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3530:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3532:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3534:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3536:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3538:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    353a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    353c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    353e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3540:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3542:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3544:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3546:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3548:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    354a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    354c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    354e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3550:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3552:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3554:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3556:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3558:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    355a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    355c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    355e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3560:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3562:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3564:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3566:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3568:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    356a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    356c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    356e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3570:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3572:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3574:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3576:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3578:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    357a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    357c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    357e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3580:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3582:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3584:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3586:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3588:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    358a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    358c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    358e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3590:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3592:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3594:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3596:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3598:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    359a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    359c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    359e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    35f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    35fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    35fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    35fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3600:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3602:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3604:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3606:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3608:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    360a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    360c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    360e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3610:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3612:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3614:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3616:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3618:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    361a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    361c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    361e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3620:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3622:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3624:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3626:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3628:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    362a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    362c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    362e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3630:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3632:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3634:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3636:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3638:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    363a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    363c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    363e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3640:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3642:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3644:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3646:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3648:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    364a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    364c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    364e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3650:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3652:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3654:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3656:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3658:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    365a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    365c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    365e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3660:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3662:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3664:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3666:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3668:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    366a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    366c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    366e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3670:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3672:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3674:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3676:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3678:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    367a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    367c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    367e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3680:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3682:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3684:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3686:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3688:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    368a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    368c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    368e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3690:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3692:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3694:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3696:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3698:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    369a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    369c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    369e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    36f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    36fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    36fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    36fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3700:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3702:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3704:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3706:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3708:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    370a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    370c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    370e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3710:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3712:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3714:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3716:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3718:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    371a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    371c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    371e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3720:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3722:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3724:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3726:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3728:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    372a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    372c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    372e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3730:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3732:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3734:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3736:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3738:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    373a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    373c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    373e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3740:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3742:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3744:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3746:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3748:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    374a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    374c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    374e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3750:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3752:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3754:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3756:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3758:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    375a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    375c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    375e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3760:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3762:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3764:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3766:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3768:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    376a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    376c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    376e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3770:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3772:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3774:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3776:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3778:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    377a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    377c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    377e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3780:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3782:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3784:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3786:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3788:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    378a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    378c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    378e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3790:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3792:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3794:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3796:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3798:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    379a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    379c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    379e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    37f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    37fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    37fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    37fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3800:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3802:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3804:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3806:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3808:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    380a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    380c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    380e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3810:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3812:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3814:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3816:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3818:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    381a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    381c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    381e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3820:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3822:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3824:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3826:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3828:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    382a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    382c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    382e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3830:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3832:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3834:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3836:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3838:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    383a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    383c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    383e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3840:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3842:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3844:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3846:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3848:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    384a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    384c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    384e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3850:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3852:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3854:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3856:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3858:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    385a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    385c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    385e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3860:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3862:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3864:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3866:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3868:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    386a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    386c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    386e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3870:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3872:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3874:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3876:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3878:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    387a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    387c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    387e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3880:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3882:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3884:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3886:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3888:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    388a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    388c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    388e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3890:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3892:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3894:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3896:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3898:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    389a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    389c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    389e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    38f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    38fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    38fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    38fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3900:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3902:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3904:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3906:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3908:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    390a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    390c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    390e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3910:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3912:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3914:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3916:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3918:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    391a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    391c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    391e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3920:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3922:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3924:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3926:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3928:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    392a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    392c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    392e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3930:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3932:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3934:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3936:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3938:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    393a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    393c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    393e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3940:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3942:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3944:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3946:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3948:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    394a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    394c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    394e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3950:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3952:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3954:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3956:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3958:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    395a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    395c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    395e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3960:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3962:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3964:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3966:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3968:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    396a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    396c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    396e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3970:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3972:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3974:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3976:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3978:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    397a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    397c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    397e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3980:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3982:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3984:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3986:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3988:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    398a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    398c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    398e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3990:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3992:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3994:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3996:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3998:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    399a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    399c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    399e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    39f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    39fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    39fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    39fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3a98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3a9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3a9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3a9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3aa0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3aa2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3aa4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3aa6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3aa8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3aaa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3aac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3aae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ab0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ab2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ab4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ab6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ab8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3aba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3abc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3abe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ac0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ac2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ac4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ac6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ac8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3aca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3acc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ace:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ad0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ad2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ad4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ad6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ad8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ada:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3adc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ade:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ae0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ae2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ae4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ae6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ae8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3aea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3aec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3aee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3af0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3af2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3af4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3af6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3af8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3afa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3afc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3afe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3b98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3b9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3b9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3b9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ba0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ba2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ba4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ba6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ba8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3baa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3bac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3bae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3bb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3bb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3bb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3bb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3bb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3bba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3bbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3bbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3bc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3bc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3bc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3bc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3bc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3bca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3bcc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3bce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3bd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3bd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3bd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3bd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3bd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3bda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3bdc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3bde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3be0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3be2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3be4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3be6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3be8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3bea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3bec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3bee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3bf0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3bf2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3bf4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3bf6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3bf8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3bfa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3bfc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3bfe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3c98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3c9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3c9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3c9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ca0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ca2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ca4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ca6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ca8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3caa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3cac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3cae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3cb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3cb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3cb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3cb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3cb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3cba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3cbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3cbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3cc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3cc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3cc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3cc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3cc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3cca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ccc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3cce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3cd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3cd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3cd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3cd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3cd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3cda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3cdc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3cde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ce0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ce2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ce4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ce6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ce8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3cea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3cec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3cee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3cf0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3cf2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3cf4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3cf6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3cf8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3cfa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3cfc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3cfe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3d98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3d9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3d9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3d9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3da0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3da2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3da4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3da6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3da8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3daa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3dac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3dae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3db0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3db2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3db4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3db6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3db8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3dba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3dbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3dbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3dc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3dc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3dc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3dc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3dc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3dca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3dcc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3dce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3dd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3dd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3dd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3dd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3dd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3dda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ddc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3dde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3de0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3de2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3de4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3de6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3de8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3dea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3dec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3dee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3df0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3df2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3df4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3df6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3df8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3dfa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3dfc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3dfe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3e98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3e9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3e9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3e9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ea0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ea2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ea4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ea6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ea8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3eaa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3eac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3eae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3eb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3eb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3eb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3eb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3eb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3eba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ebc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ebe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ec0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ec2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ec4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ec6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ec8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3eca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ecc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ece:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ed0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ed2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ed4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ed6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ed8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3eda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3edc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ede:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ee0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ee2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ee4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ee6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ee8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3eea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3eec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3eee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ef0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ef2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ef4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ef6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ef8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3efa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3efc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3efe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f00:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f02:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f04:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f06:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f08:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f0a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f0c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f0e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f10:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f12:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f14:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f16:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f18:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f1a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f1c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f1e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f20:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f22:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f24:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f26:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f28:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f2a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f2c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f2e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f30:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f32:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f34:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f36:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f38:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f3a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f3c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f3e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f40:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f42:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f44:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f46:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f48:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f4a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f4c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f4e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f50:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f52:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f54:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f56:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f58:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f5a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f5c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f5e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f60:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f62:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f64:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f66:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f68:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f6a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f6c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f6e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f70:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f72:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f74:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f76:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f78:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f7a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f7c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f7e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f80:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f82:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f84:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f86:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f88:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f8a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f8c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f8e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f90:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f92:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f94:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f96:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3f98:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3f9a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3f9c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3f9e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3fa0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3fa2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3fa4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3fa6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3fa8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3faa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3fac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3fae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3fb0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3fb2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3fb4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3fb6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3fb8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3fba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3fbc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3fbe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3fc0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3fc2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3fc4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3fc6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3fc8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3fca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3fcc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3fce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3fd0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3fd2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3fd4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3fd6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3fd8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3fda:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3fdc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3fde:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3fe0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3fe2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3fe4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3fe6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3fe8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3fea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3fec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3fee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ff0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ff2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ff4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ff6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    3ff8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    3ffa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    3ffc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    3ffe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4000:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4002:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4004:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4006:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4008:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    400a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    400c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    400e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4010:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4012:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4014:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4016:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4018:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    401a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    401c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    401e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4020:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4022:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4024:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4026:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4028:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    402a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    402c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    402e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4030:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4032:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4034:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4036:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4038:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    403a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    403c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    403e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4040:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4042:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4044:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4046:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4048:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    404a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    404c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    404e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4050:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4052:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4054:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4056:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4058:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    405a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    405c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    405e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4060:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4062:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4064:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4066:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4068:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    406a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    406c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    406e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4070:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4072:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4074:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4076:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4078:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    407a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    407c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    407e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4080:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4082:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4084:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4086:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4088:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    408a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    408c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    408e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4090:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4092:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4094:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4096:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4098:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    409a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    409c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    409e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    40f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    40fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    40fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    40fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4100:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4102:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4104:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4106:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4108:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    410a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    410c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    410e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4110:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4112:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4114:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4116:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4118:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    411a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    411c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    411e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4120:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4122:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4124:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4126:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4128:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    412a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    412c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    412e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4130:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4132:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4134:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4136:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4138:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    413a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    413c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    413e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4140:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4142:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4144:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4146:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4148:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    414a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    414c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    414e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4150:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4152:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4154:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4156:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4158:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    415a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    415c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    415e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4160:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4162:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4164:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4166:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4168:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    416a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    416c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    416e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4170:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4172:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4174:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4176:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4178:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    417a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    417c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    417e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4180:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4182:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4184:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4186:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4188:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    418a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    418c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    418e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4190:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4192:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4194:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4196:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4198:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    419a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    419c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    419e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    41f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    41fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    41fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    41fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4200:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4202:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4204:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4206:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4208:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    420a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    420c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    420e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4210:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4212:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4214:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4216:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4218:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    421a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    421c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    421e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4220:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4222:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4224:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4226:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4228:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    422a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    422c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    422e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4230:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4232:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4234:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4236:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4238:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    423a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    423c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    423e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4240:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4242:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4244:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4246:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4248:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    424a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    424c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    424e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4250:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4252:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4254:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4256:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4258:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    425a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    425c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    425e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4260:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4262:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4264:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4266:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4268:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    426a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    426c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    426e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4270:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4272:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4274:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4276:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4278:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    427a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    427c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    427e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4280:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4282:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4284:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4286:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4288:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    428a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    428c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    428e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4290:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4292:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4294:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4296:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4298:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    429a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    429c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    429e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    42f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    42fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    42fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    42fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4300:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4302:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4304:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4306:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4308:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    430a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    430c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    430e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4310:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4312:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4314:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4316:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4318:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    431a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    431c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    431e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4320:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4322:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4324:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4326:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4328:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    432a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    432c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    432e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4330:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4332:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4334:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4336:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4338:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    433a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    433c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    433e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4340:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4342:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4344:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4346:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4348:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    434a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    434c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    434e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4350:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4352:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4354:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4356:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4358:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    435a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    435c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    435e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4360:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4362:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4364:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4366:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4368:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    436a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    436c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    436e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4370:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4372:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4374:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4376:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4378:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    437a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    437c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    437e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4380:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4382:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4384:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4386:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4388:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    438a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    438c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    438e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4390:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4392:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4394:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4396:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4398:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    439a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    439c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    439e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    43f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    43fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    43fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    43fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4400:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4402:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4404:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4406:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4408:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    440a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    440c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    440e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4410:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4412:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4414:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4416:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4418:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    441a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    441c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    441e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4420:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4422:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4424:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4426:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4428:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    442a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    442c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    442e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4430:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4432:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4434:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4436:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4438:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    443a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    443c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    443e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4440:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4442:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4444:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4446:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4448:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    444a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    444c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    444e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4450:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4452:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4454:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4456:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4458:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    445a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    445c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    445e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4460:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4462:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4464:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4466:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4468:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    446a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    446c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    446e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4470:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4472:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4474:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4476:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4478:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    447a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    447c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    447e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4480:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4482:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4484:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4486:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4488:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    448a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    448c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    448e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4490:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4492:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4494:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4496:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4498:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    449a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    449c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    449e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44a0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44a2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44a4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44a6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44a8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44aa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44ac:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44ae:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44b0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44b2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44b4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44b6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44b8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44ba:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44bc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44be:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44c0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44c2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44c4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44c6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44c8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44ca:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44cc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44ce:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44d0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44d2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44d4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44d6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44d8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44da:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44dc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44de:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44e0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44e2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44e4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44e6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44e8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44ea:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44ec:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44ee:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44f0:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44f2:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44f4:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44f6:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    44f8:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    44fa:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    44fc:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    44fe:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4500:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4502:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4504:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4506:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4508:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    450a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    450c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    450e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4510:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4512:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4514:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4516:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4518:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    451a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    451c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    451e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4520:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4522:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4524:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4526:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4528:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    452a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    452c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    452e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4530:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4532:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4534:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4536:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4538:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    453a:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    453c:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    453e:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4540:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    4542:	82 18 78    	mov.w     w2, [w1++]
    __asm__("mov _ADRES0, W2");
    4544:	02 1a 80    	mov.w     0x340, w2
    __asm__("mov W2, [W0++]");
    4546:	02 18 78    	mov.w     w2, [w0++]
    __asm__("mov _ADRES1, W2");
    4548:	12 1a 80    	mov.w     0x342, w2
    __asm__("mov W2, [W1++]");
    454a:	82 18 78    	mov.w     w2, [w1++]
    ADL0CONLbits.SAMP = 1;
    454c:	1d c5 a8    	bset.b    0x51d, #0x6
    ADCON3bits.SLEN0 = 0;           // disable sample list 0 in ADCON3
    454e:	05 05 a9    	bclr.b    0x505, #0x0
    ADL0CONLbits.SLEN = 0;          // disable sample list 0
    4550:	1d e5 a9    	bclr.b    0x51d, #0x7
    enable_interrupts();
    4552:	52 20 ef    	clr.w     0x52
}
    4554:	00 80 fa    	ulnk      
    4556:	00 00 06    	return    

00004558 <_str2hex>:
                                  { "WRITE", flash_write_handler }};

#define FLASH_TABLE_ENTRIES     sizeof(flash_table) / sizeof(DISPATCH_ENTRY_T)

int16_t str2hex(char *str, uint16_t *num) {
    4558:	04 00 fa    	lnk       #0x4
    455a:	00 0f 78    	mov.w     w0, [w14]
    455c:	11 07 98    	mov.w     w1, [w14+2]
    if (!str)
    455e:	1e 00 78    	mov.w     [w14], w0
    4560:	00 00 e0    	cp0.w     w0
    4562:	04 00 3a    	bra       NZ, 0x456c <.L12>
        return -1;
    4564:	00 80 eb    	setm.w    w0
    4566:	5a 00 37    	bra       0x461c <.L3>

00004568 <.L5>:

    while ((*str == ' ') || (*str == '\t'))
        str++;
    4568:	1e 0f e8    	inc.w     [w14], [w14]
    456a:	01 00 37    	bra       0x456e <.L4>

0000456c <.L12>:
    456c:	00 00 00    	nop       

0000456e <.L4>:
    456e:	1e 00 78    	mov.w     [w14], w0
    4570:	90 40 78    	mov.b     [w0], w1
    4572:	00 c2 b3    	mov.b     #0x20, w0
    4574:	80 cf 50    	sub.b     w1, w0, [w15]
    4576:	f8 ff 32    	bra       Z, 0x4568 <.L5>
    4578:	1e 00 78    	mov.w     [w14], w0
    457a:	10 40 78    	mov.b     [w0], w0
    457c:	e9 4f 50    	sub.b     w0, #0x9, [w15]
    457e:	f4 ff 32    	bra       Z, 0x4568 <.L5>

    *num = 0;
    4580:	1e 00 90    	mov.w     [w14+2], w0
    4582:	80 00 eb    	clr.w     w1
    4584:	01 08 78    	mov.w     w1, [w0]
    while (*str) {
    4586:	45 00 37    	bra       0x4612 <.L6>

00004588 <.L11>:
        if ((*str >= '0') && (*str <= '9'))
    4588:	1e 00 78    	mov.w     [w14], w0
    458a:	90 40 78    	mov.b     [w0], w1
    458c:	f0 c2 b3    	mov.b     #0x2f, w0
    458e:	80 cf 50    	sub.b     w1, w0, [w15]
    4590:	11 00 34    	bra       LE, 0x45b4 <.L7>
    4592:	1e 00 78    	mov.w     [w14], w0
    4594:	90 40 78    	mov.b     [w0], w1
    4596:	90 c3 b3    	mov.b     #0x39, w0
    4598:	80 cf 50    	sub.b     w1, w0, [w15]
    459a:	0c 00 3c    	bra       GT, 0x45b4 <.L7>
            *num = (*num << 4) + (*str - '0');
    459c:	1e 00 90    	mov.w     [w14+2], w0
    459e:	10 00 78    	mov.w     [w0], w0
    45a0:	c4 00 dd    	sl.w      w0, #0x4, w1
    45a2:	1e 00 78    	mov.w     [w14], w0
    45a4:	10 40 78    	mov.b     [w0], w0
    45a6:	00 00 fb    	se        w0, w0
    45a8:	00 80 40    	add.w     w1, w0, w0
    45aa:	01 fd 2f    	mov.w     #0xffd0, w1
    45ac:	80 80 40    	add.w     w1, w0, w1
    45ae:	1e 00 90    	mov.w     [w14+2], w0
    45b0:	01 08 78    	mov.w     w1, [w0]
    45b2:	2e 00 37    	bra       0x4610 <.L8>

000045b4 <.L7>:
        else if ((*str >= 'a') && (*str <= 'f'))
    45b4:	1e 00 78    	mov.w     [w14], w0
    45b6:	90 40 78    	mov.b     [w0], w1
    45b8:	00 c6 b3    	mov.b     #0x60, w0
    45ba:	80 cf 50    	sub.b     w1, w0, [w15]
    45bc:	11 00 34    	bra       LE, 0x45e0 <.L9>
    45be:	1e 00 78    	mov.w     [w14], w0
    45c0:	90 40 78    	mov.b     [w0], w1
    45c2:	60 c6 b3    	mov.b     #0x66, w0
    45c4:	80 cf 50    	sub.b     w1, w0, [w15]
    45c6:	0c 00 3c    	bra       GT, 0x45e0 <.L9>
            *num = (*num << 4) + 10 + (*str - 'a');
    45c8:	1e 00 90    	mov.w     [w14+2], w0
    45ca:	10 00 78    	mov.w     [w0], w0
    45cc:	c4 00 dd    	sl.w      w0, #0x4, w1
    45ce:	1e 00 78    	mov.w     [w14], w0
    45d0:	10 40 78    	mov.b     [w0], w0
    45d2:	00 00 fb    	se        w0, w0
    45d4:	00 80 40    	add.w     w1, w0, w0
    45d6:	91 fa 2f    	mov.w     #0xffa9, w1
    45d8:	80 80 40    	add.w     w1, w0, w1
    45da:	1e 00 90    	mov.w     [w14+2], w0
    45dc:	01 08 78    	mov.w     w1, [w0]
    45de:	18 00 37    	bra       0x4610 <.L8>

000045e0 <.L9>:
        else if ((*str >= 'A') && (*str <= 'F'))
    45e0:	1e 00 78    	mov.w     [w14], w0
    45e2:	90 40 78    	mov.b     [w0], w1
    45e4:	00 c4 b3    	mov.b     #0x40, w0
    45e6:	80 cf 50    	sub.b     w1, w0, [w15]
    45e8:	11 00 34    	bra       LE, 0x460c <.L10>
    45ea:	1e 00 78    	mov.w     [w14], w0
    45ec:	90 40 78    	mov.b     [w0], w1
    45ee:	60 c4 b3    	mov.b     #0x46, w0
    45f0:	80 cf 50    	sub.b     w1, w0, [w15]
    45f2:	0c 00 3c    	bra       GT, 0x460c <.L10>
            *num = (*num << 4) + 10 + (*str - 'A');
    45f4:	1e 00 90    	mov.w     [w14+2], w0
    45f6:	10 00 78    	mov.w     [w0], w0
    45f8:	c4 00 dd    	sl.w      w0, #0x4, w1
    45fa:	1e 00 78    	mov.w     [w14], w0
    45fc:	10 40 78    	mov.b     [w0], w0
    45fe:	00 00 fb    	se        w0, w0
    4600:	00 80 40    	add.w     w1, w0, w0
    4602:	91 fc 2f    	mov.w     #0xffc9, w1
    4604:	80 80 40    	add.w     w1, w0, w1
    4606:	1e 00 90    	mov.w     [w14+2], w0
    4608:	01 08 78    	mov.w     w1, [w0]
    460a:	02 00 37    	bra       0x4610 <.L8>

0000460c <.L10>:
        else
            return -1;
    460c:	00 80 eb    	setm.w    w0
    460e:	06 00 37    	bra       0x461c <.L3>

00004610 <.L8>:
        str++;
    4610:	1e 0f e8    	inc.w     [w14], [w14]

00004612 <.L6>:
    4612:	1e 00 78    	mov.w     [w14], w0
    4614:	10 40 78    	mov.b     [w0], w0
    4616:	00 04 e0    	cp0.b     w0
    4618:	b7 ff 3a    	bra       NZ, 0x4588 <.L11>
    }
    return 0;
    461a:	00 00 eb    	clr.w     w0

0000461c <.L3>:
}
    461c:	00 80 fa    	ulnk      
    461e:	00 00 06    	return    

00004620 <_str2num>:

int16_t str2num(char *str, uint16_t *num) {
    4620:	04 00 fa    	lnk       #0x4
    4622:	00 0f 78    	mov.w     w0, [w14]
    4624:	11 07 98    	mov.w     w1, [w14+2]
    if (!str)
    4626:	1e 00 78    	mov.w     [w14], w0
    4628:	00 00 e0    	cp0.w     w0
    462a:	04 00 3a    	bra       NZ, 0x4634 <.L21>
        return -1;
    462c:	00 80 eb    	setm.w    w0
    462e:	2f 00 37    	bra       0x468e <.L15>

00004630 <.L17>:

    while ((*str == ' ') || (*str == '\t'))
        str++;
    4630:	1e 0f e8    	inc.w     [w14], [w14]
    4632:	01 00 37    	bra       0x4636 <.L16>

00004634 <.L21>:
    4634:	00 00 00    	nop       

00004636 <.L16>:
    4636:	1e 00 78    	mov.w     [w14], w0
    4638:	90 40 78    	mov.b     [w0], w1
    463a:	00 c2 b3    	mov.b     #0x20, w0
    463c:	80 cf 50    	sub.b     w1, w0, [w15]
    463e:	f8 ff 32    	bra       Z, 0x4630 <.L17>
    4640:	1e 00 78    	mov.w     [w14], w0
    4642:	10 40 78    	mov.b     [w0], w0
    4644:	e9 4f 50    	sub.b     w0, #0x9, [w15]
    4646:	f4 ff 32    	bra       Z, 0x4630 <.L17>

    *num = 0;
    4648:	1e 00 90    	mov.w     [w14+2], w0
    464a:	80 00 eb    	clr.w     w1
    464c:	01 08 78    	mov.w     w1, [w0]
    while (*str) {
    464e:	1a 00 37    	bra       0x4684 <.L18>

00004650 <.L20>:
        if ((*str >= '0') && (*str <= '9'))
    4650:	1e 00 78    	mov.w     [w14], w0
    4652:	90 40 78    	mov.b     [w0], w1
    4654:	f0 c2 b3    	mov.b     #0x2f, w0
    4656:	80 cf 50    	sub.b     w1, w0, [w15]
    4658:	13 00 34    	bra       LE, 0x4680 <.L19>
    465a:	1e 00 78    	mov.w     [w14], w0
    465c:	90 40 78    	mov.b     [w0], w1
    465e:	90 c3 b3    	mov.b     #0x39, w0
    4660:	80 cf 50    	sub.b     w1, w0, [w15]
    4662:	0e 00 3c    	bra       GT, 0x4680 <.L19>
            *num = *num * 10 + (*str - '0');
    4664:	1e 00 90    	mov.w     [w14+2], w0
    4666:	10 00 78    	mov.w     [w0], w0
    4668:	6a 00 b9    	mul.su    w0, #0xa, w0
    466a:	80 00 78    	mov.w     w0, w1
    466c:	1e 00 78    	mov.w     [w14], w0
    466e:	10 40 78    	mov.b     [w0], w0
    4670:	00 00 fb    	se        w0, w0
    4672:	00 80 40    	add.w     w1, w0, w0
    4674:	01 fd 2f    	mov.w     #0xffd0, w1
    4676:	80 80 40    	add.w     w1, w0, w1
    4678:	1e 00 90    	mov.w     [w14+2], w0
    467a:	01 08 78    	mov.w     w1, [w0]
        else
            return -1;
        str++;
    467c:	1e 0f e8    	inc.w     [w14], [w14]
    467e:	02 00 37    	bra       0x4684 <.L18>

00004680 <.L19>:
    4680:	00 80 eb    	setm.w    w0
    4682:	05 00 37    	bra       0x468e <.L15>

00004684 <.L18>:
    4684:	1e 00 78    	mov.w     [w14], w0
    4686:	10 40 78    	mov.b     [w0], w0
    4688:	00 04 e0    	cp0.b     w0
    468a:	e2 ff 3a    	bra       NZ, 0x4650 <.L20>
    }
    return 0;
    468c:	00 00 eb    	clr.w     w0

0000468e <.L15>:
}
    468e:	00 80 fa    	ulnk      
    4690:	00 00 06    	return    

00004692 <_hex2str>:

void hex2str(uint16_t num, char *str) {
    4692:	08 00 fa    	lnk       #0x8
    4694:	20 07 98    	mov.w     w0, [w14+4]
    4696:	31 07 98    	mov.w     w1, [w14+6]
    uint16_t digit, i;

    for (i = 0; i < 4; i++) {
    4698:	00 00 eb    	clr.w     w0
    469a:	00 0f 78    	mov.w     w0, [w14]
    469c:	1a 00 37    	bra       0x46d2 <.L23>

0000469e <.L26>:
        digit = num >> 12;
    469e:	2e 00 90    	mov.w     [w14+4], w0
    46a0:	4c 00 de    	lsr.w     w0, #0xc, w0
    46a2:	10 07 98    	mov.w     w0, [w14+2]
        if (digit < 10)
    46a4:	1e 00 90    	mov.w     [w14+2], w0
    46a6:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    46a8:	07 00 3e    	bra       GTU, 0x46b8 <.L24>
            *str = '0' + (uint8_t)digit;
    46aa:	1e 00 90    	mov.w     [w14+2], w0
    46ac:	00 40 78    	mov.b     w0, w0
    46ae:	00 43 b0    	add.b     #0x30, w0
    46b0:	80 40 78    	mov.b     w0, w1
    46b2:	3e 00 90    	mov.w     [w14+6], w0
    46b4:	01 48 78    	mov.b     w1, [w0]
    46b6:	06 00 37    	bra       0x46c4 <.L25>

000046b8 <.L24>:
        else
            *str = 'A' + (uint8_t)digit - 10;
    46b8:	1e 00 90    	mov.w     [w14+2], w0
    46ba:	00 40 78    	mov.b     w0, w0
    46bc:	70 43 b0    	add.b     #0x37, w0
    46be:	80 40 78    	mov.b     w0, w1
    46c0:	3e 00 90    	mov.w     [w14+6], w0
    46c2:	01 48 78    	mov.b     w1, [w0]

000046c4 <.L25>:
        str++;
    46c4:	3e 00 90    	mov.w     [w14+6], w0
    46c6:	00 00 e8    	inc.w     w0, w0
    46c8:	30 07 98    	mov.w     w0, [w14+6]
        num = (num & 0x0FFF) << 4;
    46ca:	2e 00 90    	mov.w     [w14+4], w0
    46cc:	44 00 dd    	sl.w      w0, #0x4, w0
    46ce:	20 07 98    	mov.w     w0, [w14+4]
    46d0:	1e 0f e8    	inc.w     [w14], [w14]

000046d2 <.L23>:
    46d2:	1e 00 78    	mov.w     [w14], w0
    46d4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    46d6:	e3 ff 36    	bra       LEU, 0x469e <.L26>
    }
    *str = '\0';
    46d8:	3e 00 90    	mov.w     [w14+6], w0
    46da:	80 40 eb    	clr.b     w1
    46dc:	01 48 78    	mov.b     w1, [w0]
}
    46de:	00 80 fa    	ulnk      
    46e0:	00 00 06    	return    

000046e2 <_hex2str_alt>:

void hex2str_alt(uint16_t num, char *str) {
    46e2:	0a 00 fa    	lnk       #0xa
    46e4:	30 07 98    	mov.w     w0, [w14+6]
    46e6:	41 07 98    	mov.w     w1, [w14+8]
    uint16_t digit, i, hit_nonzero_digit = FALSE;
    46e8:	00 00 eb    	clr.w     w0
    46ea:	10 07 98    	mov.w     w0, [w14+2]

    for (i = 0; i < 4; i++) {
    46ec:	00 00 eb    	clr.w     w0
    46ee:	00 0f 78    	mov.w     w0, [w14]
    46f0:	25 00 37    	bra       0x473c <.L28>

000046f2 <.L34>:
        digit = num >> 12;
    46f2:	3e 00 90    	mov.w     [w14+6], w0
    46f4:	4c 00 de    	lsr.w     w0, #0xc, w0
    46f6:	20 07 98    	mov.w     w0, [w14+4]
        if (digit)
    46f8:	2e 00 90    	mov.w     [w14+4], w0
    46fa:	00 00 e0    	cp0.w     w0
    46fc:	02 00 32    	bra       Z, 0x4702 <.L29>
            hit_nonzero_digit = TRUE;
    46fe:	10 00 20    	mov.w     #0x1, w0
    4700:	10 07 98    	mov.w     w0, [w14+2]

00004702 <.L29>:
        if ((hit_nonzero_digit) || (i == 3)) {
    4702:	1e 00 90    	mov.w     [w14+2], w0
    4704:	00 00 e0    	cp0.w     w0
    4706:	03 00 3a    	bra       NZ, 0x470e <.L30>
    4708:	1e 00 78    	mov.w     [w14], w0
    470a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    470c:	13 00 3a    	bra       NZ, 0x4734 <.L31>

0000470e <.L30>:
            if (digit < 10)
    470e:	2e 00 90    	mov.w     [w14+4], w0
    4710:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    4712:	07 00 3e    	bra       GTU, 0x4722 <.L32>
                *str = '0' + (uint8_t)digit;
    4714:	2e 00 90    	mov.w     [w14+4], w0
    4716:	00 40 78    	mov.b     w0, w0
    4718:	00 43 b0    	add.b     #0x30, w0
    471a:	80 40 78    	mov.b     w0, w1
    471c:	4e 00 90    	mov.w     [w14+8], w0
    471e:	01 48 78    	mov.b     w1, [w0]
    4720:	06 00 37    	bra       0x472e <.L33>

00004722 <.L32>:
            else
                *str = 'A' + (uint8_t)digit - 10;
    4722:	2e 00 90    	mov.w     [w14+4], w0
    4724:	00 40 78    	mov.b     w0, w0
    4726:	70 43 b0    	add.b     #0x37, w0
    4728:	80 40 78    	mov.b     w0, w1
    472a:	4e 00 90    	mov.w     [w14+8], w0
    472c:	01 48 78    	mov.b     w1, [w0]

0000472e <.L33>:
            str++;
    472e:	4e 00 90    	mov.w     [w14+8], w0
    4730:	00 00 e8    	inc.w     w0, w0
    4732:	40 07 98    	mov.w     w0, [w14+8]

00004734 <.L31>:
        }
        num = (num & 0x0FFF) << 4;
    4734:	3e 00 90    	mov.w     [w14+6], w0
    4736:	44 00 dd    	sl.w      w0, #0x4, w0
    4738:	30 07 98    	mov.w     w0, [w14+6]
    473a:	1e 0f e8    	inc.w     [w14], [w14]

0000473c <.L28>:
    473c:	1e 00 78    	mov.w     [w14], w0
    473e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4740:	d8 ff 36    	bra       LEU, 0x46f2 <.L34>
    }
    *str = '\0';
    4742:	4e 00 90    	mov.w     [w14+8], w0
    4744:	80 40 eb    	clr.b     w1
    4746:	01 48 78    	mov.b     w1, [w0]
}
    4748:	00 80 fa    	ulnk      
    474a:	00 00 06    	return    

0000474c <_str_cmp>:

int16_t str_cmp(char *str1, char *str2) {
    474c:	04 00 fa    	lnk       #0x4
    474e:	00 0f 78    	mov.w     w0, [w14]
    4750:	11 07 98    	mov.w     w1, [w14+2]
    while ((*str1) && (*str1 == *str2)) {
    4752:	04 00 37    	bra       0x475c <.L36>

00004754 <.L38>:
        str1++;
    4754:	1e 0f e8    	inc.w     [w14], [w14]
        str2++;
    4756:	1e 00 90    	mov.w     [w14+2], w0
    4758:	00 00 e8    	inc.w     w0, w0
    475a:	10 07 98    	mov.w     w0, [w14+2]

0000475c <.L36>:
    475c:	1e 00 78    	mov.w     [w14], w0
    475e:	10 40 78    	mov.b     [w0], w0
    4760:	00 04 e0    	cp0.b     w0
    4762:	06 00 32    	bra       Z, 0x4770 <.L37>
    4764:	1e 00 78    	mov.w     [w14], w0
    4766:	90 40 78    	mov.b     [w0], w1
    4768:	1e 00 90    	mov.w     [w14+2], w0
    476a:	10 40 78    	mov.b     [w0], w0
    476c:	80 cf 50    	sub.b     w1, w0, [w15]
    476e:	f2 ff 32    	bra       Z, 0x4754 <.L38>

00004770 <.L37>:
    }

    if (*str1 == *str2)
    4770:	1e 00 78    	mov.w     [w14], w0
    4772:	90 40 78    	mov.b     [w0], w1
    4774:	1e 00 90    	mov.w     [w14+2], w0
    4776:	10 40 78    	mov.b     [w0], w0
    4778:	80 cf 50    	sub.b     w1, w0, [w15]
    477a:	02 00 3a    	bra       NZ, 0x4780 <.L39>
        return 0;
    477c:	00 00 eb    	clr.w     w0
    477e:	09 00 37    	bra       0x4792 <.L40>

00004780 <.L39>:
    else if (*str1 < *str2)
    4780:	1e 00 78    	mov.w     [w14], w0
    4782:	90 40 78    	mov.b     [w0], w1
    4784:	1e 00 90    	mov.w     [w14+2], w0
    4786:	10 40 78    	mov.b     [w0], w0
    4788:	80 cf 50    	sub.b     w1, w0, [w15]
    478a:	02 00 3d    	bra       GE, 0x4790 <.L41>
        return -1;
    478c:	00 80 eb    	setm.w    w0
    478e:	01 00 37    	bra       0x4792 <.L40>

00004790 <.L41>:
    else
        return 1;
    4790:	10 00 20    	mov.w     #0x1, w0

00004792 <.L40>:
}
    4792:	00 80 fa    	ulnk      
    4794:	00 00 06    	return    

00004796 <_str_ncmp>:

int16_t str_ncmp(char *str1, char *str2, uint16_t n) {
    4796:	06 00 fa    	lnk       #0x6
    4798:	00 0f 78    	mov.w     w0, [w14]
    479a:	11 07 98    	mov.w     w1, [w14+2]
    479c:	22 07 98    	mov.w     w2, [w14+4]
    if (n == 0)
    479e:	2e 00 90    	mov.w     [w14+4], w0
    47a0:	00 00 e0    	cp0.w     w0
    47a2:	07 00 3a    	bra       NZ, 0x47b2 <.L50>
        return 0;
    47a4:	00 00 eb    	clr.w     w0
    47a6:	2b 00 37    	bra       0x47fe <.L44>

000047a8 <.L47>:

    while ((*str1) && (*str2) && (*str1 == *str2) && (--n)) {
        str1++;
    47a8:	1e 0f e8    	inc.w     [w14], [w14]
        str2++;
    47aa:	1e 00 90    	mov.w     [w14+2], w0
    47ac:	00 00 e8    	inc.w     w0, w0
    47ae:	10 07 98    	mov.w     w0, [w14+2]
    47b0:	01 00 37    	bra       0x47b4 <.L45>

000047b2 <.L50>:
    47b2:	00 00 00    	nop       

000047b4 <.L45>:
    47b4:	1e 00 78    	mov.w     [w14], w0
    47b6:	10 40 78    	mov.b     [w0], w0
    47b8:	00 04 e0    	cp0.b     w0
    47ba:	10 00 32    	bra       Z, 0x47dc <.L46>
    47bc:	1e 00 90    	mov.w     [w14+2], w0
    47be:	10 40 78    	mov.b     [w0], w0
    47c0:	00 04 e0    	cp0.b     w0
    47c2:	0c 00 32    	bra       Z, 0x47dc <.L46>
    47c4:	1e 00 78    	mov.w     [w14], w0
    47c6:	90 40 78    	mov.b     [w0], w1
    47c8:	1e 00 90    	mov.w     [w14+2], w0
    47ca:	10 40 78    	mov.b     [w0], w0
    47cc:	80 cf 50    	sub.b     w1, w0, [w15]
    47ce:	06 00 3a    	bra       NZ, 0x47dc <.L46>
    47d0:	2e 00 90    	mov.w     [w14+4], w0
    47d2:	00 00 e9    	dec.w     w0, w0
    47d4:	20 07 98    	mov.w     w0, [w14+4]
    47d6:	2e 00 90    	mov.w     [w14+4], w0
    47d8:	00 00 e0    	cp0.w     w0
    47da:	e6 ff 3a    	bra       NZ, 0x47a8 <.L47>

000047dc <.L46>:
    }

    if (*str1 == *str2)
    47dc:	1e 00 78    	mov.w     [w14], w0
    47de:	90 40 78    	mov.b     [w0], w1
    47e0:	1e 00 90    	mov.w     [w14+2], w0
    47e2:	10 40 78    	mov.b     [w0], w0
    47e4:	80 cf 50    	sub.b     w1, w0, [w15]
    47e6:	02 00 3a    	bra       NZ, 0x47ec <.L48>
        return 0;
    47e8:	00 00 eb    	clr.w     w0
    47ea:	09 00 37    	bra       0x47fe <.L44>

000047ec <.L48>:
    else if (*str1 < *str2)
    47ec:	1e 00 78    	mov.w     [w14], w0
    47ee:	90 40 78    	mov.b     [w0], w1
    47f0:	1e 00 90    	mov.w     [w14+2], w0
    47f2:	10 40 78    	mov.b     [w0], w0
    47f4:	80 cf 50    	sub.b     w1, w0, [w15]
    47f6:	02 00 3d    	bra       GE, 0x47fc <.L49>
        return -1;
    47f8:	00 80 eb    	setm.w    w0
    47fa:	01 00 37    	bra       0x47fe <.L44>

000047fc <.L49>:
    else
        return 1;
    47fc:	10 00 20    	mov.w     #0x1, w0

000047fe <.L44>:
}
    47fe:	00 80 fa    	ulnk      
    4800:	00 00 06    	return    

00004802 <_str_tok_r>:

char *str_tok_r(char *str, char *delim, char **save_str) {
    4802:	0c 00 fa    	lnk       #0xc
    4804:	30 07 98    	mov.w     w0, [w14+6]
    4806:	41 07 98    	mov.w     w1, [w14+8]
    4808:	52 07 98    	mov.w     w2, [w14+10]
    char *spos, *dpos, *token_start;

    if (!(str) && !(*save_str)) 
    480a:	3e 00 90    	mov.w     [w14+6], w0
    480c:	00 00 e0    	cp0.w     w0
    480e:	06 00 3a    	bra       NZ, 0x481c <.L52>
    4810:	5e 00 90    	mov.w     [w14+10], w0
    4812:	10 00 78    	mov.w     [w0], w0
    4814:	00 00 e0    	cp0.w     w0
    4816:	02 00 3a    	bra       NZ, 0x481c <.L52>
        return (char *)NULL;
    4818:	00 00 eb    	clr.w     w0
    481a:	60 00 37    	bra       0x48dc <.L53>

0000481c <.L52>:

    // Find the first non-delimiter character in the string
    for (spos = (str) ? str : *save_str; *spos; spos++) {
    481c:	3e 00 90    	mov.w     [w14+6], w0
    481e:	00 00 e0    	cp0.w     w0
    4820:	03 00 3a    	bra       NZ, 0x4828 <.L54>
    4822:	5e 00 90    	mov.w     [w14+10], w0
    4824:	10 00 78    	mov.w     [w0], w0
    4826:	01 00 37    	bra       0x482a <.L55>

00004828 <.L54>:
    4828:	3e 00 90    	mov.w     [w14+6], w0

0000482a <.L55>:
    482a:	00 0f 78    	mov.w     w0, [w14]
    482c:	17 00 37    	bra       0x485c <.L56>

0000482e <.L63>:
        for (dpos = delim; *dpos; dpos++) {
    482e:	ce 00 90    	mov.w     [w14+8], w1
    4830:	11 07 98    	mov.w     w1, [w14+2]
    4832:	09 00 37    	bra       0x4846 <.L57>

00004834 <.L60>:
            if (*spos == *dpos)
    4834:	1e 00 78    	mov.w     [w14], w0
    4836:	90 40 78    	mov.b     [w0], w1
    4838:	1e 00 90    	mov.w     [w14+2], w0
    483a:	10 40 78    	mov.b     [w0], w0
    483c:	80 cf 50    	sub.b     w1, w0, [w15]
    483e:	08 00 32    	bra       Z, 0x4850 <.L75>
    4840:	1e 00 90    	mov.w     [w14+2], w0
    4842:	00 00 e8    	inc.w     w0, w0
    4844:	10 07 98    	mov.w     w0, [w14+2]

00004846 <.L57>:
    4846:	1e 00 90    	mov.w     [w14+2], w0
    4848:	10 40 78    	mov.b     [w0], w0
    484a:	00 04 e0    	cp0.b     w0
    484c:	f3 ff 3a    	bra       NZ, 0x4834 <.L60>
    484e:	01 00 37    	bra       0x4852 <.L59>

00004850 <.L75>:
                break;
    4850:	00 00 00    	nop       

00004852 <.L59>:
        }
        if (*dpos == '\0')
    4852:	1e 00 90    	mov.w     [w14+2], w0
    4854:	10 40 78    	mov.b     [w0], w0
    4856:	00 04 e0    	cp0.b     w0
    4858:	06 00 32    	bra       Z, 0x4866 <.L76>
    485a:	1e 0f e8    	inc.w     [w14], [w14]

0000485c <.L56>:
    485c:	1e 00 78    	mov.w     [w14], w0
    485e:	10 40 78    	mov.b     [w0], w0
    4860:	00 04 e0    	cp0.b     w0
    4862:	e5 ff 3a    	bra       NZ, 0x482e <.L63>
    4864:	01 00 37    	bra       0x4868 <.L62>

00004866 <.L76>:
            break;
    4866:	00 00 00    	nop       

00004868 <.L62>:
    }
    if (*spos)
    4868:	1e 00 78    	mov.w     [w14], w0
    486a:	10 40 78    	mov.b     [w0], w0
    486c:	00 04 e0    	cp0.b     w0
    486e:	03 00 32    	bra       Z, 0x4876 <.L64>
        token_start = spos;
    4870:	9e 00 78    	mov.w     [w14], w1
    4872:	21 07 98    	mov.w     w1, [w14+4]
    else {
        *save_str = (char *)NULL;
        return (char *)NULL;
    }

    // Find the first delimiter character in the string
    for (; *spos; spos++) {
    4874:	1e 00 37    	bra       0x48b2 <.L65>

00004876 <.L64>:
    4876:	5e 00 90    	mov.w     [w14+10], w0
    4878:	80 00 eb    	clr.w     w1
    487a:	01 08 78    	mov.w     w1, [w0]
    487c:	00 00 eb    	clr.w     w0
    487e:	2e 00 37    	bra       0x48dc <.L53>

00004880 <.L72>:
        for (dpos = delim; *dpos; dpos++) {
    4880:	ce 00 90    	mov.w     [w14+8], w1
    4882:	11 07 98    	mov.w     w1, [w14+2]
    4884:	09 00 37    	bra       0x4898 <.L66>

00004886 <.L69>:
            if (*spos == *dpos)
    4886:	1e 00 78    	mov.w     [w14], w0
    4888:	90 40 78    	mov.b     [w0], w1
    488a:	1e 00 90    	mov.w     [w14+2], w0
    488c:	10 40 78    	mov.b     [w0], w0
    488e:	80 cf 50    	sub.b     w1, w0, [w15]
    4890:	08 00 32    	bra       Z, 0x48a2 <.L77>
    4892:	1e 00 90    	mov.w     [w14+2], w0
    4894:	00 00 e8    	inc.w     w0, w0
    4896:	10 07 98    	mov.w     w0, [w14+2]

00004898 <.L66>:
    4898:	1e 00 90    	mov.w     [w14+2], w0
    489a:	10 40 78    	mov.b     [w0], w0
    489c:	00 04 e0    	cp0.b     w0
    489e:	f3 ff 3a    	bra       NZ, 0x4886 <.L69>
    48a0:	01 00 37    	bra       0x48a4 <.L68>

000048a2 <.L77>:
                break;
    48a2:	00 00 00    	nop       

000048a4 <.L68>:
        }
        if (*spos == *dpos)
    48a4:	1e 00 78    	mov.w     [w14], w0
    48a6:	90 40 78    	mov.b     [w0], w1
    48a8:	1e 00 90    	mov.w     [w14+2], w0
    48aa:	10 40 78    	mov.b     [w0], w0
    48ac:	80 cf 50    	sub.b     w1, w0, [w15]
    48ae:	06 00 32    	bra       Z, 0x48bc <.L78>
    48b0:	1e 0f e8    	inc.w     [w14], [w14]

000048b2 <.L65>:
    48b2:	1e 00 78    	mov.w     [w14], w0
    48b4:	10 40 78    	mov.b     [w0], w0
    48b6:	00 04 e0    	cp0.b     w0
    48b8:	e3 ff 3a    	bra       NZ, 0x4880 <.L72>
    48ba:	01 00 37    	bra       0x48be <.L71>

000048bc <.L78>:
            break;
    48bc:	00 00 00    	nop       

000048be <.L71>:
    }
    if (*spos) {
    48be:	1e 00 78    	mov.w     [w14], w0
    48c0:	10 40 78    	mov.b     [w0], w0
    48c2:	00 04 e0    	cp0.b     w0
    48c4:	07 00 32    	bra       Z, 0x48d4 <.L73>
        *spos = '\0';
    48c6:	1e 00 78    	mov.w     [w14], w0
    48c8:	80 40 eb    	clr.b     w1
    48ca:	01 48 78    	mov.b     w1, [w0]
        *save_str = spos + 1;
    48cc:	9e 00 e8    	inc.w     [w14], w1
    48ce:	5e 00 90    	mov.w     [w14+10], w0
    48d0:	01 08 78    	mov.w     w1, [w0]
    48d2:	03 00 37    	bra       0x48da <.L74>

000048d4 <.L73>:
    } else {
        *save_str = (char *)NULL;
    48d4:	5e 00 90    	mov.w     [w14+10], w0
    48d6:	80 00 eb    	clr.w     w1
    48d8:	01 08 78    	mov.w     w1, [w0]

000048da <.L74>:
    }

    return token_start;
    48da:	2e 00 90    	mov.w     [w14+4], w0

000048dc <.L53>:
}
    48dc:	00 80 fa    	ulnk      
    48de:	00 00 06    	return    

000048e0 <_ui_handler>:

// UI commands
void ui_handler(char *args) {
    48e0:	08 00 fa    	lnk       #0x8
    48e2:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    48e4:	00 00 eb    	clr.w     w0
    48e6:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    48e8:	64 00 47    	add.w     w14, #0x4, w0
    48ea:	00 01 78    	mov.w     w0, w2
    48ec:	e1 53 29    	mov.w     #0x953e, w1
    48ee:	3e 00 90    	mov.w     [w14+6], w0
    48f0:	88 ff 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    48f2:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    48f4:	1e 00 90    	mov.w     [w14+2], w0
    48f6:	00 00 e0    	cp0.w     w0
    48f8:	1a 00 32    	bra       Z, 0x492e <.L79>
        for (i = 0; i < UI_TABLE_ENTRIES; i++) {
    48fa:	00 00 eb    	clr.w     w0
    48fc:	00 0f 78    	mov.w     w0, [w14]
    48fe:	14 00 37    	bra       0x4928 <.L81>

00004900 <.L83>:
            if (str_cmp(command, ui_table[i].command) == 0) {
    4900:	1e 00 78    	mov.w     [w14], w0
    4902:	c2 00 dd    	sl.w      w0, #0x2, w1
    4904:	a0 2a 22    	mov.w     #0x22aa, w0
    4906:	00 80 40    	add.w     w1, w0, w0
    4908:	10 00 78    	mov.w     [w0], w0
    490a:	80 00 78    	mov.w     w0, w1
    490c:	1e 00 90    	mov.w     [w14+2], w0
    490e:	1e ff 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    4910:	00 00 e0    	cp0.w     w0
    4912:	09 00 3a    	bra       NZ, 0x4926 <.L82>
                ui_table[i].handler(remainder);
    4914:	1e 00 78    	mov.w     [w14], w0
    4916:	42 00 dd    	sl.w      w0, #0x2, w0
    4918:	80 80 e8    	inc2.w    w0, w1
    491a:	a0 2a 22    	mov.w     #0x22aa, w0
    491c:	00 80 40    	add.w     w1, w0, w0
    491e:	90 00 78    	mov.w     [w0], w1
    4920:	2e 00 90    	mov.w     [w14+4], w0
    4922:	01 00 01    	call      w1
                break;
    4924:	04 00 37    	bra       0x492e <.L79>

00004926 <.L82>:
    4926:	1e 0f e8    	inc.w     [w14], [w14]

00004928 <.L81>:
    4928:	1e 00 78    	mov.w     [w14], w0
    492a:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    492c:	e9 ff 36    	bra       LEU, 0x4900 <.L83>

0000492e <.L79>:
            }
        }
    }
}
    492e:	00 80 fa    	ulnk      
    4930:	00 00 06    	return    

00004932 <_led1_handler>:

void led1_handler(char *args) {
    4932:	08 00 fa    	lnk       #0x8
    4934:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    4936:	00 00 eb    	clr.w     w0
    4938:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    493a:	0e 80 e8    	inc2.w    w14, w0
    493c:	00 01 78    	mov.w     w0, w2
    493e:	e1 53 29    	mov.w     #0x953e, w1
    4940:	3e 00 90    	mov.w     [w14+6], w0
    4942:	5f ff 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4944:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    4946:	1e 00 78    	mov.w     [w14], w0
    4948:	00 00 e0    	cp0.w     w0
    494a:	35 00 32    	bra       Z, 0x49b6 <.L84>
        if (str_cmp(token, "ON") == 0) {
    494c:	21 54 29    	mov.w     #0x9542, w1
    494e:	1e 00 78    	mov.w     [w14], w0
    4950:	fd fe 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    4952:	00 00 e0    	cp0.w     w0
    4954:	02 00 3a    	bra       NZ, 0x495a <.L86>
            LED1 = ON;
    4956:	e4 62 a8    	bset.b    0x2e4, #0x3
    4958:	2e 00 37    	bra       0x49b6 <.L84>

0000495a <.L86>:
        } else if (str_cmp(token, "OFF") == 0) {
    495a:	51 54 29    	mov.w     #0x9545, w1
    495c:	1e 00 78    	mov.w     [w14], w0
    495e:	f6 fe 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    4960:	00 00 e0    	cp0.w     w0
    4962:	02 00 3a    	bra       NZ, 0x4968 <.L87>
            LED1 = OFF;
    4964:	e4 62 a9    	bclr.b    0x2e4, #0x3
    4966:	27 00 37    	bra       0x49b6 <.L84>

00004968 <.L87>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    4968:	91 54 29    	mov.w     #0x9549, w1
    496a:	1e 00 78    	mov.w     [w14], w0
    496c:	ef fe 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    496e:	00 00 e0    	cp0.w     w0
    4970:	0f 00 3a    	bra       NZ, 0x4990 <.L88>
            LED1 = !LED1;
    4972:	20 17 80    	mov.w     0x2e4, w0
    4974:	68 00 60    	and.w     w0, #0x8, w0
    4976:	00 f0 a7    	btsc.w    w0, #0xf
    4978:	00 00 ea    	neg.w     w0, w0
    497a:	00 00 e9    	dec.w     w0, w0
    497c:	4f 00 de    	lsr.w     w0, #0xf, w0
    497e:	00 40 78    	mov.b     w0, w0
    4980:	00 80 fb    	ze        w0, w0
    4982:	61 00 60    	and.w     w0, #0x1, w0
    4984:	43 00 dd    	sl.w      w0, #0x3, w0
    4986:	21 17 80    	mov.w     0x2e4, w1
    4988:	01 30 a1    	bclr.w    w1, #0x3
    498a:	01 00 70    	ior.w     w0, w1, w0
    498c:	20 17 88    	mov.w     w0, 0x2e4
    498e:	13 00 37    	bra       0x49b6 <.L84>

00004990 <.L88>:
        } else if (str2hex(token, &val) == 0) {
    4990:	64 00 47    	add.w     w14, #0x4, w0
    4992:	80 00 78    	mov.w     w0, w1
    4994:	1e 00 78    	mov.w     [w14], w0
    4996:	e0 fd 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4998:	00 00 e0    	cp0.w     w0
    499a:	0d 00 3a    	bra       NZ, 0x49b6 <.L84>
            LED1 = (val) ? 1 : 0;
    499c:	2e 00 90    	mov.w     [w14+4], w0
    499e:	00 f0 a7    	btsc.w    w0, #0xf
    49a0:	00 00 ea    	neg.w     w0, w0
    49a2:	00 00 ea    	neg.w     w0, w0
    49a4:	4f 00 de    	lsr.w     w0, #0xf, w0
    49a6:	00 40 78    	mov.b     w0, w0
    49a8:	00 80 fb    	ze        w0, w0
    49aa:	61 00 60    	and.w     w0, #0x1, w0
    49ac:	43 00 dd    	sl.w      w0, #0x3, w0
    49ae:	21 17 80    	mov.w     0x2e4, w1
    49b0:	01 30 a1    	bclr.w    w1, #0x3
    49b2:	01 00 70    	ior.w     w0, w1, w0
    49b4:	20 17 88    	mov.w     w0, 0x2e4

000049b6 <.L84>:
        }
    }
}
    49b6:	00 80 fa    	ulnk      
    49b8:	00 00 06    	return    

000049ba <_led1Q_handler>:

void led1Q_handler(char *args) {
    49ba:	02 00 fa    	lnk       #0x2
    49bc:	00 0f 78    	mov.w     w0, [w14]
    if (LED1 == ON)
    49be:	20 17 80    	mov.w     0x2e4, w0
    49c0:	68 00 60    	and.w     w0, #0x8, w0
    49c2:	00 00 e0    	cp0.w     w0
    49c4:	03 00 32    	bra       Z, 0x49cc <.L90>
        cdc_puts("1\r\n");
    49c6:	00 55 29    	mov.w     #0x9550, w0
    49c8:	09 12 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    49ca:	02 00 37    	bra       0x49d0 <.L89>

000049cc <.L90>:
    else
        cdc_puts("0\r\n");
    49cc:	40 55 29    	mov.w     #0x9554, w0
    49ce:	06 12 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

000049d0 <.L89>:
}
    49d0:	00 80 fa    	ulnk      
    49d2:	00 00 06    	return    

000049d4 <_led2_handler>:

void led2_handler(char *args) {
    49d4:	08 00 fa    	lnk       #0x8
    49d6:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    49d8:	00 00 eb    	clr.w     w0
    49da:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    49dc:	0e 80 e8    	inc2.w    w14, w0
    49de:	00 01 78    	mov.w     w0, w2
    49e0:	e1 53 29    	mov.w     #0x953e, w1
    49e2:	3e 00 90    	mov.w     [w14+6], w0
    49e4:	0e ff 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    49e6:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    49e8:	1e 00 78    	mov.w     [w14], w0
    49ea:	00 00 e0    	cp0.w     w0
    49ec:	35 00 32    	bra       Z, 0x4a58 <.L92>
        if (str_cmp(token, "ON") == 0) {
    49ee:	21 54 29    	mov.w     #0x9542, w1
    49f0:	1e 00 78    	mov.w     [w14], w0
    49f2:	ac fe 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    49f4:	00 00 e0    	cp0.w     w0
    49f6:	02 00 3a    	bra       NZ, 0x49fc <.L94>
            LED2 = ON;
    49f8:	e4 82 a8    	bset.b    0x2e4, #0x4
    49fa:	2e 00 37    	bra       0x4a58 <.L92>

000049fc <.L94>:
        } else if (str_cmp(token, "OFF") == 0) {
    49fc:	51 54 29    	mov.w     #0x9545, w1
    49fe:	1e 00 78    	mov.w     [w14], w0
    4a00:	a5 fe 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    4a02:	00 00 e0    	cp0.w     w0
    4a04:	02 00 3a    	bra       NZ, 0x4a0a <.L95>
            LED2 = OFF;
    4a06:	e4 82 a9    	bclr.b    0x2e4, #0x4
    4a08:	27 00 37    	bra       0x4a58 <.L92>

00004a0a <.L95>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    4a0a:	91 54 29    	mov.w     #0x9549, w1
    4a0c:	1e 00 78    	mov.w     [w14], w0
    4a0e:	9e fe 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    4a10:	00 00 e0    	cp0.w     w0
    4a12:	0f 00 3a    	bra       NZ, 0x4a32 <.L96>
            LED2 = !LED2;
    4a14:	20 17 80    	mov.w     0x2e4, w0
    4a16:	70 00 60    	and.w     w0, #0x10, w0
    4a18:	00 f0 a7    	btsc.w    w0, #0xf
    4a1a:	00 00 ea    	neg.w     w0, w0
    4a1c:	00 00 e9    	dec.w     w0, w0
    4a1e:	4f 00 de    	lsr.w     w0, #0xf, w0
    4a20:	00 40 78    	mov.b     w0, w0
    4a22:	00 80 fb    	ze        w0, w0
    4a24:	61 00 60    	and.w     w0, #0x1, w0
    4a26:	44 00 dd    	sl.w      w0, #0x4, w0
    4a28:	21 17 80    	mov.w     0x2e4, w1
    4a2a:	01 40 a1    	bclr.w    w1, #0x4
    4a2c:	01 00 70    	ior.w     w0, w1, w0
    4a2e:	20 17 88    	mov.w     w0, 0x2e4
    4a30:	13 00 37    	bra       0x4a58 <.L92>

00004a32 <.L96>:
        } else if (str2hex(token, &val) == 0) {
    4a32:	64 00 47    	add.w     w14, #0x4, w0
    4a34:	80 00 78    	mov.w     w0, w1
    4a36:	1e 00 78    	mov.w     [w14], w0
    4a38:	8f fd 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4a3a:	00 00 e0    	cp0.w     w0
    4a3c:	0d 00 3a    	bra       NZ, 0x4a58 <.L92>
            LED2 = (val) ? 1 : 0;
    4a3e:	2e 00 90    	mov.w     [w14+4], w0
    4a40:	00 f0 a7    	btsc.w    w0, #0xf
    4a42:	00 00 ea    	neg.w     w0, w0
    4a44:	00 00 ea    	neg.w     w0, w0
    4a46:	4f 00 de    	lsr.w     w0, #0xf, w0
    4a48:	00 40 78    	mov.b     w0, w0
    4a4a:	00 80 fb    	ze        w0, w0
    4a4c:	61 00 60    	and.w     w0, #0x1, w0
    4a4e:	44 00 dd    	sl.w      w0, #0x4, w0
    4a50:	21 17 80    	mov.w     0x2e4, w1
    4a52:	01 40 a1    	bclr.w    w1, #0x4
    4a54:	01 00 70    	ior.w     w0, w1, w0
    4a56:	20 17 88    	mov.w     w0, 0x2e4

00004a58 <.L92>:
        }
    }
}
    4a58:	00 80 fa    	ulnk      
    4a5a:	00 00 06    	return    

00004a5c <_led2Q_handler>:

void led2Q_handler(char *args) {
    4a5c:	02 00 fa    	lnk       #0x2
    4a5e:	00 0f 78    	mov.w     w0, [w14]
    if (LED2 == ON)
    4a60:	20 17 80    	mov.w     0x2e4, w0
    4a62:	70 00 60    	and.w     w0, #0x10, w0
    4a64:	00 00 e0    	cp0.w     w0
    4a66:	03 00 32    	bra       Z, 0x4a6e <.L98>
        cdc_puts("1\r\n");
    4a68:	00 55 29    	mov.w     #0x9550, w0
    4a6a:	b8 11 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    4a6c:	02 00 37    	bra       0x4a72 <.L97>

00004a6e <.L98>:
    else
        cdc_puts("0\r\n");
    4a6e:	40 55 29    	mov.w     #0x9554, w0
    4a70:	b5 11 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004a72 <.L97>:
}
    4a72:	00 80 fa    	ulnk      
    4a74:	00 00 06    	return    

00004a76 <_led3_handler>:

void led3_handler(char *args) {
    4a76:	08 00 fa    	lnk       #0x8
    4a78:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    4a7a:	00 00 eb    	clr.w     w0
    4a7c:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    4a7e:	0e 80 e8    	inc2.w    w14, w0
    4a80:	00 01 78    	mov.w     w0, w2
    4a82:	e1 53 29    	mov.w     #0x953e, w1
    4a84:	3e 00 90    	mov.w     [w14+6], w0
    4a86:	bd fe 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4a88:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    4a8a:	1e 00 78    	mov.w     [w14], w0
    4a8c:	00 00 e0    	cp0.w     w0
    4a8e:	36 00 32    	bra       Z, 0x4afc <.L100>
        if (str_cmp(token, "ON") == 0) {
    4a90:	21 54 29    	mov.w     #0x9542, w1
    4a92:	1e 00 78    	mov.w     [w14], w0
    4a94:	5b fe 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    4a96:	00 00 e0    	cp0.w     w0
    4a98:	02 00 3a    	bra       NZ, 0x4a9e <.L102>
            LED3 = ON;
    4a9a:	e4 a2 a8    	bset.b    0x2e4, #0x5
    4a9c:	2f 00 37    	bra       0x4afc <.L100>

00004a9e <.L102>:
        } else if (str_cmp(token, "OFF") == 0) {
    4a9e:	51 54 29    	mov.w     #0x9545, w1
    4aa0:	1e 00 78    	mov.w     [w14], w0
    4aa2:	54 fe 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    4aa4:	00 00 e0    	cp0.w     w0
    4aa6:	02 00 3a    	bra       NZ, 0x4aac <.L103>
            LED3 = OFF;
    4aa8:	e4 a2 a9    	bclr.b    0x2e4, #0x5
    4aaa:	28 00 37    	bra       0x4afc <.L100>

00004aac <.L103>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    4aac:	91 54 29    	mov.w     #0x9549, w1
    4aae:	1e 00 78    	mov.w     [w14], w0
    4ab0:	4d fe 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    4ab2:	00 00 e0    	cp0.w     w0
    4ab4:	10 00 3a    	bra       NZ, 0x4ad6 <.L104>
            LED3 = !LED3;
    4ab6:	21 17 80    	mov.w     0x2e4, w1
    4ab8:	00 02 20    	mov.w     #0x20, w0
    4aba:	00 80 60    	and.w     w1, w0, w0
    4abc:	00 f0 a7    	btsc.w    w0, #0xf
    4abe:	00 00 ea    	neg.w     w0, w0
    4ac0:	00 00 e9    	dec.w     w0, w0
    4ac2:	4f 00 de    	lsr.w     w0, #0xf, w0
    4ac4:	00 40 78    	mov.b     w0, w0
    4ac6:	00 80 fb    	ze        w0, w0
    4ac8:	61 00 60    	and.w     w0, #0x1, w0
    4aca:	45 00 dd    	sl.w      w0, #0x5, w0
    4acc:	21 17 80    	mov.w     0x2e4, w1
    4ace:	01 50 a1    	bclr.w    w1, #0x5
    4ad0:	01 00 70    	ior.w     w0, w1, w0
    4ad2:	20 17 88    	mov.w     w0, 0x2e4
    4ad4:	13 00 37    	bra       0x4afc <.L100>

00004ad6 <.L104>:
        } else if (str2hex(token, &val) == 0) {
    4ad6:	64 00 47    	add.w     w14, #0x4, w0
    4ad8:	80 00 78    	mov.w     w0, w1
    4ada:	1e 00 78    	mov.w     [w14], w0
    4adc:	3d fd 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4ade:	00 00 e0    	cp0.w     w0
    4ae0:	0d 00 3a    	bra       NZ, 0x4afc <.L100>
            LED3 = (val) ? 1 : 0;
    4ae2:	2e 00 90    	mov.w     [w14+4], w0
    4ae4:	00 f0 a7    	btsc.w    w0, #0xf
    4ae6:	00 00 ea    	neg.w     w0, w0
    4ae8:	00 00 ea    	neg.w     w0, w0
    4aea:	4f 00 de    	lsr.w     w0, #0xf, w0
    4aec:	00 40 78    	mov.b     w0, w0
    4aee:	00 80 fb    	ze        w0, w0
    4af0:	61 00 60    	and.w     w0, #0x1, w0
    4af2:	45 00 dd    	sl.w      w0, #0x5, w0
    4af4:	21 17 80    	mov.w     0x2e4, w1
    4af6:	01 50 a1    	bclr.w    w1, #0x5
    4af8:	01 00 70    	ior.w     w0, w1, w0
    4afa:	20 17 88    	mov.w     w0, 0x2e4

00004afc <.L100>:
        }
    }
}
    4afc:	00 80 fa    	ulnk      
    4afe:	00 00 06    	return    

00004b00 <_led3Q_handler>:

void led3Q_handler(char *args) {
    4b00:	02 00 fa    	lnk       #0x2
    4b02:	00 0f 78    	mov.w     w0, [w14]
    if (LED3 == ON)
    4b04:	21 17 80    	mov.w     0x2e4, w1
    4b06:	00 02 20    	mov.w     #0x20, w0
    4b08:	00 80 60    	and.w     w1, w0, w0
    4b0a:	00 00 e0    	cp0.w     w0
    4b0c:	03 00 32    	bra       Z, 0x4b14 <.L106>
        cdc_puts("1\r\n");
    4b0e:	00 55 29    	mov.w     #0x9550, w0
    4b10:	65 11 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    4b12:	02 00 37    	bra       0x4b18 <.L105>

00004b14 <.L106>:
    else
        cdc_puts("0\r\n");
    4b14:	40 55 29    	mov.w     #0x9554, w0
    4b16:	62 11 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004b18 <.L105>:
}
    4b18:	00 80 fa    	ulnk      
    4b1a:	00 00 06    	return    

00004b1c <_sw1Q_handler>:

void sw1Q_handler(char *args) {
    4b1c:	02 00 fa    	lnk       #0x2
    4b1e:	00 0f 78    	mov.w     w0, [w14]
    if (SW1 == 1)
    4b20:	91 16 80    	mov.w     0x2d2, w1
    4b22:	00 00 28    	mov.w     #0x8000, w0
    4b24:	00 80 60    	and.w     w1, w0, w0
    4b26:	00 00 e0    	cp0.w     w0
    4b28:	03 00 32    	bra       Z, 0x4b30 <.L109>
        cdc_puts("1\r\n");
    4b2a:	00 55 29    	mov.w     #0x9550, w0
    4b2c:	57 11 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    4b2e:	02 00 37    	bra       0x4b34 <.L108>

00004b30 <.L109>:
    else
        cdc_puts("0\r\n");
    4b30:	40 55 29    	mov.w     #0x9554, w0
    4b32:	54 11 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004b34 <.L108>:
}
    4b34:	00 80 fa    	ulnk      
    4b36:	00 00 06    	return    

00004b38 <_dig_handler>:

// DIG commands
void dig_handler(char *args) {
    4b38:	08 00 fa    	lnk       #0x8
    4b3a:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    4b3c:	00 00 eb    	clr.w     w0
    4b3e:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    4b40:	64 00 47    	add.w     w14, #0x4, w0
    4b42:	00 01 78    	mov.w     w0, w2
    4b44:	e1 53 29    	mov.w     #0x953e, w1
    4b46:	3e 00 90    	mov.w     [w14+6], w0
    4b48:	5c fe 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4b4a:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    4b4c:	1e 00 90    	mov.w     [w14+2], w0
    4b4e:	00 00 e0    	cp0.w     w0
    4b50:	1a 00 32    	bra       Z, 0x4b86 <.L111>
        for (i = 0; i < DIG_TABLE_ENTRIES; i++) {
    4b52:	00 00 eb    	clr.w     w0
    4b54:	00 0f 78    	mov.w     w0, [w14]
    4b56:	14 00 37    	bra       0x4b80 <.L113>

00004b58 <.L115>:
            if (str_cmp(command, dig_table[i].command) == 0) {
    4b58:	1e 00 78    	mov.w     [w14], w0
    4b5a:	c2 00 dd    	sl.w      w0, #0x2, w1
    4b5c:	60 2c 22    	mov.w     #0x22c6, w0
    4b5e:	00 80 40    	add.w     w1, w0, w0
    4b60:	10 00 78    	mov.w     [w0], w0
    4b62:	80 00 78    	mov.w     w0, w1
    4b64:	1e 00 90    	mov.w     [w14+2], w0
    4b66:	f2 fd 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    4b68:	00 00 e0    	cp0.w     w0
    4b6a:	09 00 3a    	bra       NZ, 0x4b7e <.L114>
                dig_table[i].handler(remainder);
    4b6c:	1e 00 78    	mov.w     [w14], w0
    4b6e:	42 00 dd    	sl.w      w0, #0x2, w0
    4b70:	80 80 e8    	inc2.w    w0, w1
    4b72:	60 2c 22    	mov.w     #0x22c6, w0
    4b74:	00 80 40    	add.w     w1, w0, w0
    4b76:	90 00 78    	mov.w     [w0], w1
    4b78:	2e 00 90    	mov.w     [w14+4], w0
    4b7a:	01 00 01    	call      w1
                break;
    4b7c:	04 00 37    	bra       0x4b86 <.L111>

00004b7e <.L114>:
    4b7e:	1e 0f e8    	inc.w     [w14], [w14]

00004b80 <.L113>:
    4b80:	1e 00 78    	mov.w     [w14], w0
    4b82:	f0 0f 50    	sub.w     w0, #0x10, [w15]
    4b84:	e9 ff 36    	bra       LEU, 0x4b58 <.L115>

00004b86 <.L111>:
            }
        }
    }
}
    4b86:	00 80 fa    	ulnk      
    4b88:	00 00 06    	return    

00004b8a <_set_handler>:

void set_handler(char *args) {
    4b8a:	04 00 fa    	lnk       #0x4
    4b8c:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t ch;

    if (args && (str2hex(args, &ch) == 0))
    4b8e:	1e 00 90    	mov.w     [w14+2], w0
    4b90:	00 00 e0    	cp0.w     w0
    4b92:	07 00 32    	bra       Z, 0x4ba2 <.L116>
    4b94:	8e 00 78    	mov.w     w14, w1
    4b96:	1e 00 90    	mov.w     [w14+2], w0
    4b98:	df fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4b9a:	00 00 e0    	cp0.w     w0
    4b9c:	02 00 3a    	bra       NZ, 0x4ba2 <.L116>
        digout_set(ch);
    4b9e:	1e 00 78    	mov.w     [w14], w0
    4ba0:	dc 0b 07    	rcall     0x635a <_digout_set> <.L0> <.LFB0> <.LFE7> <.Letext0> <.Ltext0>

00004ba2 <.L116>:
}
    4ba2:	00 80 fa    	ulnk      
    4ba4:	00 00 06    	return    

00004ba6 <_clear_handler>:

void clear_handler(char *args) {
    4ba6:	04 00 fa    	lnk       #0x4
    4ba8:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t ch;

    if (args && (str2hex(args, &ch) == 0))
    4baa:	1e 00 90    	mov.w     [w14+2], w0
    4bac:	00 00 e0    	cp0.w     w0
    4bae:	07 00 32    	bra       Z, 0x4bbe <.L118>
    4bb0:	8e 00 78    	mov.w     w14, w1
    4bb2:	1e 00 90    	mov.w     [w14+2], w0
    4bb4:	d1 fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4bb6:	00 00 e0    	cp0.w     w0
    4bb8:	02 00 3a    	bra       NZ, 0x4bbe <.L118>
        digout_clear(ch);
    4bba:	1e 00 78    	mov.w     [w14], w0
    4bbc:	e5 0b 07    	rcall     0x6388 <_digout_clear> <.LFB1> <.LFE0>

00004bbe <.L118>:
}
    4bbe:	00 80 fa    	ulnk      
    4bc0:	00 00 06    	return    

00004bc2 <_toggle_handler>:

void toggle_handler(char *args) {
    4bc2:	04 00 fa    	lnk       #0x4
    4bc4:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t ch;

    if (args && (str2hex(args, &ch) == 0))
    4bc6:	1e 00 90    	mov.w     [w14+2], w0
    4bc8:	00 00 e0    	cp0.w     w0
    4bca:	07 00 32    	bra       Z, 0x4bda <.L120>
    4bcc:	8e 00 78    	mov.w     w14, w1
    4bce:	1e 00 90    	mov.w     [w14+2], w0
    4bd0:	c3 fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4bd2:	00 00 e0    	cp0.w     w0
    4bd4:	02 00 3a    	bra       NZ, 0x4bda <.L120>
        digout_toggle(ch);
    4bd6:	1e 00 78    	mov.w     [w14], w0
    4bd8:	ee 0b 07    	rcall     0x63b6 <_digout_toggle> <.LFB2> <.LFE1>

00004bda <.L120>:
}
    4bda:	00 80 fa    	ulnk      
    4bdc:	00 00 06    	return    

00004bde <_write_handler>:

void write_handler(char *args) {
    4bde:	0a 00 fa    	lnk       #0xa
    4be0:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, val;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    4be2:	00 00 eb    	clr.w     w0
    4be4:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    4be6:	66 00 47    	add.w     w14, #0x6, w0
    4be8:	00 01 78    	mov.w     w0, w2
    4bea:	81 55 29    	mov.w     #0x9558, w1
    4bec:	4e 00 90    	mov.w     [w14+8], w0
    4bee:	09 fe 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4bf0:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    4bf2:	1e 00 78    	mov.w     [w14], w0
    4bf4:	00 00 e0    	cp0.w     w0
    4bf6:	11 00 32    	bra       Z, 0x4c1a <.L122>
    4bf8:	3e 00 90    	mov.w     [w14+6], w0
    4bfa:	00 00 e0    	cp0.w     w0
    4bfc:	0e 00 32    	bra       Z, 0x4c1a <.L122>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &val) == 0)) {
    4bfe:	0e 80 e8    	inc2.w    w14, w0
    4c00:	80 00 78    	mov.w     w0, w1
    4c02:	1e 00 78    	mov.w     [w14], w0
    4c04:	a9 fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4c06:	00 00 e0    	cp0.w     w0
    4c08:	08 00 3a    	bra       NZ, 0x4c1a <.L122>
    4c0a:	3e 00 90    	mov.w     [w14+6], w0
    4c0c:	e4 00 47    	add.w     w14, #0x4, w1
    4c0e:	a4 fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4c10:	00 00 e0    	cp0.w     w0
    4c12:	03 00 3a    	bra       NZ, 0x4c1a <.L122>
            digout_write(ch, val);
    4c14:	ae 00 90    	mov.w     [w14+4], w1
    4c16:	1e 00 90    	mov.w     [w14+2], w0
    4c18:	1c 0c 07    	rcall     0x6452 <_digout_write> <.LFB3> <.LFE2>

00004c1a <.L122>:
        }
    }
}
    4c1a:	00 80 fa    	ulnk      
    4c1c:	00 00 06    	return    

00004c1e <_read_handler>:

void read_handler(char *args) {
    4c1e:	0a 00 fa    	lnk       #0xa
    4c20:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    4c22:	4e 00 90    	mov.w     [w14+8], w0
    4c24:	00 00 e0    	cp0.w     w0
    4c26:	0d 00 32    	bra       Z, 0x4c42 <.L124>
    4c28:	8e 00 78    	mov.w     w14, w1
    4c2a:	4e 00 90    	mov.w     [w14+8], w0
    4c2c:	95 fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4c2e:	00 00 e0    	cp0.w     w0
    4c30:	08 00 3a    	bra       NZ, 0x4c42 <.L124>
        hex2str_alt(digout_read(ch), str);
    4c32:	1e 00 78    	mov.w     [w14], w0
    4c34:	56 0c 07    	rcall     0x64e2 <_digout_read> <.LFB4> <.LFE3>
    4c36:	8e 80 e8    	inc2.w    w14, w1
    4c38:	54 fd 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    4c3a:	0e 80 e8    	inc2.w    w14, w0
    4c3c:	cf 10 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    4c3e:	b0 55 29    	mov.w     #0x955b, w0
    4c40:	cd 10 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004c42 <.L124>:
    }
}
    4c42:	00 80 fa    	ulnk      
    4c44:	00 00 06    	return    

00004c46 <_od_handler>:

void od_handler(char *args) {
    4c46:	0a 00 fa    	lnk       #0xa
    4c48:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, val;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    4c4a:	00 00 eb    	clr.w     w0
    4c4c:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    4c4e:	66 00 47    	add.w     w14, #0x6, w0
    4c50:	00 01 78    	mov.w     w0, w2
    4c52:	81 55 29    	mov.w     #0x9558, w1
    4c54:	4e 00 90    	mov.w     [w14+8], w0
    4c56:	d5 fd 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4c58:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    4c5a:	1e 00 78    	mov.w     [w14], w0
    4c5c:	00 00 e0    	cp0.w     w0
    4c5e:	11 00 32    	bra       Z, 0x4c82 <.L126>
    4c60:	3e 00 90    	mov.w     [w14+6], w0
    4c62:	00 00 e0    	cp0.w     w0
    4c64:	0e 00 32    	bra       Z, 0x4c82 <.L126>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &val) == 0)) {
    4c66:	0e 80 e8    	inc2.w    w14, w0
    4c68:	80 00 78    	mov.w     w0, w1
    4c6a:	1e 00 78    	mov.w     [w14], w0
    4c6c:	75 fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4c6e:	00 00 e0    	cp0.w     w0
    4c70:	08 00 3a    	bra       NZ, 0x4c82 <.L126>
    4c72:	3e 00 90    	mov.w     [w14+6], w0
    4c74:	e4 00 47    	add.w     w14, #0x4, w1
    4c76:	70 fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4c78:	00 00 e0    	cp0.w     w0
    4c7a:	03 00 3a    	bra       NZ, 0x4c82 <.L126>
            digout_set_od(ch, val);
    4c7c:	ae 00 90    	mov.w     [w14+4], w1
    4c7e:	1e 00 90    	mov.w     [w14+2], w0
    4c80:	55 0c 07    	rcall     0x652c <_digout_set_od> <.LFB5> <.LFE4>

00004c82 <.L126>:
        }
    }
}
    4c82:	00 80 fa    	ulnk      
    4c84:	00 00 06    	return    

00004c86 <_odQ_handler>:

void odQ_handler(char *args) {
    4c86:	0a 00 fa    	lnk       #0xa
    4c88:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    4c8a:	4e 00 90    	mov.w     [w14+8], w0
    4c8c:	00 00 e0    	cp0.w     w0
    4c8e:	0d 00 32    	bra       Z, 0x4caa <.L128>
    4c90:	8e 00 78    	mov.w     w14, w1
    4c92:	4e 00 90    	mov.w     [w14+8], w0
    4c94:	61 fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4c96:	00 00 e0    	cp0.w     w0
    4c98:	08 00 3a    	bra       NZ, 0x4caa <.L128>
        hex2str_alt(digout_get_od(ch), str);
    4c9a:	1e 00 78    	mov.w     [w14], w0
    4c9c:	8f 0c 07    	rcall     0x65bc <_digout_get_od> <.LFB6> <.LFE5>
    4c9e:	8e 80 e8    	inc2.w    w14, w1
    4ca0:	20 fd 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    4ca2:	0e 80 e8    	inc2.w    w14, w0
    4ca4:	9b 10 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    4ca6:	b0 55 29    	mov.w     #0x955b, w0
    4ca8:	99 10 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004caa <.L128>:
    }
}
    4caa:	00 80 fa    	ulnk      
    4cac:	00 00 06    	return    

00004cae <_mode_handler>:

void mode_handler(char *args) {
    4cae:	0a 00 fa    	lnk       #0xa
    4cb0:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, mode;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    4cb2:	00 00 eb    	clr.w     w0
    4cb4:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    4cb6:	66 00 47    	add.w     w14, #0x6, w0
    4cb8:	00 01 78    	mov.w     w0, w2
    4cba:	81 55 29    	mov.w     #0x9558, w1
    4cbc:	4e 00 90    	mov.w     [w14+8], w0
    4cbe:	a1 fd 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4cc0:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    4cc2:	1e 00 78    	mov.w     [w14], w0
    4cc4:	00 00 e0    	cp0.w     w0
    4cc6:	11 00 32    	bra       Z, 0x4cea <.L130>
    4cc8:	3e 00 90    	mov.w     [w14+6], w0
    4cca:	00 00 e0    	cp0.w     w0
    4ccc:	0e 00 32    	bra       Z, 0x4cea <.L130>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &mode) == 0)) {
    4cce:	0e 80 e8    	inc2.w    w14, w0
    4cd0:	80 00 78    	mov.w     w0, w1
    4cd2:	1e 00 78    	mov.w     [w14], w0
    4cd4:	41 fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4cd6:	00 00 e0    	cp0.w     w0
    4cd8:	08 00 3a    	bra       NZ, 0x4cea <.L130>
    4cda:	3e 00 90    	mov.w     [w14+6], w0
    4cdc:	e4 00 47    	add.w     w14, #0x4, w1
    4cde:	3c fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4ce0:	00 00 e0    	cp0.w     w0
    4ce2:	03 00 3a    	bra       NZ, 0x4cea <.L130>
            digout_set_mode(ch, mode);
    4ce4:	ae 00 90    	mov.w     [w14+4], w1
    4ce6:	1e 00 90    	mov.w     [w14+2], w0
    4ce8:	6c 0d 07    	rcall     0x67c2 <_digout_set_mode> <.LFB14> <.LFE13>

00004cea <.L130>:
        }
    }
}
    4cea:	00 80 fa    	ulnk      
    4cec:	00 00 06    	return    

00004cee <_modeQ_handler>:

void modeQ_handler(char *args) {
    4cee:	0a 00 fa    	lnk       #0xa
    4cf0:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    4cf2:	4e 00 90    	mov.w     [w14+8], w0
    4cf4:	00 00 e0    	cp0.w     w0
    4cf6:	0d 00 32    	bra       Z, 0x4d12 <.L132>
    4cf8:	8e 00 78    	mov.w     w14, w1
    4cfa:	4e 00 90    	mov.w     [w14+8], w0
    4cfc:	2d fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4cfe:	00 00 e0    	cp0.w     w0
    4d00:	08 00 3a    	bra       NZ, 0x4d12 <.L132>
        hex2str_alt(digout_get_mode(ch), str);
    4d02:	1e 00 78    	mov.w     [w14], w0
    4d04:	e6 0e 07    	rcall     0x6ad2 <_digout_get_mode> <.LFB15> <.LFE14>
    4d06:	8e 80 e8    	inc2.w    w14, w1
    4d08:	ec fc 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    4d0a:	0e 80 e8    	inc2.w    w14, w0
    4d0c:	67 10 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    4d0e:	b0 55 29    	mov.w     #0x955b, w0
    4d10:	65 10 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004d12 <.L132>:
    }
}
    4d12:	00 80 fa    	ulnk      
    4d14:	00 00 06    	return    

00004d16 <_period_handler>:

void period_handler(char *args) {
    4d16:	0a 00 fa    	lnk       #0xa
    4d18:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, period;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    4d1a:	00 00 eb    	clr.w     w0
    4d1c:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    4d1e:	66 00 47    	add.w     w14, #0x6, w0
    4d20:	00 01 78    	mov.w     w0, w2
    4d22:	81 55 29    	mov.w     #0x9558, w1
    4d24:	4e 00 90    	mov.w     [w14+8], w0
    4d26:	6d fd 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4d28:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    4d2a:	1e 00 78    	mov.w     [w14], w0
    4d2c:	00 00 e0    	cp0.w     w0
    4d2e:	11 00 32    	bra       Z, 0x4d52 <.L134>
    4d30:	3e 00 90    	mov.w     [w14+6], w0
    4d32:	00 00 e0    	cp0.w     w0
    4d34:	0e 00 32    	bra       Z, 0x4d52 <.L134>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &period) == 0)) {
    4d36:	0e 80 e8    	inc2.w    w14, w0
    4d38:	80 00 78    	mov.w     w0, w1
    4d3a:	1e 00 78    	mov.w     [w14], w0
    4d3c:	0d fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4d3e:	00 00 e0    	cp0.w     w0
    4d40:	08 00 3a    	bra       NZ, 0x4d52 <.L134>
    4d42:	3e 00 90    	mov.w     [w14+6], w0
    4d44:	e4 00 47    	add.w     w14, #0x4, w1
    4d46:	08 fc 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4d48:	00 00 e0    	cp0.w     w0
    4d4a:	03 00 3a    	bra       NZ, 0x4d52 <.L134>
            digout_set_period(ch, period);
    4d4c:	ae 00 90    	mov.w     [w14+4], w1
    4d4e:	1e 00 90    	mov.w     [w14+2], w0
    4d50:	9b 0c 07    	rcall     0x6688 <_digout_set_period> <.LFB9> <.LFE8>

00004d52 <.L134>:
        }
    }
}
    4d52:	00 80 fa    	ulnk      
    4d54:	00 00 06    	return    

00004d56 <_periodQ_handler>:

void periodQ_handler(char *args) {
    4d56:	0a 00 fa    	lnk       #0xa
    4d58:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    4d5a:	4e 00 90    	mov.w     [w14+8], w0
    4d5c:	00 00 e0    	cp0.w     w0
    4d5e:	0d 00 32    	bra       Z, 0x4d7a <.L136>
    4d60:	8e 00 78    	mov.w     w14, w1
    4d62:	4e 00 90    	mov.w     [w14+8], w0
    4d64:	f9 fb 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4d66:	00 00 e0    	cp0.w     w0
    4d68:	08 00 3a    	bra       NZ, 0x4d7a <.L136>
        hex2str_alt(digout_get_period(ch), str);
    4d6a:	1e 00 78    	mov.w     [w14], w0
    4d6c:	cb 0c 07    	rcall     0x6704 <_digout_get_period> <.LFB10> <.LFE9>
    4d6e:	8e 80 e8    	inc2.w    w14, w1
    4d70:	b8 fc 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    4d72:	0e 80 e8    	inc2.w    w14, w0
    4d74:	33 10 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    4d76:	b0 55 29    	mov.w     #0x955b, w0
    4d78:	31 10 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004d7a <.L136>:
    }
}
    4d7a:	00 80 fa    	ulnk      
    4d7c:	00 00 06    	return    

00004d7e <_duty_handler>:

void duty_handler(char *args) {
    4d7e:	0a 00 fa    	lnk       #0xa
    4d80:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, duty;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    4d82:	00 00 eb    	clr.w     w0
    4d84:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    4d86:	66 00 47    	add.w     w14, #0x6, w0
    4d88:	00 01 78    	mov.w     w0, w2
    4d8a:	81 55 29    	mov.w     #0x9558, w1
    4d8c:	4e 00 90    	mov.w     [w14+8], w0
    4d8e:	39 fd 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4d90:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    4d92:	1e 00 78    	mov.w     [w14], w0
    4d94:	00 00 e0    	cp0.w     w0
    4d96:	11 00 32    	bra       Z, 0x4dba <.L138>
    4d98:	3e 00 90    	mov.w     [w14+6], w0
    4d9a:	00 00 e0    	cp0.w     w0
    4d9c:	0e 00 32    	bra       Z, 0x4dba <.L138>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &duty) == 0)) {
    4d9e:	0e 80 e8    	inc2.w    w14, w0
    4da0:	80 00 78    	mov.w     w0, w1
    4da2:	1e 00 78    	mov.w     [w14], w0
    4da4:	d9 fb 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4da6:	00 00 e0    	cp0.w     w0
    4da8:	08 00 3a    	bra       NZ, 0x4dba <.L138>
    4daa:	3e 00 90    	mov.w     [w14+6], w0
    4dac:	e4 00 47    	add.w     w14, #0x4, w1
    4dae:	d4 fb 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4db0:	00 00 e0    	cp0.w     w0
    4db2:	03 00 3a    	bra       NZ, 0x4dba <.L138>
            digout_set_duty(ch, duty);
    4db4:	ae 00 90    	mov.w     [w14+4], w1
    4db6:	1e 00 90    	mov.w     [w14+2], w0
    4db8:	26 0c 07    	rcall     0x6606 <_digout_set_duty> <.LFB7> <.LFE6>

00004dba <.L138>:
        }
    }
}
    4dba:	00 80 fa    	ulnk      
    4dbc:	00 00 06    	return    

00004dbe <_dutyQ_handler>:

void dutyQ_handler(char *args) {
    4dbe:	0a 00 fa    	lnk       #0xa
    4dc0:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    4dc2:	4e 00 90    	mov.w     [w14+8], w0
    4dc4:	00 00 e0    	cp0.w     w0
    4dc6:	0d 00 32    	bra       Z, 0x4de2 <.L140>
    4dc8:	8e 00 78    	mov.w     w14, w1
    4dca:	4e 00 90    	mov.w     [w14+8], w0
    4dcc:	c5 fb 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4dce:	00 00 e0    	cp0.w     w0
    4dd0:	08 00 3a    	bra       NZ, 0x4de2 <.L140>
        hex2str_alt(digout_get_duty(ch), str);
    4dd2:	1e 00 78    	mov.w     [w14], w0
    4dd4:	3a 0c 07    	rcall     0x664a <_digout_get_duty> <.LFB8> <.LFE7>
    4dd6:	8e 80 e8    	inc2.w    w14, w1
    4dd8:	84 fc 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    4dda:	0e 80 e8    	inc2.w    w14, w0
    4ddc:	ff 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    4dde:	b0 55 29    	mov.w     #0x955b, w0
    4de0:	fd 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004de2 <.L140>:
    }
}
    4de2:	00 80 fa    	ulnk      
    4de4:	00 00 06    	return    

00004de6 <_width_handler>:

void width_handler(char *args) {
    4de6:	0a 00 fa    	lnk       #0xa
    4de8:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch, width;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    4dea:	00 00 eb    	clr.w     w0
    4dec:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    4dee:	66 00 47    	add.w     w14, #0x6, w0
    4df0:	00 01 78    	mov.w     w0, w2
    4df2:	81 55 29    	mov.w     #0x9558, w1
    4df4:	4e 00 90    	mov.w     [w14+8], w0
    4df6:	05 fd 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4df8:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    4dfa:	1e 00 78    	mov.w     [w14], w0
    4dfc:	00 00 e0    	cp0.w     w0
    4dfe:	11 00 32    	bra       Z, 0x4e22 <.L142>
    4e00:	3e 00 90    	mov.w     [w14+6], w0
    4e02:	00 00 e0    	cp0.w     w0
    4e04:	0e 00 32    	bra       Z, 0x4e22 <.L142>
        if ((str2hex(arg1, &ch) == 0) && (str2hex(arg2, &width) == 0)) {
    4e06:	0e 80 e8    	inc2.w    w14, w0
    4e08:	80 00 78    	mov.w     w0, w1
    4e0a:	1e 00 78    	mov.w     [w14], w0
    4e0c:	a5 fb 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4e0e:	00 00 e0    	cp0.w     w0
    4e10:	08 00 3a    	bra       NZ, 0x4e22 <.L142>
    4e12:	3e 00 90    	mov.w     [w14+6], w0
    4e14:	e4 00 47    	add.w     w14, #0x4, w1
    4e16:	a0 fb 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4e18:	00 00 e0    	cp0.w     w0
    4e1a:	03 00 3a    	bra       NZ, 0x4e22 <.L142>
            digout_set_width(ch, width);
    4e1c:	ae 00 90    	mov.w     [w14+4], w1
    4e1e:	1e 00 90    	mov.w     [w14+2], w0
    4e20:	81 0c 07    	rcall     0x6724 <_digout_set_width> <.LFB11> <.LFE10>

00004e22 <.L142>:
        }
    }
}
    4e22:	00 80 fa    	ulnk      
    4e24:	00 00 06    	return    

00004e26 <_widthQ_handler>:

void widthQ_handler(char *args) {
    4e26:	0a 00 fa    	lnk       #0xa
    4e28:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t ch;
    char str[5];

    if (args && (str2hex(args, &ch) == 0)) {
    4e2a:	4e 00 90    	mov.w     [w14+8], w0
    4e2c:	00 00 e0    	cp0.w     w0
    4e2e:	0d 00 32    	bra       Z, 0x4e4a <.L144>
    4e30:	8e 00 78    	mov.w     w14, w1
    4e32:	4e 00 90    	mov.w     [w14+8], w0
    4e34:	91 fb 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4e36:	00 00 e0    	cp0.w     w0
    4e38:	08 00 3a    	bra       NZ, 0x4e4a <.L144>
        hex2str_alt(digout_get_width(ch), str);
    4e3a:	1e 00 78    	mov.w     [w14], w0
    4e3c:	8f 0c 07    	rcall     0x675c <_digout_get_width> <.LFB12> <.LFE11>
    4e3e:	8e 80 e8    	inc2.w    w14, w1
    4e40:	50 fc 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    4e42:	0e 80 e8    	inc2.w    w14, w0
    4e44:	cb 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        cdc_puts("\r\n");
    4e46:	b0 55 29    	mov.w     #0x955b, w0
    4e48:	c9 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004e4a <.L144>:
    }
}
    4e4a:	00 80 fa    	ulnk      
    4e4c:	00 00 06    	return    

00004e4e <_timer1period_handler>:

void timer1period_handler(char *args) {
    4e4e:	0a 00 fa    	lnk       #0xa
    4e50:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    4e52:	00 00 eb    	clr.w     w0
    4e54:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    4e56:	66 00 47    	add.w     w14, #0x6, w0
    4e58:	00 01 78    	mov.w     w0, w2
    4e5a:	81 55 29    	mov.w     #0x9558, w1
    4e5c:	4e 00 90    	mov.w     [w14+8], w0
    4e5e:	d1 fc 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4e60:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    4e62:	1e 00 78    	mov.w     [w14], w0
    4e64:	00 00 e0    	cp0.w     w0
    4e66:	11 00 32    	bra       Z, 0x4e8a <.L146>
    4e68:	3e 00 90    	mov.w     [w14+6], w0
    4e6a:	00 00 e0    	cp0.w     w0
    4e6c:	0e 00 32    	bra       Z, 0x4e8a <.L146>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    4e6e:	0e 80 e8    	inc2.w    w14, w0
    4e70:	80 00 78    	mov.w     w0, w1
    4e72:	1e 00 78    	mov.w     [w14], w0
    4e74:	71 fb 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4e76:	00 00 e0    	cp0.w     w0
    4e78:	08 00 3a    	bra       NZ, 0x4e8a <.L146>
    4e7a:	3e 00 90    	mov.w     [w14+6], w0
    4e7c:	e4 00 47    	add.w     w14, #0x4, w1
    4e7e:	6c fb 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4e80:	00 00 e0    	cp0.w     w0
    4e82:	03 00 3a    	bra       NZ, 0x4e8a <.L146>
            digout_set_timer1_period(val1, val2);
    4e84:	ae 00 90    	mov.w     [w14+4], w1
    4e86:	1e 00 90    	mov.w     [w14+2], w0
    4e88:	79 0c 07    	rcall     0x677c <_digout_set_timer1_period> <.LFB13> <.LFE12>

00004e8a <.L146>:
        }
    }
}
    4e8a:	00 80 fa    	ulnk      
    4e8c:	00 00 06    	return    

00004e8e <_timer1periodQ_handler>:

void timer1periodQ_handler(char *args) {
    4e8e:	08 00 fa    	lnk       #0x8
    4e90:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(PR1, str);
    4e92:	10 08 80    	mov.w     0x102, w0
    4e94:	8e 00 78    	mov.w     w14, w1
    4e96:	25 fc 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    4e98:	0e 00 78    	mov.w     w14, w0
    4e9a:	a0 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_putc(',');
    4e9c:	c0 c2 b3    	mov.b     #0x2c, w0
    4e9e:	67 0f 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    hex2str_alt(T1CON, str);
    4ea0:	20 08 80    	mov.w     0x104, w0
    4ea2:	8e 00 78    	mov.w     w14, w1
    4ea4:	1e fc 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    4ea6:	0e 00 78    	mov.w     w14, w0
    4ea8:	99 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    4eaa:	b0 55 29    	mov.w     #0x955b, w0
    4eac:	97 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    4eae:	00 80 fa    	ulnk      
    4eb0:	00 00 06    	return    

00004eb2 <_scope_handler>:

// SCOPE commands
void scope_handler(char *args) {
    4eb2:	08 00 fa    	lnk       #0x8
    4eb4:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    4eb6:	00 00 eb    	clr.w     w0
    4eb8:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    4eba:	64 00 47    	add.w     w14, #0x4, w0
    4ebc:	00 01 78    	mov.w     w0, w2
    4ebe:	e1 53 29    	mov.w     #0x953e, w1
    4ec0:	3e 00 90    	mov.w     [w14+6], w0
    4ec2:	9f fc 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4ec4:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    4ec6:	1e 00 90    	mov.w     [w14+2], w0
    4ec8:	00 00 e0    	cp0.w     w0
    4eca:	1a 00 32    	bra       Z, 0x4f00 <.L149>
        for (i = 0; i < SCOPE_TABLE_ENTRIES; i++) {
    4ecc:	00 00 eb    	clr.w     w0
    4ece:	00 0f 78    	mov.w     w0, [w14]
    4ed0:	14 00 37    	bra       0x4efa <.L151>

00004ed2 <.L153>:
            if (str_cmp(command, scope_table[i].command) == 0) {
    4ed2:	1e 00 78    	mov.w     [w14], w0
    4ed4:	c2 00 dd    	sl.w      w0, #0x2, w1
    4ed6:	a0 30 22    	mov.w     #0x230a, w0
    4ed8:	00 80 40    	add.w     w1, w0, w0
    4eda:	10 00 78    	mov.w     [w0], w0
    4edc:	80 00 78    	mov.w     w0, w1
    4ede:	1e 00 90    	mov.w     [w14+2], w0
    4ee0:	35 fc 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    4ee2:	00 00 e0    	cp0.w     w0
    4ee4:	09 00 3a    	bra       NZ, 0x4ef8 <.L152>
                scope_table[i].handler(remainder);
    4ee6:	1e 00 78    	mov.w     [w14], w0
    4ee8:	42 00 dd    	sl.w      w0, #0x2, w0
    4eea:	80 80 e8    	inc2.w    w0, w1
    4eec:	a0 30 22    	mov.w     #0x230a, w0
    4eee:	00 80 40    	add.w     w1, w0, w0
    4ef0:	90 00 78    	mov.w     [w0], w1
    4ef2:	2e 00 90    	mov.w     [w14+4], w0
    4ef4:	01 00 01    	call      w1
                break;
    4ef6:	04 00 37    	bra       0x4f00 <.L149>

00004ef8 <.L152>:
    4ef8:	1e 0f e8    	inc.w     [w14], [w14]

00004efa <.L151>:
    4efa:	1e 00 78    	mov.w     [w14], w0
    4efc:	ec 0f 50    	sub.w     w0, #0xc, [w15]
    4efe:	e9 ff 36    	bra       LEU, 0x4ed2 <.L153>

00004f00 <.L149>:
            }
        }
    }
}
    4f00:	00 80 fa    	ulnk      
    4f02:	00 00 06    	return    

00004f04 <_ch1gain_handler>:

void ch1gain_handler(char *args) {
    4f04:	08 00 fa    	lnk       #0x8
    4f06:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    4f08:	00 00 eb    	clr.w     w0
    4f0a:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    4f0c:	0e 80 e8    	inc2.w    w14, w0
    4f0e:	00 01 78    	mov.w     w0, w2
    4f10:	81 55 29    	mov.w     #0x9558, w1
    4f12:	3e 00 90    	mov.w     [w14+6], w0
    4f14:	76 fc 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4f16:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0))
    4f18:	1e 00 78    	mov.w     [w14], w0
    4f1a:	00 00 e0    	cp0.w     w0
    4f1c:	13 00 32    	bra       Z, 0x4f44 <.L154>
    4f1e:	64 00 47    	add.w     w14, #0x4, w0
    4f20:	80 00 78    	mov.w     w0, w1
    4f22:	1e 00 78    	mov.w     [w14], w0
    4f24:	19 fb 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4f26:	00 00 e0    	cp0.w     w0
    4f28:	0d 00 3a    	bra       NZ, 0x4f44 <.L154>
        CH1_GAIN = (val) ? 1 : 0;
    4f2a:	2e 00 90    	mov.w     [w14+4], w0
    4f2c:	00 f0 a7    	btsc.w    w0, #0xf
    4f2e:	00 00 ea    	neg.w     w0, w0
    4f30:	00 00 ea    	neg.w     w0, w0
    4f32:	4f 00 de    	lsr.w     w0, #0xf, w0
    4f34:	00 40 78    	mov.b     w0, w0
    4f36:	00 80 fb    	ze        w0, w0
    4f38:	61 00 60    	and.w     w0, #0x1, w0
    4f3a:	00 00 40    	add.w     w0, w0, w0
    4f3c:	21 17 80    	mov.w     0x2e4, w1
    4f3e:	01 10 a1    	bclr.w    w1, #0x1
    4f40:	01 00 70    	ior.w     w0, w1, w0
    4f42:	20 17 88    	mov.w     w0, 0x2e4

00004f44 <.L154>:
}
    4f44:	00 80 fa    	ulnk      
    4f46:	00 00 06    	return    

00004f48 <_ch1gainQ_handler>:

void ch1gainQ_handler(char *args) {
    4f48:	02 00 fa    	lnk       #0x2
    4f4a:	00 0f 78    	mov.w     w0, [w14]
    if (CH1_GAIN == 1)
    4f4c:	20 17 80    	mov.w     0x2e4, w0
    4f4e:	62 00 60    	and.w     w0, #0x2, w0
    4f50:	00 00 e0    	cp0.w     w0
    4f52:	03 00 32    	bra       Z, 0x4f5a <.L157>
        cdc_puts("1\r\n");
    4f54:	00 55 29    	mov.w     #0x9550, w0
    4f56:	42 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    4f58:	02 00 37    	bra       0x4f5e <.L156>

00004f5a <.L157>:
    else
        cdc_puts("0\r\n");
    4f5a:	40 55 29    	mov.w     #0x9554, w0
    4f5c:	3f 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004f5e <.L156>:
}
    4f5e:	00 80 fa    	ulnk      
    4f60:	00 00 06    	return    

00004f62 <_ch2gain_handler>:

void ch2gain_handler(char *args) {
    4f62:	08 00 fa    	lnk       #0x8
    4f64:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    4f66:	00 00 eb    	clr.w     w0
    4f68:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    4f6a:	0e 80 e8    	inc2.w    w14, w0
    4f6c:	00 01 78    	mov.w     w0, w2
    4f6e:	81 55 29    	mov.w     #0x9558, w1
    4f70:	3e 00 90    	mov.w     [w14+6], w0
    4f72:	47 fc 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4f74:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0))
    4f76:	1e 00 78    	mov.w     [w14], w0
    4f78:	00 00 e0    	cp0.w     w0
    4f7a:	12 00 32    	bra       Z, 0x4fa0 <.L159>
    4f7c:	64 00 47    	add.w     w14, #0x4, w0
    4f7e:	80 00 78    	mov.w     w0, w1
    4f80:	1e 00 78    	mov.w     [w14], w0
    4f82:	ea fa 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4f84:	00 00 e0    	cp0.w     w0
    4f86:	0c 00 3a    	bra       NZ, 0x4fa0 <.L159>
        CH2_GAIN = (val) ? 1 : 0;
    4f88:	2e 00 90    	mov.w     [w14+4], w0
    4f8a:	00 f0 a7    	btsc.w    w0, #0xf
    4f8c:	00 00 ea    	neg.w     w0, w0
    4f8e:	00 00 ea    	neg.w     w0, w0
    4f90:	4f 00 de    	lsr.w     w0, #0xf, w0
    4f92:	00 40 78    	mov.b     w0, w0
    4f94:	00 80 fb    	ze        w0, w0
    4f96:	61 00 60    	and.w     w0, #0x1, w0
    4f98:	21 17 80    	mov.w     0x2e4, w1
    4f9a:	01 00 a1    	bclr.w    w1, #0x0
    4f9c:	01 00 70    	ior.w     w0, w1, w0
    4f9e:	20 17 88    	mov.w     w0, 0x2e4

00004fa0 <.L159>:
}
    4fa0:	00 80 fa    	ulnk      
    4fa2:	00 00 06    	return    

00004fa4 <_ch2gainQ_handler>:

void ch2gainQ_handler(char *args) {
    4fa4:	02 00 fa    	lnk       #0x2
    4fa6:	00 0f 78    	mov.w     w0, [w14]
    if (CH2_GAIN == 1)
    4fa8:	20 17 80    	mov.w     0x2e4, w0
    4faa:	61 00 60    	and.w     w0, #0x1, w0
    4fac:	00 00 e0    	cp0.w     w0
    4fae:	03 00 32    	bra       Z, 0x4fb6 <.L162>
        cdc_puts("1\r\n");
    4fb0:	00 55 29    	mov.w     #0x9550, w0
    4fb2:	14 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    4fb4:	02 00 37    	bra       0x4fba <.L161>

00004fb6 <.L162>:
    else
        cdc_puts("0\r\n");
    4fb6:	40 55 29    	mov.w     #0x9554, w0
    4fb8:	11 0f 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00004fba <.L161>:
}
    4fba:	00 80 fa    	ulnk      
    4fbc:	00 00 06    	return    

00004fbe <_interval_handler>:

void interval_handler(char *args) {
    4fbe:	0a 00 fa    	lnk       #0xa
    4fc0:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    4fc2:	00 00 eb    	clr.w     w0
    4fc4:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    4fc6:	66 00 47    	add.w     w14, #0x6, w0
    4fc8:	00 01 78    	mov.w     w0, w2
    4fca:	81 55 29    	mov.w     #0x9558, w1
    4fcc:	4e 00 90    	mov.w     [w14+8], w0
    4fce:	19 fc 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    4fd0:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    4fd2:	1e 00 78    	mov.w     [w14], w0
    4fd4:	00 00 e0    	cp0.w     w0
    4fd6:	11 00 32    	bra       Z, 0x4ffa <.L164>
    4fd8:	3e 00 90    	mov.w     [w14+6], w0
    4fda:	00 00 e0    	cp0.w     w0
    4fdc:	0e 00 32    	bra       Z, 0x4ffa <.L164>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    4fde:	0e 80 e8    	inc2.w    w14, w0
    4fe0:	80 00 78    	mov.w     w0, w1
    4fe2:	1e 00 78    	mov.w     [w14], w0
    4fe4:	b9 fa 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4fe6:	00 00 e0    	cp0.w     w0
    4fe8:	08 00 3a    	bra       NZ, 0x4ffa <.L164>
    4fea:	3e 00 90    	mov.w     [w14+6], w0
    4fec:	e4 00 47    	add.w     w14, #0x4, w1
    4fee:	b4 fa 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    4ff0:	00 00 e0    	cp0.w     w0
    4ff2:	03 00 3a    	bra       NZ, 0x4ffa <.L164>
            set_period(val1, val2);
    4ff4:	ae 00 90    	mov.w     [w14+4], w1
    4ff6:	1e 00 90    	mov.w     [w14+2], w0
    4ff8:	55 12 07    	rcall     0x74a4 <_set_period> <.LFB6> <.LFE5>

00004ffa <.L164>:
        }
    }
}
    4ffa:	00 80 fa    	ulnk      
    4ffc:	00 00 06    	return    

00004ffe <_intervalQ_handler>:

void intervalQ_handler(char *args) {
    4ffe:	08 00 fa    	lnk       #0x8
    5000:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(PR2, str);
    5002:	60 08 80    	mov.w     0x10c, w0
    5004:	8e 00 78    	mov.w     w14, w1
    5006:	6d fb 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    5008:	0e 00 78    	mov.w     w14, w0
    500a:	e8 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_putc(',');
    500c:	c0 c2 b3    	mov.b     #0x2c, w0
    500e:	af 0e 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    hex2str_alt(T2CON, str);
    5010:	80 08 80    	mov.w     0x110, w0
    5012:	8e 00 78    	mov.w     w14, w1
    5014:	66 fb 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    5016:	0e 00 78    	mov.w     w14, w0
    5018:	e1 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    501a:	b0 55 29    	mov.w     #0x955b, w0
    501c:	df 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    501e:	00 80 fa    	ulnk      
    5020:	00 00 06    	return    

00005022 <_maxavg_handler>:

void maxavg_handler(char *args) {
    5022:	08 00 fa    	lnk       #0x8
    5024:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    5026:	00 00 eb    	clr.w     w0
    5028:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    502a:	0e 80 e8    	inc2.w    w14, w0
    502c:	00 01 78    	mov.w     w0, w2
    502e:	81 55 29    	mov.w     #0x9558, w1
    5030:	3e 00 90    	mov.w     [w14+6], w0
    5032:	e7 fb 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5034:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    5036:	1e 00 78    	mov.w     [w14], w0
    5038:	00 00 e0    	cp0.w     w0
    503a:	0b 00 32    	bra       Z, 0x5052 <.L167>
    503c:	64 00 47    	add.w     w14, #0x4, w0
    503e:	80 00 78    	mov.w     w0, w1
    5040:	1e 00 78    	mov.w     [w14], w0
    5042:	8a fa 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5044:	00 00 e0    	cp0.w     w0
    5046:	05 00 3a    	bra       NZ, 0x5052 <.L167>
        if (val < 5)
    5048:	2e 00 90    	mov.w     [w14+4], w0
    504a:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    504c:	02 00 3e    	bra       GTU, 0x5052 <.L167>
            set_max_avg(val);
    504e:	2e 00 90    	mov.w     [w14+4], w0
    5050:	49 12 07    	rcall     0x74e4 <_set_max_avg> <.LFB11> <.LFE10>

00005052 <.L167>:
    }
}
    5052:	00 80 fa    	ulnk      
    5054:	00 00 06    	return    

00005056 <_maxavgQ_handler>:

void maxavgQ_handler(char *args) {
    5056:	08 00 fa    	lnk       #0x8
    5058:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(get_max_avg(), str);
    505a:	4b 12 07    	rcall     0x74f2 <_get_max_avg> <.LFB12> <.LFE11>
    505c:	8e 00 78    	mov.w     w14, w1
    505e:	41 fb 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    5060:	0e 00 78    	mov.w     w14, w0
    5062:	bc 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    5064:	b0 55 29    	mov.w     #0x955b, w0
    5066:	ba 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    5068:	00 80 fa    	ulnk      
    506a:	00 00 06    	return    

0000506c <_numavgQ_handler>:

void numavgQ_handler(char *args) {
    506c:	08 00 fa    	lnk       #0x8
    506e:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(get_num_avg(), str);
    5070:	4a 12 07    	rcall     0x7506 <_get_num_avg> <.LFB14> <.LFE13>
    5072:	8e 00 78    	mov.w     w14, w1
    5074:	36 fb 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    5076:	0e 00 78    	mov.w     w14, w0
    5078:	b1 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    507a:	b0 55 29    	mov.w     #0x955b, w0
    507c:	af 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    507e:	00 80 fa    	ulnk      
    5080:	00 00 06    	return    

00005082 <_sweepQ_handler>:

void sweepQ_handler(char *args) {
    5082:	08 00 fa    	lnk       #0x8
    5084:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(get_sweep_in_progress(), str);
    5086:	20 12 07    	rcall     0x74c8 <_get_sweep_in_progress> <.LFB8> <.LFE7>
    5088:	8e 00 78    	mov.w     w14, w1
    508a:	2b fb 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    508c:	0e 00 78    	mov.w     w14, w0
    508e:	a6 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_putc(',');
    5090:	c0 c2 b3    	mov.b     #0x2c, w0
    5092:	6d 0e 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    hex2str_alt(get_samples_left(), str);
    5094:	23 12 07    	rcall     0x74dc <_get_samples_left> <.LFB10> <.LFE9>
    5096:	8e 00 78    	mov.w     w14, w1
    5098:	24 fb 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    509a:	0e 00 78    	mov.w     w14, w0
    509c:	9f 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    509e:	b0 55 29    	mov.w     #0x955b, w0
    50a0:	9d 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    50a2:	00 80 fa    	ulnk      
    50a4:	00 00 06    	return    

000050a6 <_trigger_handler>:

void trigger_handler(char *args) {
    50a6:	02 00 fa    	lnk       #0x2
    50a8:	00 0f 78    	mov.w     w0, [w14]
    trigger_sweep();
    50aa:	a0 42 80    	mov.w     0x854, w0
    50ac:	00 00 01    	call      w0
    set_samples_left(DMACNT1);
    50ae:	d0 1c 80    	mov.w     0x39a, w0
    50b0:	0f 12 07    	rcall     0x74d0 <_set_samples_left> <.LFB9> <.LFE8>
}
    50b2:	00 80 fa    	ulnk      
    50b4:	00 00 06    	return    

000050b6 <_bufferQ_handler>:

void bufferQ_handler(char *args) {
    50b6:	0a 00 fa    	lnk       #0xa
    50b8:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    50ba:	00 00 eb    	clr.w     w0
    50bc:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    50be:	66 00 47    	add.w     w14, #0x6, w0
    50c0:	00 01 78    	mov.w     w0, w2
    50c2:	81 55 29    	mov.w     #0x9558, w1
    50c4:	4e 00 90    	mov.w     [w14+8], w0
    50c6:	9d fb 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    50c8:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    50ca:	1e 00 78    	mov.w     [w14], w0
    50cc:	00 00 e0    	cp0.w     w0
    50ce:	24 00 32    	bra       Z, 0x5118 <.L173>
    50d0:	3e 00 90    	mov.w     [w14+6], w0
    50d2:	00 00 e0    	cp0.w     w0
    50d4:	21 00 32    	bra       Z, 0x5118 <.L173>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    50d6:	0e 80 e8    	inc2.w    w14, w0
    50d8:	80 00 78    	mov.w     w0, w1
    50da:	1e 00 78    	mov.w     [w14], w0
    50dc:	3d fa 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    50de:	00 00 e0    	cp0.w     w0
    50e0:	1b 00 3a    	bra       NZ, 0x5118 <.L173>
    50e2:	3e 00 90    	mov.w     [w14+6], w0
    50e4:	e4 00 47    	add.w     w14, #0x4, w1
    50e6:	38 fa 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    50e8:	00 00 e0    	cp0.w     w0
    50ea:	16 00 3a    	bra       NZ, 0x5118 <.L173>
            set_samples_left(DMACNT1);
    50ec:	d0 1c 80    	mov.w     0x39a, w0
    50ee:	f0 11 07    	rcall     0x74d0 <_set_samples_left> <.LFB9> <.LFE8>
            if (val1 < SCOPE_BUFFER_SIZE) {
    50f0:	9e 00 90    	mov.w     [w14+2], w1
    50f2:	70 bb 20    	mov.w     #0xbb7, w0
    50f4:	80 8f 50    	sub.w     w1, w0, [w15]
    50f6:	10 00 3e    	bra       GTU, 0x5118 <.L173>
                scope_buffer_pos = val1;
    50f8:	1e 00 90    	mov.w     [w14+2], w0
    50fa:	70 43 88    	mov.w     w0, 0x86e
                samples_to_send = ((val1 + val2) <= SCOPE_BUFFER_SIZE) ? val2 : SCOPE_BUFFER_SIZE - val1;
    50fc:	9e 00 90    	mov.w     [w14+2], w1
    50fe:	2e 00 90    	mov.w     [w14+4], w0
    5100:	80 80 40    	add.w     w1, w0, w1
    5102:	80 bb 20    	mov.w     #0xbb8, w0
    5104:	80 8f 50    	sub.w     w1, w0, [w15]
    5106:	04 00 36    	bra       LEU, 0x5110 <.L175>
    5108:	1e 00 90    	mov.w     [w14+2], w0
    510a:	81 bb 20    	mov.w     #0xbb8, w1
    510c:	00 80 50    	sub.w     w1, w0, w0
    510e:	01 00 37    	bra       0x5112 <.L176>

00005110 <.L175>:
    5110:	2e 00 90    	mov.w     [w14+4], w0

00005112 <.L176>:
    5112:	80 43 88    	mov.w     w0, 0x870
                parser_task = send_next_vals;
    5114:	e0 1b 25    	mov.w     #0x51be, w0
    5116:	40 43 88    	mov.w     w0, 0x868

00005118 <.L173>:
            }
        }
    }
}
    5118:	00 80 fa    	ulnk      
    511a:	00 00 06    	return    

0000511c <_bufferbinQ_handler>:

void bufferbinQ_handler(char *args) {
    511c:	0a 00 fa    	lnk       #0xa
    511e:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    5120:	00 00 eb    	clr.w     w0
    5122:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    5124:	66 00 47    	add.w     w14, #0x6, w0
    5126:	00 01 78    	mov.w     w0, w2
    5128:	81 55 29    	mov.w     #0x9558, w1
    512a:	4e 00 90    	mov.w     [w14+8], w0
    512c:	6a fb 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    512e:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    5130:	1e 00 78    	mov.w     [w14], w0
    5132:	00 00 e0    	cp0.w     w0
    5134:	24 00 32    	bra       Z, 0x517e <.L177>
    5136:	3e 00 90    	mov.w     [w14+6], w0
    5138:	00 00 e0    	cp0.w     w0
    513a:	21 00 32    	bra       Z, 0x517e <.L177>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    513c:	0e 80 e8    	inc2.w    w14, w0
    513e:	80 00 78    	mov.w     w0, w1
    5140:	1e 00 78    	mov.w     [w14], w0
    5142:	0a fa 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5144:	00 00 e0    	cp0.w     w0
    5146:	1b 00 3a    	bra       NZ, 0x517e <.L177>
    5148:	3e 00 90    	mov.w     [w14+6], w0
    514a:	e4 00 47    	add.w     w14, #0x4, w1
    514c:	05 fa 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    514e:	00 00 e0    	cp0.w     w0
    5150:	16 00 3a    	bra       NZ, 0x517e <.L177>
            set_samples_left(DMACNT1);
    5152:	d0 1c 80    	mov.w     0x39a, w0
    5154:	bd 11 07    	rcall     0x74d0 <_set_samples_left> <.LFB9> <.LFE8>
            if (val1 < SCOPE_BUFFER_SIZE) {
    5156:	9e 00 90    	mov.w     [w14+2], w1
    5158:	70 bb 20    	mov.w     #0xbb7, w0
    515a:	80 8f 50    	sub.w     w1, w0, [w15]
    515c:	10 00 3e    	bra       GTU, 0x517e <.L177>
                scope_buffer_pos = val1;
    515e:	1e 00 90    	mov.w     [w14+2], w0
    5160:	70 43 88    	mov.w     w0, 0x86e
                samples_to_send = ((val1 + val2) <= SCOPE_BUFFER_SIZE) ? val2 : SCOPE_BUFFER_SIZE - val1;
    5162:	9e 00 90    	mov.w     [w14+2], w1
    5164:	2e 00 90    	mov.w     [w14+4], w0
    5166:	80 80 40    	add.w     w1, w0, w1
    5168:	80 bb 20    	mov.w     #0xbb8, w0
    516a:	80 8f 50    	sub.w     w1, w0, [w15]
    516c:	04 00 36    	bra       LEU, 0x5176 <.L179>
    516e:	1e 00 90    	mov.w     [w14+2], w0
    5170:	81 bb 20    	mov.w     #0xbb8, w1
    5172:	00 80 50    	sub.w     w1, w0, w0
    5174:	01 00 37    	bra       0x5178 <.L180>

00005176 <.L179>:
    5176:	2e 00 90    	mov.w     [w14+4], w0

00005178 <.L180>:
    5178:	80 43 88    	mov.w     w0, 0x870
                parser_task = send_next_vals_bin;
    517a:	00 23 25    	mov.w     #0x5230, w0
    517c:	40 43 88    	mov.w     w0, 0x868

0000517e <.L177>:
            }
        }
    }
}
    517e:	00 80 fa    	ulnk      
    5180:	00 00 06    	return    

00005182 <_send_next_val>:

void send_next_val(void) {
    5182:	06 00 fa    	lnk       #0x6
    char str[5];

    if (cdc_tx_buffer_space() > 5) {
    5184:	ee 0d 07    	rcall     0x6d62 <_cdc_tx_buffer_space> <.LFB6> <.LFE5>
    5186:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    5188:	18 00 36    	bra       LEU, 0x51ba <.L181>
        hex2str_alt(scope_buffer[scope_buffer_pos++], str);
    518a:	70 43 80    	mov.w     0x86e, w0
    518c:	00 01 40    	add.w     w0, w0, w2
    518e:	81 88 20    	mov.w     #0x888, w1
    5190:	81 00 41    	add.w     w2, w1, w1
    5192:	11 01 78    	mov.w     [w1], w2
    5194:	00 00 e8    	inc.w     w0, w0
    5196:	70 43 88    	mov.w     w0, 0x86e
    5198:	8e 00 78    	mov.w     w14, w1
    519a:	02 00 78    	mov.w     w2, w0
    519c:	a2 fa 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    519e:	0e 00 78    	mov.w     w14, w0
    51a0:	1d 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        samples_to_send--;
    51a2:	80 43 80    	mov.w     0x870, w0
    51a4:	00 00 e9    	dec.w     w0, w0
    51a6:	80 43 88    	mov.w     w0, 0x870
        if (samples_to_send > 0)
    51a8:	80 43 80    	mov.w     0x870, w0
    51aa:	00 00 e0    	cp0.w     w0
    51ac:	03 00 32    	bra       Z, 0x51b4 <.L183>
            cdc_puts(",");
    51ae:	e0 55 29    	mov.w     #0x955e, w0
    51b0:	15 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    51b2:	03 00 37    	bra       0x51ba <.L181>

000051b4 <.L183>:
        else {
            cdc_puts("\r\n");
    51b4:	b0 55 29    	mov.w     #0x955b, w0
    51b6:	12 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
            parser_task = (STATE_HANDLER_T)NULL;
    51b8:	68 28 ef    	clr.w     0x868

000051ba <.L181>:
        }
    }
}
    51ba:	00 80 fa    	ulnk      
    51bc:	00 00 06    	return    

000051be <_send_next_vals>:

void send_next_vals(void) {
    51be:	06 00 fa    	lnk       #0x6
    char str[5];

    while (cdc_tx_buffer_space() > 5) {
    51c0:	19 00 37    	bra       0x51f4 <.L185>

000051c2 <.L188>:
        hex2str_alt(scope_buffer[scope_buffer_pos++], str);
    51c2:	70 43 80    	mov.w     0x86e, w0
    51c4:	00 01 40    	add.w     w0, w0, w2
    51c6:	81 88 20    	mov.w     #0x888, w1
    51c8:	81 00 41    	add.w     w2, w1, w1
    51ca:	11 01 78    	mov.w     [w1], w2
    51cc:	00 00 e8    	inc.w     w0, w0
    51ce:	70 43 88    	mov.w     w0, 0x86e
    51d0:	8e 00 78    	mov.w     w14, w1
    51d2:	02 00 78    	mov.w     w2, w0
    51d4:	86 fa 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    51d6:	0e 00 78    	mov.w     w14, w0
    51d8:	01 0e 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        samples_to_send--;
    51da:	80 43 80    	mov.w     0x870, w0
    51dc:	00 00 e9    	dec.w     w0, w0
    51de:	80 43 88    	mov.w     w0, 0x870
        if (samples_to_send > 0)
    51e0:	80 43 80    	mov.w     0x870, w0
    51e2:	00 00 e0    	cp0.w     w0
    51e4:	03 00 32    	bra       Z, 0x51ec <.L186>
            cdc_puts(",");
    51e6:	e0 55 29    	mov.w     #0x955e, w0
    51e8:	f9 0d 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    51ea:	04 00 37    	bra       0x51f4 <.L185>

000051ec <.L186>:
        else {
            cdc_puts("\r\n");
    51ec:	b0 55 29    	mov.w     #0x955b, w0
    51ee:	f6 0d 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
            parser_task = (STATE_HANDLER_T)NULL;
    51f0:	68 28 ef    	clr.w     0x868
            break;
    51f2:	03 00 37    	bra       0x51fa <.L184>

000051f4 <.L185>:
    51f4:	b6 0d 07    	rcall     0x6d62 <_cdc_tx_buffer_space> <.LFB6> <.LFE5>
    51f6:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    51f8:	e4 ff 3e    	bra       GTU, 0x51c2 <.L188>

000051fa <.L184>:
        }
    }
}
    51fa:	00 80 fa    	ulnk      
    51fc:	00 00 06    	return    

000051fe <_send_next_val_bin>:

void send_next_val_bin(void) {
    51fe:	02 00 fa    	lnk       #0x2
    WORD val;

    if (cdc_tx_buffer_space() > 2) {
    5200:	b0 0d 07    	rcall     0x6d62 <_cdc_tx_buffer_space> <.LFB6> <.LFE5>
    5202:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    5204:	13 00 36    	bra       LEU, 0x522c <.L189>
        val.w = scope_buffer[scope_buffer_pos++];
    5206:	70 43 80    	mov.w     0x86e, w0
    5208:	00 01 40    	add.w     w0, w0, w2
    520a:	81 88 20    	mov.w     #0x888, w1
    520c:	81 00 41    	add.w     w2, w1, w1
    520e:	91 00 78    	mov.w     [w1], w1
    5210:	01 0f 78    	mov.w     w1, [w14]
    5212:	00 00 e8    	inc.w     w0, w0
    5214:	70 43 88    	mov.w     w0, 0x86e
        cdc_putc(val.b[0]);
    5216:	1e 40 78    	mov.b     [w14], w0
    5218:	aa 0d 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
        cdc_putc(val.b[1]);
    521a:	1e 40 90    	mov.b     [w14+1], w0
    521c:	a8 0d 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
        samples_to_send--;
    521e:	80 43 80    	mov.w     0x870, w0
    5220:	00 00 e9    	dec.w     w0, w0
    5222:	80 43 88    	mov.w     w0, 0x870
        if (samples_to_send == 0) {
    5224:	80 43 80    	mov.w     0x870, w0
    5226:	00 00 e0    	cp0.w     w0
    5228:	01 00 3a    	bra       NZ, 0x522c <.L189>
            parser_task = (STATE_HANDLER_T)NULL;
    522a:	68 28 ef    	clr.w     0x868

0000522c <.L189>:
        }
    }
}
    522c:	00 80 fa    	ulnk      
    522e:	00 00 06    	return    

00005230 <_send_next_vals_bin>:

void send_next_vals_bin(void) {
    5230:	02 00 fa    	lnk       #0x2
    WORD val;

    while (cdc_tx_buffer_space() > 2) {
    5232:	14 00 37    	bra       0x525c <.L192>

00005234 <.L194>:
        val.w = scope_buffer[scope_buffer_pos++];
    5234:	70 43 80    	mov.w     0x86e, w0
    5236:	00 01 40    	add.w     w0, w0, w2
    5238:	81 88 20    	mov.w     #0x888, w1
    523a:	81 00 41    	add.w     w2, w1, w1
    523c:	91 00 78    	mov.w     [w1], w1
    523e:	01 0f 78    	mov.w     w1, [w14]
    5240:	00 00 e8    	inc.w     w0, w0
    5242:	70 43 88    	mov.w     w0, 0x86e
        cdc_putc(val.b[0]);
    5244:	1e 40 78    	mov.b     [w14], w0
    5246:	93 0d 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
        cdc_putc(val.b[1]);
    5248:	1e 40 90    	mov.b     [w14+1], w0
    524a:	91 0d 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
        samples_to_send--;
    524c:	80 43 80    	mov.w     0x870, w0
    524e:	00 00 e9    	dec.w     w0, w0
    5250:	80 43 88    	mov.w     w0, 0x870
        if (samples_to_send == 0) {
    5252:	80 43 80    	mov.w     0x870, w0
    5254:	00 00 e0    	cp0.w     w0
    5256:	02 00 3a    	bra       NZ, 0x525c <.L192>
            parser_task = (STATE_HANDLER_T)NULL;
    5258:	68 28 ef    	clr.w     0x868
            break;
    525a:	03 00 37    	bra       0x5262 <.L191>

0000525c <.L192>:
    525c:	82 0d 07    	rcall     0x6d62 <_cdc_tx_buffer_space> <.LFB6> <.LFE5>
    525e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    5260:	e9 ff 3e    	bra       GTU, 0x5234 <.L194>

00005262 <.L191>:
        }
    }
}
    5262:	00 80 fa    	ulnk      
    5264:	00 00 06    	return    

00005266 <_wavegen_handler>:

// WAVEGEN commands
void wavegen_handler(char *args) {
    5266:	08 00 fa    	lnk       #0x8
    5268:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    526a:	00 00 eb    	clr.w     w0
    526c:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    526e:	64 00 47    	add.w     w14, #0x4, w0
    5270:	00 01 78    	mov.w     w0, w2
    5272:	e1 53 29    	mov.w     #0x953e, w1
    5274:	3e 00 90    	mov.w     [w14+6], w0
    5276:	c5 fa 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5278:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    527a:	1e 00 90    	mov.w     [w14+2], w0
    527c:	00 00 e0    	cp0.w     w0
    527e:	1a 00 32    	bra       Z, 0x52b4 <.L195>
        for (i = 0; i < WAVEGEN_TABLE_ENTRIES; i++) {
    5280:	00 00 eb    	clr.w     w0
    5282:	00 0f 78    	mov.w     w0, [w14]
    5284:	14 00 37    	bra       0x52ae <.L197>

00005286 <.L199>:
            if (str_cmp(command, wavegen_table[i].command) == 0) {
    5286:	1e 00 78    	mov.w     [w14], w0
    5288:	c2 00 dd    	sl.w      w0, #0x2, w1
    528a:	e0 33 22    	mov.w     #0x233e, w0
    528c:	00 80 40    	add.w     w1, w0, w0
    528e:	10 00 78    	mov.w     [w0], w0
    5290:	80 00 78    	mov.w     w0, w1
    5292:	1e 00 90    	mov.w     [w14+2], w0
    5294:	5b fa 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    5296:	00 00 e0    	cp0.w     w0
    5298:	09 00 3a    	bra       NZ, 0x52ac <.L198>
                wavegen_table[i].handler(remainder);
    529a:	1e 00 78    	mov.w     [w14], w0
    529c:	42 00 dd    	sl.w      w0, #0x2, w0
    529e:	80 80 e8    	inc2.w    w0, w1
    52a0:	e0 33 22    	mov.w     #0x233e, w0
    52a2:	00 80 40    	add.w     w1, w0, w0
    52a4:	90 00 78    	mov.w     [w0], w1
    52a6:	2e 00 90    	mov.w     [w14+4], w0
    52a8:	01 00 01    	call      w1
                break;
    52aa:	04 00 37    	bra       0x52b4 <.L195>

000052ac <.L198>:
    52ac:	1e 0f e8    	inc.w     [w14], [w14]

000052ae <.L197>:
    52ae:	1e 00 78    	mov.w     [w14], w0
    52b0:	ef 0f 50    	sub.w     w0, #0xf, [w15]
    52b2:	e9 ff 36    	bra       LEU, 0x5286 <.L199>

000052b4 <.L195>:
            }
        }
    }
}
    52b4:	00 80 fa    	ulnk      
    52b6:	00 00 06    	return    

000052b8 <_gain_handler>:

void gain_handler(char *args) {
    52b8:	08 00 fa    	lnk       #0x8
    52ba:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    52bc:	00 00 eb    	clr.w     w0
    52be:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    52c0:	0e 80 e8    	inc2.w    w14, w0
    52c2:	00 01 78    	mov.w     w0, w2
    52c4:	81 55 29    	mov.w     #0x9558, w1
    52c6:	3e 00 90    	mov.w     [w14+6], w0
    52c8:	9c fa 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    52ca:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0))
    52cc:	1e 00 78    	mov.w     [w14], w0
    52ce:	00 00 e0    	cp0.w     w0
    52d0:	13 00 32    	bra       Z, 0x52f8 <.L200>
    52d2:	64 00 47    	add.w     w14, #0x4, w0
    52d4:	80 00 78    	mov.w     w0, w1
    52d6:	1e 00 78    	mov.w     [w14], w0
    52d8:	3f f9 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    52da:	00 00 e0    	cp0.w     w0
    52dc:	0d 00 3a    	bra       NZ, 0x52f8 <.L200>
        WG_GAIN = (val) ? 1 : 0;
    52de:	2e 00 90    	mov.w     [w14+4], w0
    52e0:	00 f0 a7    	btsc.w    w0, #0xf
    52e2:	00 00 ea    	neg.w     w0, w0
    52e4:	00 00 ea    	neg.w     w0, w0
    52e6:	4f 00 de    	lsr.w     w0, #0xf, w0
    52e8:	00 40 78    	mov.b     w0, w0
    52ea:	00 80 fb    	ze        w0, w0
    52ec:	61 00 60    	and.w     w0, #0x1, w0
    52ee:	42 00 dd    	sl.w      w0, #0x2, w0
    52f0:	21 17 80    	mov.w     0x2e4, w1
    52f2:	01 20 a1    	bclr.w    w1, #0x2
    52f4:	01 00 70    	ior.w     w0, w1, w0
    52f6:	20 17 88    	mov.w     w0, 0x2e4

000052f8 <.L200>:
}
    52f8:	00 80 fa    	ulnk      
    52fa:	00 00 06    	return    

000052fc <_gainQ_handler>:

void gainQ_handler(char *args) {
    52fc:	02 00 fa    	lnk       #0x2
    52fe:	00 0f 78    	mov.w     w0, [w14]
    if (WG_GAIN == 1)
    5300:	20 17 80    	mov.w     0x2e4, w0
    5302:	64 00 60    	and.w     w0, #0x4, w0
    5304:	00 00 e0    	cp0.w     w0
    5306:	03 00 32    	bra       Z, 0x530e <.L203>
        cdc_puts("1\r\n");
    5308:	00 55 29    	mov.w     #0x9550, w0
    530a:	68 0d 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    530c:	02 00 37    	bra       0x5312 <.L202>

0000530e <.L203>:
    else
        cdc_puts("0\r\n");
    530e:	40 55 29    	mov.w     #0x9554, w0
    5310:	65 0d 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00005312 <.L202>:
}
    5312:	00 80 fa    	ulnk      
    5314:	00 00 06    	return    

00005316 <_shape_handler>:

void shape_handler(char *args) {
    5316:	08 00 fa    	lnk       #0x8
    5318:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    531a:	00 00 eb    	clr.w     w0
    531c:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    531e:	0e 80 e8    	inc2.w    w14, w0
    5320:	00 01 78    	mov.w     w0, w2
    5322:	e1 53 29    	mov.w     #0x953e, w1
    5324:	3e 00 90    	mov.w     [w14+6], w0
    5326:	6d fa 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5328:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    532a:	1e 00 78    	mov.w     [w14], w0
    532c:	00 00 e0    	cp0.w     w0
    532e:	28 00 32    	bra       Z, 0x5380 <.L205>
        if (str_cmp(token, "DC") == 0) {
    5330:	01 56 29    	mov.w     #0x9560, w1
    5332:	1e 00 78    	mov.w     [w14], w0
    5334:	0b fa 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    5336:	00 00 e0    	cp0.w     w0
    5338:	03 00 3a    	bra       NZ, 0x5340 <.L207>
            set_shape(DC);
    533a:	00 00 eb    	clr.w     w0
    533c:	ed 0e 07    	rcall     0x7118 <_set_shape> <.LFB8> <.LFE7>
    533e:	20 00 37    	bra       0x5380 <.L205>

00005340 <.L207>:
        } else if (str_cmp(token, "SIN") == 0) {
    5340:	31 56 29    	mov.w     #0x9563, w1
    5342:	1e 00 78    	mov.w     [w14], w0
    5344:	03 fa 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    5346:	00 00 e0    	cp0.w     w0
    5348:	03 00 3a    	bra       NZ, 0x5350 <.L208>
            set_shape(SIN);
    534a:	10 00 20    	mov.w     #0x1, w0
    534c:	e5 0e 07    	rcall     0x7118 <_set_shape> <.LFB8> <.LFE7>
    534e:	18 00 37    	bra       0x5380 <.L205>

00005350 <.L208>:
        } else if (str_cmp(token, "SQUARE") == 0) {
    5350:	71 56 29    	mov.w     #0x9567, w1
    5352:	1e 00 78    	mov.w     [w14], w0
    5354:	fb f9 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    5356:	00 00 e0    	cp0.w     w0
    5358:	03 00 3a    	bra       NZ, 0x5360 <.L209>
            set_shape(SQUARE);
    535a:	20 00 20    	mov.w     #0x2, w0
    535c:	dd 0e 07    	rcall     0x7118 <_set_shape> <.LFB8> <.LFE7>
    535e:	10 00 37    	bra       0x5380 <.L205>

00005360 <.L209>:
        } else if (str_cmp(token, "TRIANGLE") == 0) {
    5360:	e1 56 29    	mov.w     #0x956e, w1
    5362:	1e 00 78    	mov.w     [w14], w0
    5364:	f3 f9 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    5366:	00 00 e0    	cp0.w     w0
    5368:	03 00 3a    	bra       NZ, 0x5370 <.L210>
            set_shape(TRIANGLE);
    536a:	30 00 20    	mov.w     #0x3, w0
    536c:	d5 0e 07    	rcall     0x7118 <_set_shape> <.LFB8> <.LFE7>
    536e:	08 00 37    	bra       0x5380 <.L205>

00005370 <.L210>:
        } else if (str2hex(token, &val) == 0) {
    5370:	64 00 47    	add.w     w14, #0x4, w0
    5372:	80 00 78    	mov.w     w0, w1
    5374:	1e 00 78    	mov.w     [w14], w0
    5376:	f0 f8 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5378:	00 00 e0    	cp0.w     w0
    537a:	02 00 3a    	bra       NZ, 0x5380 <.L205>
            set_shape(val);
    537c:	2e 00 90    	mov.w     [w14+4], w0
    537e:	cc 0e 07    	rcall     0x7118 <_set_shape> <.LFB8> <.LFE7>

00005380 <.L205>:
        }
    }
}
    5380:	00 80 fa    	ulnk      
    5382:	00 00 06    	return    

00005384 <_shapeQ_handler>:

void shapeQ_handler(char *args) {
    5384:	08 00 fa    	lnk       #0x8
    5386:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(get_shape(), str);
    5388:	0b 0f 07    	rcall     0x71a0 <_get_shape> <.LFB9> <.LFE8>
    538a:	8e 00 78    	mov.w     w14, w1
    538c:	aa f9 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    538e:	0e 00 78    	mov.w     w14, w0
    5390:	25 0d 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    5392:	b0 55 29    	mov.w     #0x955b, w0
    5394:	23 0d 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    5396:	00 80 fa    	ulnk      
    5398:	00 00 06    	return    

0000539a <_freq_handler>:

void freq_handler(char *args) {
    539a:	0a 00 fa    	lnk       #0xa
    539c:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val_l, val_h;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    539e:	00 00 eb    	clr.w     w0
    53a0:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    53a2:	66 00 47    	add.w     w14, #0x6, w0
    53a4:	00 01 78    	mov.w     w0, w2
    53a6:	81 55 29    	mov.w     #0x9558, w1
    53a8:	4e 00 90    	mov.w     [w14+8], w0
    53aa:	2b fa 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    53ac:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    53ae:	1e 00 78    	mov.w     [w14], w0
    53b0:	00 00 e0    	cp0.w     w0
    53b2:	11 00 32    	bra       Z, 0x53d6 <.L212>
    53b4:	3e 00 90    	mov.w     [w14+6], w0
    53b6:	00 00 e0    	cp0.w     w0
    53b8:	0e 00 32    	bra       Z, 0x53d6 <.L212>
        if ((str2hex(arg1, &val_l) == 0) && (str2hex(arg2, &val_h) == 0)) {
    53ba:	0e 80 e8    	inc2.w    w14, w0
    53bc:	80 00 78    	mov.w     w0, w1
    53be:	1e 00 78    	mov.w     [w14], w0
    53c0:	cb f8 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    53c2:	00 00 e0    	cp0.w     w0
    53c4:	08 00 3a    	bra       NZ, 0x53d6 <.L212>
    53c6:	3e 00 90    	mov.w     [w14+6], w0
    53c8:	e4 00 47    	add.w     w14, #0x4, w1
    53ca:	c6 f8 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    53cc:	00 00 e0    	cp0.w     w0
    53ce:	03 00 3a    	bra       NZ, 0x53d6 <.L212>
            set_freq(val_l, val_h);
    53d0:	ae 00 90    	mov.w     [w14+4], w1
    53d2:	1e 00 90    	mov.w     [w14+2], w0
    53d4:	e9 0e 07    	rcall     0x71a8 <_set_freq> <.LFB10> <.LFE9>

000053d6 <.L212>:
        }
    }
}
    53d6:	00 80 fa    	ulnk      
    53d8:	00 00 06    	return    

000053da <_freqQ_handler>:

void freqQ_handler(char *args) {
    53da:	08 00 fa    	lnk       #0x8
    53dc:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(get_freq_l(), str);
    53de:	09 0f 07    	rcall     0x71f2 <_get_freq_l> <.LFB11> <.LFE10>
    53e0:	8e 00 78    	mov.w     w14, w1
    53e2:	7f f9 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    53e4:	0e 00 78    	mov.w     w14, w0
    53e6:	fa 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_putc(',');
    53e8:	c0 c2 b3    	mov.b     #0x2c, w0
    53ea:	c1 0c 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    hex2str_alt(get_freq_h(), str);
    53ec:	06 0f 07    	rcall     0x71fa <_get_freq_h> <.LFB12> <.LFE11>
    53ee:	8e 00 78    	mov.w     w14, w1
    53f0:	78 f9 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    53f2:	0e 00 78    	mov.w     w14, w0
    53f4:	f3 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    53f6:	b0 55 29    	mov.w     #0x955b, w0
    53f8:	f1 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    53fa:	00 80 fa    	ulnk      
    53fc:	00 00 06    	return    

000053fe <_phase_handler>:

void phase_handler(char *args) {
    53fe:	08 00 fa    	lnk       #0x8
    5400:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    5402:	00 00 eb    	clr.w     w0
    5404:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    5406:	0e 80 e8    	inc2.w    w14, w0
    5408:	00 01 78    	mov.w     w0, w2
    540a:	81 55 29    	mov.w     #0x9558, w1
    540c:	3e 00 90    	mov.w     [w14+6], w0
    540e:	f9 f9 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5410:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    5412:	1e 00 78    	mov.w     [w14], w0
    5414:	00 00 e0    	cp0.w     w0
    5416:	08 00 32    	bra       Z, 0x5428 <.L215>
    5418:	64 00 47    	add.w     w14, #0x4, w0
    541a:	80 00 78    	mov.w     w0, w1
    541c:	1e 00 78    	mov.w     [w14], w0
    541e:	9c f8 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5420:	00 00 e0    	cp0.w     w0
    5422:	02 00 3a    	bra       NZ, 0x5428 <.L215>
        set_phase(val);
    5424:	2e 00 90    	mov.w     [w14+4], w0
    5426:	ed 0e 07    	rcall     0x7202 <_set_phase> <.LFB13> <.LFE12>

00005428 <.L215>:
    }
}
    5428:	00 80 fa    	ulnk      
    542a:	00 00 06    	return    

0000542c <_phaseQ_handler>:

void phaseQ_handler(char *args) {
    542c:	08 00 fa    	lnk       #0x8
    542e:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(get_phase(), str);
    5430:	0a 0f 07    	rcall     0x7246 <_get_phase> <.LFB14> <.LFE13>
    5432:	8e 00 78    	mov.w     w14, w1
    5434:	56 f9 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    5436:	0e 00 78    	mov.w     w14, w0
    5438:	d1 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    543a:	b0 55 29    	mov.w     #0x955b, w0
    543c:	cf 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    543e:	00 80 fa    	ulnk      
    5440:	00 00 06    	return    

00005442 <_amp_handler>:

void amp_handler(char *args) {
    5442:	08 00 fa    	lnk       #0x8
    5444:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    5446:	00 00 eb    	clr.w     w0
    5448:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    544a:	0e 80 e8    	inc2.w    w14, w0
    544c:	00 01 78    	mov.w     w0, w2
    544e:	81 55 29    	mov.w     #0x9558, w1
    5450:	3e 00 90    	mov.w     [w14+6], w0
    5452:	d7 f9 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5454:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    5456:	1e 00 78    	mov.w     [w14], w0
    5458:	00 00 e0    	cp0.w     w0
    545a:	08 00 32    	bra       Z, 0x546c <.L218>
    545c:	64 00 47    	add.w     w14, #0x4, w0
    545e:	80 00 78    	mov.w     w0, w1
    5460:	1e 00 78    	mov.w     [w14], w0
    5462:	7a f8 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5464:	00 00 e0    	cp0.w     w0
    5466:	02 00 3a    	bra       NZ, 0x546c <.L218>
        set_amplitude(val);
    5468:	2e 00 90    	mov.w     [w14+4], w0
    546a:	f1 0e 07    	rcall     0x724e <_set_amplitude> <.LFB15> <.LFE14>

0000546c <.L218>:
    }
}
    546c:	00 80 fa    	ulnk      
    546e:	00 00 06    	return    

00005470 <_ampQ_handler>:

void ampQ_handler(char *args) {
    5470:	08 00 fa    	lnk       #0x8
    5472:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(get_amplitude(), str);
    5474:	f6 0e 07    	rcall     0x7262 <_get_amplitude> <.LFB16> <.LFE15>
    5476:	8e 00 78    	mov.w     w14, w1
    5478:	34 f9 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    547a:	0e 00 78    	mov.w     w14, w0
    547c:	af 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    547e:	b0 55 29    	mov.w     #0x955b, w0
    5480:	ad 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    5482:	00 80 fa    	ulnk      
    5484:	00 00 06    	return    

00005486 <_offset_handler>:

void offset_handler(char *args) {
    5486:	0a 00 fa    	lnk       #0xa
    5488:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t i, val;
    char *command, *remainder;

    remainder = (char *)NULL;
    548a:	00 00 eb    	clr.w     w0
    548c:	30 07 98    	mov.w     w0, [w14+6]
    command = str_tok_r(args, ":, ", &remainder);
    548e:	66 00 47    	add.w     w14, #0x6, w0
    5490:	00 01 78    	mov.w     w0, w2
    5492:	e1 53 29    	mov.w     #0x953e, w1
    5494:	4e 00 90    	mov.w     [w14+8], w0
    5496:	b5 f9 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5498:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    549a:	1e 00 90    	mov.w     [w14+2], w0
    549c:	00 00 e0    	cp0.w     w0
    549e:	25 00 32    	bra       Z, 0x54ea <.L221>
        for (i = 0; i < WAVEGEN_OFFSET_TABLE_ENTRIES; i++) {
    54a0:	00 00 eb    	clr.w     w0
    54a2:	00 0f 78    	mov.w     w0, [w14]
    54a4:	14 00 37    	bra       0x54ce <.L223>

000054a6 <.L226>:
            if (str_cmp(command, wavegen_offset_table[i].command) == 0) {
    54a6:	1e 00 78    	mov.w     [w14], w0
    54a8:	c2 00 dd    	sl.w      w0, #0x2, w1
    54aa:	e0 37 22    	mov.w     #0x237e, w0
    54ac:	00 80 40    	add.w     w1, w0, w0
    54ae:	10 00 78    	mov.w     [w0], w0
    54b0:	80 00 78    	mov.w     w0, w1
    54b2:	1e 00 90    	mov.w     [w14+2], w0
    54b4:	4b f9 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    54b6:	00 00 e0    	cp0.w     w0
    54b8:	09 00 3a    	bra       NZ, 0x54cc <.L224>
                wavegen_offset_table[i].handler(remainder);
    54ba:	1e 00 78    	mov.w     [w14], w0
    54bc:	42 00 dd    	sl.w      w0, #0x2, w0
    54be:	80 80 e8    	inc2.w    w0, w1
    54c0:	e0 37 22    	mov.w     #0x237e, w0
    54c2:	00 80 40    	add.w     w1, w0, w0
    54c4:	90 00 78    	mov.w     [w0], w1
    54c6:	3e 00 90    	mov.w     [w14+6], w0
    54c8:	01 00 01    	call      w1
                break;
    54ca:	04 00 37    	bra       0x54d4 <.L225>

000054cc <.L224>:
    54cc:	1e 0f e8    	inc.w     [w14], [w14]

000054ce <.L223>:
    54ce:	1e 00 78    	mov.w     [w14], w0
    54d0:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    54d2:	e9 ff 36    	bra       LEU, 0x54a6 <.L226>

000054d4 <.L225>:
            }
        }
        if ((i == WAVEGEN_OFFSET_TABLE_ENTRIES) && (str2hex(command, &val) == 0)) {
    54d4:	1e 00 78    	mov.w     [w14], w0
    54d6:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    54d8:	08 00 3a    	bra       NZ, 0x54ea <.L221>
    54da:	64 00 47    	add.w     w14, #0x4, w0
    54dc:	80 00 78    	mov.w     w0, w1
    54de:	1e 00 90    	mov.w     [w14+2], w0
    54e0:	3b f8 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    54e2:	00 00 e0    	cp0.w     w0
    54e4:	02 00 3a    	bra       NZ, 0x54ea <.L221>
            set_offset(val);
    54e6:	2e 00 90    	mov.w     [w14+4], w0
    54e8:	c0 0e 07    	rcall     0x726a <_set_offset> <.LFB17> <.LFE16>

000054ea <.L221>:
        }
    }
}
    54ea:	00 80 fa    	ulnk      
    54ec:	00 00 06    	return    

000054ee <_offsetQ_handler>:

void offsetQ_handler(char *args) {
    54ee:	08 00 fa    	lnk       #0x8
    54f0:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(get_offset(), str);
    54f2:	c9 0e 07    	rcall     0x7286 <_get_offset> <.LFB18> <.LFE17>
    54f4:	8e 00 78    	mov.w     w14, w1
    54f6:	f5 f8 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    54f8:	0e 00 78    	mov.w     w14, w0
    54fa:	70 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    54fc:	b0 55 29    	mov.w     #0x955b, w0
    54fe:	6e 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    5500:	00 80 fa    	ulnk      
    5502:	00 00 06    	return    

00005504 <_sqadj_handler>:

void sqadj_handler(char *args) {
    5504:	08 00 fa    	lnk       #0x8
    5506:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    5508:	00 00 eb    	clr.w     w0
    550a:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    550c:	0e 80 e8    	inc2.w    w14, w0
    550e:	00 01 78    	mov.w     w0, w2
    5510:	81 55 29    	mov.w     #0x9558, w1
    5512:	3e 00 90    	mov.w     [w14+6], w0
    5514:	76 f9 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5516:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    5518:	1e 00 78    	mov.w     [w14], w0
    551a:	00 00 e0    	cp0.w     w0
    551c:	08 00 32    	bra       Z, 0x552e <.L228>
    551e:	64 00 47    	add.w     w14, #0x4, w0
    5520:	80 00 78    	mov.w     w0, w1
    5522:	1e 00 78    	mov.w     [w14], w0
    5524:	19 f8 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5526:	00 00 e0    	cp0.w     w0
    5528:	02 00 3a    	bra       NZ, 0x552e <.L228>
        set_sq_offset_adj(val);
    552a:	2e 00 90    	mov.w     [w14+4], w0
    552c:	b0 0e 07    	rcall     0x728e <_set_sq_offset_adj> <.LFB19> <.LFE18>

0000552e <.L228>:
    }
}
    552e:	00 80 fa    	ulnk      
    5530:	00 00 06    	return    

00005532 <_sqadjQ_handler>:

void sqadjQ_handler(char *args) {
    5532:	08 00 fa    	lnk       #0x8
    5534:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(get_sq_offset_adj(), str);
    5536:	b4 0e 07    	rcall     0x72a0 <_get_sq_offset_adj> <.LFB20> <.LFE19>
    5538:	8e 00 78    	mov.w     w14, w1
    553a:	d3 f8 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    553c:	0e 00 78    	mov.w     w14, w0
    553e:	4e 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    5540:	b0 55 29    	mov.w     #0x955b, w0
    5542:	4c 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    5544:	00 80 fa    	ulnk      
    5546:	00 00 06    	return    

00005548 <_nsqadj_handler>:

void nsqadj_handler(char *args) {
    5548:	08 00 fa    	lnk       #0x8
    554a:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    554c:	00 00 eb    	clr.w     w0
    554e:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    5550:	0e 80 e8    	inc2.w    w14, w0
    5552:	00 01 78    	mov.w     w0, w2
    5554:	81 55 29    	mov.w     #0x9558, w1
    5556:	3e 00 90    	mov.w     [w14+6], w0
    5558:	54 f9 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    555a:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    555c:	1e 00 78    	mov.w     [w14], w0
    555e:	00 00 e0    	cp0.w     w0
    5560:	08 00 32    	bra       Z, 0x5572 <.L231>
    5562:	64 00 47    	add.w     w14, #0x4, w0
    5564:	80 00 78    	mov.w     w0, w1
    5566:	1e 00 78    	mov.w     [w14], w0
    5568:	f7 f7 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    556a:	00 00 e0    	cp0.w     w0
    556c:	02 00 3a    	bra       NZ, 0x5572 <.L231>
        set_nsq_offset_adj(val);
    556e:	2e 00 90    	mov.w     [w14+4], w0
    5570:	9b 0e 07    	rcall     0x72a8 <_set_nsq_offset_adj> <.LFB21> <.LFE20>

00005572 <.L231>:
    }
}
    5572:	00 80 fa    	ulnk      
    5574:	00 00 06    	return    

00005576 <_nsqadjQ_handler>:

void nsqadjQ_handler(char *args) {
    5576:	08 00 fa    	lnk       #0x8
    5578:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(get_nsq_offset_adj(), str);
    557a:	9f 0e 07    	rcall     0x72ba <_get_nsq_offset_adj> <.LFB22> <.LFE21>
    557c:	8e 00 78    	mov.w     w14, w1
    557e:	b1 f8 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    5580:	0e 00 78    	mov.w     w14, w0
    5582:	2c 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    5584:	b0 55 29    	mov.w     #0x955b, w0
    5586:	2a 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    5588:	00 80 fa    	ulnk      
    558a:	00 00 06    	return    

0000558c <_wavegen_offset_interval_handler>:

// WAVEGEN:OFFSET commands
void wavegen_offset_interval_handler(char *args) {
    558c:	0a 00 fa    	lnk       #0xa
    558e:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    5590:	00 00 eb    	clr.w     w0
    5592:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    5594:	66 00 47    	add.w     w14, #0x6, w0
    5596:	00 01 78    	mov.w     w0, w2
    5598:	81 55 29    	mov.w     #0x9558, w1
    559a:	4e 00 90    	mov.w     [w14+8], w0
    559c:	32 f9 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    559e:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    55a0:	1e 00 78    	mov.w     [w14], w0
    55a2:	00 00 e0    	cp0.w     w0
    55a4:	11 00 32    	bra       Z, 0x55c8 <.L234>
    55a6:	3e 00 90    	mov.w     [w14+6], w0
    55a8:	00 00 e0    	cp0.w     w0
    55aa:	0e 00 32    	bra       Z, 0x55c8 <.L234>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    55ac:	0e 80 e8    	inc2.w    w14, w0
    55ae:	80 00 78    	mov.w     w0, w1
    55b0:	1e 00 78    	mov.w     [w14], w0
    55b2:	d2 f7 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    55b4:	00 00 e0    	cp0.w     w0
    55b6:	08 00 3a    	bra       NZ, 0x55c8 <.L234>
    55b8:	3e 00 90    	mov.w     [w14+6], w0
    55ba:	e4 00 47    	add.w     w14, #0x4, w1
    55bc:	cd f7 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    55be:	00 00 e0    	cp0.w     w0
    55c0:	03 00 3a    	bra       NZ, 0x55c8 <.L234>
            wavegen_offset_set_interval(val1, val2);
    55c2:	ae 00 90    	mov.w     [w14+4], w1
    55c4:	1e 00 90    	mov.w     [w14+2], w0
    55c6:	7d 0e 07    	rcall     0x72c2 <_wavegen_offset_set_interval> <.LFB23> <.LFE22>

000055c8 <.L234>:
        }
    }
}
    55c8:	00 80 fa    	ulnk      
    55ca:	00 00 06    	return    

000055cc <_wavegen_offset_intervalQ_handler>:

void wavegen_offset_intervalQ_handler(char *args) {
    55cc:	08 00 fa    	lnk       #0x8
    55ce:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(PR3, str);
    55d0:	70 08 80    	mov.w     0x10e, w0
    55d2:	8e 00 78    	mov.w     w14, w1
    55d4:	86 f8 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    55d6:	0e 00 78    	mov.w     w14, w0
    55d8:	01 0c 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_putc(',');
    55da:	c0 c2 b3    	mov.b     #0x2c, w0
    55dc:	c8 0b 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    hex2str_alt(T3CON, str);
    55de:	90 08 80    	mov.w     0x112, w0
    55e0:	8e 00 78    	mov.w     w14, w1
    55e2:	7f f8 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    55e4:	0e 00 78    	mov.w     w14, w0
    55e6:	fa 0b 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    55e8:	b0 55 29    	mov.w     #0x955b, w0
    55ea:	f8 0b 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    55ec:	00 80 fa    	ulnk      
    55ee:	00 00 06    	return    

000055f0 <_wavegen_offset_mode_handler>:

void wavegen_offset_mode_handler(char *args) {
    55f0:	08 00 fa    	lnk       #0x8
    55f2:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    55f4:	00 00 eb    	clr.w     w0
    55f6:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    55f8:	0e 80 e8    	inc2.w    w14, w0
    55fa:	00 01 78    	mov.w     w0, w2
    55fc:	e1 53 29    	mov.w     #0x953e, w1
    55fe:	3e 00 90    	mov.w     [w14+6], w0
    5600:	00 f9 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5602:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    5604:	1e 00 78    	mov.w     [w14], w0
    5606:	00 00 e0    	cp0.w     w0
    5608:	1c 00 32    	bra       Z, 0x5642 <.L237>
        if (str_cmp(token, "SINGLE") == 0) {
    560a:	71 57 29    	mov.w     #0x9577, w1
    560c:	1e 00 78    	mov.w     [w14], w0
    560e:	9e f8 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    5610:	00 00 e0    	cp0.w     w0
    5612:	03 00 3a    	bra       NZ, 0x561a <.L239>
            wavegen_offset_set_mode(0);
    5614:	00 00 eb    	clr.w     w0
    5616:	5f 0e 07    	rcall     0x72d6 <_wavegen_offset_set_mode> <.LFB24> <.LFE23>
    5618:	14 00 37    	bra       0x5642 <.L237>

0000561a <.L239>:
        } else if (str_cmp(token, "REPEAT") == 0) {
    561a:	e1 57 29    	mov.w     #0x957e, w1
    561c:	1e 00 78    	mov.w     [w14], w0
    561e:	96 f8 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    5620:	00 00 e0    	cp0.w     w0
    5622:	03 00 3a    	bra       NZ, 0x562a <.L240>
            wavegen_offset_set_mode(1);
    5624:	10 00 20    	mov.w     #0x1, w0
    5626:	57 0e 07    	rcall     0x72d6 <_wavegen_offset_set_mode> <.LFB24> <.LFE23>
    5628:	0c 00 37    	bra       0x5642 <.L237>

0000562a <.L240>:
        } else if (str2hex(token, &val) == 0) {
    562a:	64 00 47    	add.w     w14, #0x4, w0
    562c:	80 00 78    	mov.w     w0, w1
    562e:	1e 00 78    	mov.w     [w14], w0
    5630:	93 f7 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5632:	00 00 e0    	cp0.w     w0
    5634:	06 00 3a    	bra       NZ, 0x5642 <.L237>
            wavegen_offset_set_mode((val) ? 1 : 0);
    5636:	2e 00 90    	mov.w     [w14+4], w0
    5638:	00 f0 a7    	btsc.w    w0, #0xf
    563a:	00 00 ea    	neg.w     w0, w0
    563c:	00 00 ea    	neg.w     w0, w0
    563e:	4f 00 de    	lsr.w     w0, #0xf, w0
    5640:	4a 0e 07    	rcall     0x72d6 <_wavegen_offset_set_mode> <.LFB24> <.LFE23>

00005642 <.L237>:
        }
    }
}
    5642:	00 80 fa    	ulnk      
    5644:	00 00 06    	return    

00005646 <_wavegen_offset_modeQ_handler>:

void wavegen_offset_modeQ_handler(char *args) {
    5646:	02 00 fa    	lnk       #0x2
    5648:	00 0f 78    	mov.w     w0, [w14]
    if (wavegen_offset_get_mode() == 1)
    564a:	4f 0e 07    	rcall     0x72ea <_wavegen_offset_get_mode> <.LFB25> <.LFE24>
    564c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    564e:	03 00 3a    	bra       NZ, 0x5656 <.L242>
        cdc_puts("1\r\n");
    5650:	00 55 29    	mov.w     #0x9550, w0
    5652:	c4 0b 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    5654:	02 00 37    	bra       0x565a <.L241>

00005656 <.L242>:
    else
        cdc_puts("0\r\n");
    5656:	40 55 29    	mov.w     #0x9554, w0
    5658:	c1 0b 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

0000565a <.L241>:
}
    565a:	00 80 fa    	ulnk      
    565c:	00 00 06    	return    

0000565e <_wavegen_offset_start_handler>:

void wavegen_offset_start_handler(char *args) {
    565e:	02 00 fa    	lnk       #0x2
    5660:	00 0f 78    	mov.w     w0, [w14]
    wavegen_offset_start();
    5662:	47 0e 07    	rcall     0x72f2 <_wavegen_offset_start> <.LFB26> <.LFE25>
}
    5664:	00 80 fa    	ulnk      
    5666:	00 00 06    	return    

00005668 <_wavegen_offset_stop_handler>:

void wavegen_offset_stop_handler(char *args) {
    5668:	02 00 fa    	lnk       #0x2
    566a:	00 0f 78    	mov.w     w0, [w14]
    wavegen_offset_stop();
    566c:	5b 0e 07    	rcall     0x7324 <_wavegen_offset_stop> <.LFB27> <.LFE26>
}
    566e:	00 80 fa    	ulnk      
    5670:	00 00 06    	return    

00005672 <_wavegen_offset_sweepQ_handler>:

void wavegen_offset_sweepQ_handler(char *args) {
    5672:	08 00 fa    	lnk       #0x8
    5674:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    if (T3CONbits.TON == 1)
    5676:	91 08 80    	mov.w     0x112, w1
    5678:	00 00 28    	mov.w     #0x8000, w0
    567a:	00 80 60    	and.w     w1, w0, w0
    567c:	00 00 e0    	cp0.w     w0
    567e:	03 00 32    	bra       Z, 0x5686 <.L247>
        cdc_puts("1,");
    5680:	50 58 29    	mov.w     #0x9585, w0
    5682:	ac 0b 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    5684:	02 00 37    	bra       0x568a <.L248>

00005686 <.L247>:
    else
        cdc_puts("0,");
    5686:	80 58 29    	mov.w     #0x9588, w0
    5688:	a9 0b 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

0000568a <.L248>:
    hex2str_alt(wavegen_offset_get_samples_left(), str);
    568a:	53 0e 07    	rcall     0x7332 <_wavegen_offset_get_samples_left> <.LFB28> <.LFE27>
    568c:	8e 00 78    	mov.w     w14, w1
    568e:	29 f8 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
    cdc_puts(str);
    5690:	0e 00 78    	mov.w     w14, w0
    5692:	a4 0b 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
    cdc_puts("\r\n");
    5694:	b0 55 29    	mov.w     #0x955b, w0
    5696:	a2 0b 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
}
    5698:	00 80 fa    	ulnk      
    569a:	00 00 06    	return    

0000569c <_flash_handler>:

// FLASH commands
void flash_handler(char *args) {
    569c:	08 00 fa    	lnk       #0x8
    569e:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    56a0:	00 00 eb    	clr.w     w0
    56a2:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    56a4:	64 00 47    	add.w     w14, #0x4, w0
    56a6:	00 01 78    	mov.w     w0, w2
    56a8:	e1 53 29    	mov.w     #0x953e, w1
    56aa:	3e 00 90    	mov.w     [w14+6], w0
    56ac:	aa f8 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    56ae:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    56b0:	1e 00 90    	mov.w     [w14+2], w0
    56b2:	00 00 e0    	cp0.w     w0
    56b4:	1a 00 32    	bra       Z, 0x56ea <.L249>
        for (i = 0; i < FLASH_TABLE_ENTRIES; i++) {
    56b6:	00 00 eb    	clr.w     w0
    56b8:	00 0f 78    	mov.w     w0, [w14]
    56ba:	14 00 37    	bra       0x56e4 <.L251>

000056bc <.L253>:
            if (str_cmp(command, flash_table[i].command) == 0) {
    56bc:	1e 00 78    	mov.w     [w14], w0
    56be:	c2 00 dd    	sl.w      w0, #0x2, w1
    56c0:	a0 39 22    	mov.w     #0x239a, w0
    56c2:	00 80 40    	add.w     w1, w0, w0
    56c4:	10 00 78    	mov.w     [w0], w0
    56c6:	80 00 78    	mov.w     w0, w1
    56c8:	1e 00 90    	mov.w     [w14+2], w0
    56ca:	40 f8 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    56cc:	00 00 e0    	cp0.w     w0
    56ce:	09 00 3a    	bra       NZ, 0x56e2 <.L252>
                flash_table[i].handler(remainder);
    56d0:	1e 00 78    	mov.w     [w14], w0
    56d2:	42 00 dd    	sl.w      w0, #0x2, w0
    56d4:	80 80 e8    	inc2.w    w0, w1
    56d6:	a0 39 22    	mov.w     #0x239a, w0
    56d8:	00 80 40    	add.w     w1, w0, w0
    56da:	90 00 78    	mov.w     [w0], w1
    56dc:	2e 00 90    	mov.w     [w14+4], w0
    56de:	01 00 01    	call      w1
                break;
    56e0:	04 00 37    	bra       0x56ea <.L249>

000056e2 <.L252>:
    56e2:	1e 0f e8    	inc.w     [w14], [w14]

000056e4 <.L251>:
    56e4:	1e 00 78    	mov.w     [w14], w0
    56e6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    56e8:	e9 ff 36    	bra       LEU, 0x56bc <.L253>

000056ea <.L249>:
            }
        }
    }
}
    56ea:	00 80 fa    	ulnk      
    56ec:	00 00 06    	return    

000056ee <_flash_erase_handler>:

void flash_erase_handler(char *args) {
    56ee:	0a 00 fa    	lnk       #0xa
    56f0:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    56f2:	00 00 eb    	clr.w     w0
    56f4:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    56f6:	66 00 47    	add.w     w14, #0x6, w0
    56f8:	00 01 78    	mov.w     w0, w2
    56fa:	81 55 29    	mov.w     #0x9558, w1
    56fc:	4e 00 90    	mov.w     [w14+8], w0
    56fe:	81 f8 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5700:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    5702:	1e 00 78    	mov.w     [w14], w0
    5704:	00 00 e0    	cp0.w     w0
    5706:	26 00 32    	bra       Z, 0x5754 <.L254>
    5708:	3e 00 90    	mov.w     [w14+6], w0
    570a:	00 00 e0    	cp0.w     w0
    570c:	23 00 32    	bra       Z, 0x5754 <.L254>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    570e:	0e 80 e8    	inc2.w    w14, w0
    5710:	80 00 78    	mov.w     w0, w1
    5712:	1e 00 78    	mov.w     [w14], w0
    5714:	21 f7 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5716:	00 00 e0    	cp0.w     w0
    5718:	1d 00 3a    	bra       NZ, 0x5754 <.L254>
    571a:	3e 00 90    	mov.w     [w14+6], w0
    571c:	e4 00 47    	add.w     w14, #0x4, w1
    571e:	1c f7 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5720:	00 00 e0    	cp0.w     w0
    5722:	18 00 3a    	bra       NZ, 0x5754 <.L254>
            NVMCON = 0x4042;                // set up NVMCON to erase a page of program memory
    5724:	20 04 24    	mov.w     #0x4042, w0
    5726:	00 3b 88    	mov.w     w0, 0x760
            __asm__("push _TBLPAG");
    5728:	54 00 f8    	push      0x54
            TBLPAG = val1;
    572a:	1e 00 90    	mov.w     [w14+2], w0
    572c:	a0 02 88    	mov.w     w0, 0x54
            __builtin_tblwtl(val2, 0x0000);
    572e:	2e 00 90    	mov.w     [w14+4], w0
    5730:	80 00 eb    	clr.w     w1
    5732:	01 08 bb    	tblwtl.w  w1, [w0]
            __asm__("disi #16");            // disable interrupts for 16 cycles
    5734:	10 00 fc    	disi      #0x10
            __builtin_write_NVM();          // issue the unlock sequence and perform the write
    5736:	50 05 20    	mov.w     #0x55, w0
    5738:	30 3b 88    	mov.w     w0, 0x766
    573a:	a0 0a 20    	mov.w     #0xaa, w0
    573c:	30 3b 88    	mov.w     w0, 0x766
    573e:	61 e7 a8    	bset.b    0x761, #0x7
	...

00005746 <.L256>:
            while (NVMCONbits.WR == 1) {}   // wait until the write is complete
    5746:	01 3b 80    	mov.w     0x760, w1
    5748:	00 00 28    	mov.w     #0x8000, w0
    574a:	00 80 60    	and.w     w1, w0, w0
    574c:	00 00 e0    	cp0.w     w0
    574e:	fb ff 3a    	bra       NZ, 0x5746 <.L256>
            NVMCONbits.WREN = 0;            // disable further writes to program memory
    5750:	61 c7 a9    	bclr.b    0x761, #0x6
            __asm__("pop _TBLPAG");
    5752:	54 00 f9    	pop       0x54

00005754 <.L254>:
        }
    }
}
    5754:	00 80 fa    	ulnk      
    5756:	00 00 06    	return    

00005758 <_flash_read_handler>:

void flash_read_handler(char *args) {
    5758:	14 00 fa    	lnk       #0x14
    575a:	10 0f 98    	mov.w     w0, [w14+18]
    uint16_t val1, val2, val3;
    char *arg, *remainder;
    char str[5];
    WORD temp;

    remainder = (char *)NULL;
    575c:	00 00 eb    	clr.w     w0
    575e:	40 07 98    	mov.w     w0, [w14+8]
    arg = str_tok_r(args, ", ", &remainder);
    5760:	68 00 47    	add.w     w14, #0x8, w0
    5762:	00 01 78    	mov.w     w0, w2
    5764:	81 55 29    	mov.w     #0x9558, w1
    5766:	1e 08 90    	mov.w     [w14+18], w0
    5768:	4c f8 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    576a:	00 0f 78    	mov.w     w0, [w14]
    if (str2hex(arg, &val1) != 0)
    576c:	0e 80 e8    	inc2.w    w14, w0
    576e:	80 00 78    	mov.w     w0, w1
    5770:	1e 00 78    	mov.w     [w14], w0
    5772:	f2 f6 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5774:	00 00 e0    	cp0.w     w0
    5776:	57 00 3a    	bra       NZ, 0x5826 <.L266>
        return;
    arg = str_tok_r((char *)NULL, ", ", &remainder);
    5778:	68 00 47    	add.w     w14, #0x8, w0
    577a:	00 01 78    	mov.w     w0, w2
    577c:	81 55 29    	mov.w     #0x9558, w1
    577e:	00 00 eb    	clr.w     w0
    5780:	40 f8 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5782:	00 0f 78    	mov.w     w0, [w14]
    if (str2hex(arg, &val2) != 0)
    5784:	64 00 47    	add.w     w14, #0x4, w0
    5786:	80 00 78    	mov.w     w0, w1
    5788:	1e 00 78    	mov.w     [w14], w0
    578a:	e6 f6 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    578c:	00 00 e0    	cp0.w     w0
    578e:	4d 00 3a    	bra       NZ, 0x582a <.L267>
        return;
    arg = str_tok_r((char *)NULL, ", ", &remainder);
    5790:	68 00 47    	add.w     w14, #0x8, w0
    5792:	00 01 78    	mov.w     w0, w2
    5794:	81 55 29    	mov.w     #0x9558, w1
    5796:	00 00 eb    	clr.w     w0
    5798:	34 f8 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    579a:	00 0f 78    	mov.w     w0, [w14]
    if (str2hex(arg, &val3) != 0)
    579c:	66 00 47    	add.w     w14, #0x6, w0
    579e:	80 00 78    	mov.w     w0, w1
    57a0:	1e 00 78    	mov.w     [w14], w0
    57a2:	da f6 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    57a4:	00 00 e0    	cp0.w     w0
    57a6:	43 00 3a    	bra       NZ, 0x582e <.L268>
        return;

    __asm__("push _TBLPAG");
    57a8:	54 00 f8    	push      0x54
    TBLPAG = val1;
    57aa:	1e 00 90    	mov.w     [w14+2], w0
    57ac:	a0 02 88    	mov.w     w0, 0x54
    for (val1 = 0; val1 < val3; val2 += 2) {
    57ae:	00 00 eb    	clr.w     w0
    57b0:	10 07 98    	mov.w     w0, [w14+2]
    57b2:	33 00 37    	bra       0x581a <.L262>

000057b4 <.L265>:
        temp.w = __builtin_tblrdl(val2);
    57b4:	2e 00 90    	mov.w     [w14+4], w0
    57b6:	10 00 ba    	tblrdl.w  [w0], w0
    57b8:	00 0f 98    	mov.w     w0, [w14+16]
        hex2str_alt(temp.b[0], str);
    57ba:	0e 50 90    	mov.b     [w14+16], w0
    57bc:	00 80 fb    	ze        w0, w0
    57be:	ea 00 47    	add.w     w14, #0xa, w1
    57c0:	90 f7 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    57c2:	6a 00 47    	add.w     w14, #0xa, w0
    57c4:	0b 0b 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        cdc_putc(',');
    57c6:	c0 c2 b3    	mov.b     #0x2c, w0
    57c8:	d2 0a 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
        hex2str_alt(temp.b[1], str);
    57ca:	1e 50 90    	mov.b     [w14+17], w0
    57cc:	00 80 fb    	ze        w0, w0
    57ce:	ea 00 47    	add.w     w14, #0xa, w1
    57d0:	88 f7 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    57d2:	6a 00 47    	add.w     w14, #0xa, w0
    57d4:	03 0b 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        cdc_putc(',');
    57d6:	c0 c2 b3    	mov.b     #0x2c, w0
    57d8:	ca 0a 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
        temp.w = __builtin_tblrdh(val2);
    57da:	2e 00 90    	mov.w     [w14+4], w0
    57dc:	10 80 ba    	tblrdh.w  [w0], w0
    57de:	00 0f 98    	mov.w     w0, [w14+16]
        hex2str_alt(temp.b[0], str);
    57e0:	0e 50 90    	mov.b     [w14+16], w0
    57e2:	00 80 fb    	ze        w0, w0
    57e4:	ea 00 47    	add.w     w14, #0xa, w1
    57e6:	7d f7 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    57e8:	6a 00 47    	add.w     w14, #0xa, w0
    57ea:	f8 0a 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        cdc_putc(',');
    57ec:	c0 c2 b3    	mov.b     #0x2c, w0
    57ee:	bf 0a 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
        hex2str_alt(temp.b[1], str);
    57f0:	1e 50 90    	mov.b     [w14+17], w0
    57f2:	00 80 fb    	ze        w0, w0
    57f4:	ea 00 47    	add.w     w14, #0xa, w1
    57f6:	75 f7 07    	rcall     0x46e2 <_hex2str_alt> <.LFB3> <.LFE2>
        cdc_puts(str);
    57f8:	6a 00 47    	add.w     w14, #0xa, w0
    57fa:	f0 0a 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>
        val1 += 4;
    57fc:	1e 00 90    	mov.w     [w14+2], w0
    57fe:	64 00 40    	add.w     w0, #0x4, w0
    5800:	10 07 98    	mov.w     w0, [w14+2]
        if (val1 < val3)
    5802:	9e 00 90    	mov.w     [w14+2], w1
    5804:	3e 00 90    	mov.w     [w14+6], w0
    5806:	80 8f 50    	sub.w     w1, w0, [w15]
    5808:	03 00 31    	bra       C, 0x5810 <.L263>
            cdc_putc(',');
    580a:	c0 c2 b3    	mov.b     #0x2c, w0
    580c:	b0 0a 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    580e:	02 00 37    	bra       0x5814 <.L264>

00005810 <.L263>:
        else
            cdc_puts("\r\n");
    5810:	b0 55 29    	mov.w     #0x955b, w0
    5812:	e4 0a 07    	rcall     0x6ddc <_cdc_puts> <.LFB9> <.LFE8>

00005814 <.L264>:
    5814:	2e 00 90    	mov.w     [w14+4], w0
    5816:	00 80 e8    	inc2.w    w0, w0
    5818:	20 07 98    	mov.w     w0, [w14+4]

0000581a <.L262>:
    581a:	9e 00 90    	mov.w     [w14+2], w1
    581c:	3e 00 90    	mov.w     [w14+6], w0
    581e:	80 8f 50    	sub.w     w1, w0, [w15]
    5820:	c9 ff 39    	bra       NC, 0x57b4 <.L265>
    }
    __asm__("pop _TBLPAG");                
    5822:	54 00 f9    	pop       0x54
    5824:	05 00 37    	bra       0x5830 <.L257>

00005826 <.L266>:
    5826:	00 00 00    	nop       
    5828:	03 00 37    	bra       0x5830 <.L257>

0000582a <.L267>:
    582a:	00 00 00    	nop       
    582c:	01 00 37    	bra       0x5830 <.L257>

0000582e <.L268>:
    582e:	00 00 00    	nop       

00005830 <.L257>:
}
    5830:	00 80 fa    	ulnk      
    5832:	00 00 06    	return    

00005834 <_flash_write_handler>:

void flash_write_handler(char *args) {
    5834:	0e 00 fa    	lnk       #0xe
    5836:	60 07 98    	mov.w     w0, [w14+12]
    uint16_t val1, val2, i;
    char *arg, *remainder;
    WORD temp;

    remainder = (char *)NULL;
    5838:	00 00 eb    	clr.w     w0
    583a:	40 07 98    	mov.w     w0, [w14+8]
    arg = str_tok_r(args, ", ", &remainder);
    583c:	68 00 47    	add.w     w14, #0x8, w0
    583e:	00 01 78    	mov.w     w0, w2
    5840:	81 55 29    	mov.w     #0x9558, w1
    5842:	6e 00 90    	mov.w     [w14+12], w0
    5844:	de f7 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5846:	10 07 98    	mov.w     w0, [w14+2]
    if (str2hex(arg, &val1) != 0)
    5848:	64 00 47    	add.w     w14, #0x4, w0
    584a:	80 00 78    	mov.w     w0, w1
    584c:	1e 00 90    	mov.w     [w14+2], w0
    584e:	84 f6 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5850:	00 00 e0    	cp0.w     w0
    5852:	98 00 3a    	bra       NZ, 0x5984 <.L290>
        return;

    arg = str_tok_r((char *)NULL, ", ", &remainder);
    5854:	68 00 47    	add.w     w14, #0x8, w0
    5856:	00 01 78    	mov.w     w0, w2
    5858:	81 55 29    	mov.w     #0x9558, w1
    585a:	00 00 eb    	clr.w     w0
    585c:	d2 f7 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    585e:	10 07 98    	mov.w     w0, [w14+2]
    if (str2hex(arg, &val2) != 0)
    5860:	66 00 47    	add.w     w14, #0x6, w0
    5862:	80 00 78    	mov.w     w0, w1
    5864:	1e 00 90    	mov.w     [w14+2], w0
    5866:	78 f6 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5868:	00 00 e0    	cp0.w     w0
    586a:	8e 00 3a    	bra       NZ, 0x5988 <.L291>
        return;

    NVMCON = 0x4001;                // set up NVMCON to program a row of program memory
    586c:	10 00 24    	mov.w     #0x4001, w0
    586e:	00 3b 88    	mov.w     w0, 0x760
    __asm__("push _TBLPAG");        // save the value of TBLPAG
    5870:	54 00 f8    	push      0x54
    TBLPAG = val1;
    5872:	2e 00 90    	mov.w     [w14+4], w0
    5874:	a0 02 88    	mov.w     w0, 0x54
    val1 = val2 & 0xFFF8;
    5876:	be 00 90    	mov.w     [w14+6], w1
    5878:	80 ff 2f    	mov.w     #0xfff8, w0
    587a:	00 80 60    	and.w     w1, w0, w0
    587c:	20 07 98    	mov.w     w0, [w14+4]
    for (i = 0; i < 128; i += 2) {
    587e:	00 00 eb    	clr.w     w0
    5880:	00 0f 78    	mov.w     w0, [w14]
    5882:	0a 00 37    	bra       0x5898 <.L273>

00005884 <.L274>:
        __builtin_tblwtl(val1 + i, 0xFFFF);
    5884:	2e 00 90    	mov.w     [w14+4], w0
    5886:	1e 00 40    	add.w     w0, [w14], w0
    5888:	80 80 eb    	setm.w    w1
    588a:	01 08 bb    	tblwtl.w  w1, [w0]
        __builtin_tblwth(val1 + i + 1, 0x00FF);
    588c:	2e 00 90    	mov.w     [w14+4], w0
    588e:	1e 00 40    	add.w     w0, [w14], w0
    5890:	00 00 e8    	inc.w     w0, w0
    5892:	f1 0f 20    	mov.w     #0xff, w1
    5894:	01 88 bb    	tblwth.w  w1, [w0]
    5896:	1e 8f e8    	inc2.w    [w14], [w14]

00005898 <.L273>:
    5898:	f0 07 20    	mov.w     #0x7f, w0
    589a:	9e 00 78    	mov.w     [w14], w1
    589c:	80 8f 50    	sub.w     w1, w0, [w15]
    589e:	f2 ff 36    	bra       LEU, 0x5884 <.L274>

000058a0 <.L288>:
    }

    for (;; val2 += 2) {
        arg = str_tok_r((char *)NULL, ", ", &remainder);
    58a0:	68 00 47    	add.w     w14, #0x8, w0
    58a2:	00 01 78    	mov.w     w0, w2
    58a4:	81 55 29    	mov.w     #0x9558, w1
    58a6:	00 00 eb    	clr.w     w0
    58a8:	ac f7 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    58aa:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    58ac:	1e 00 90    	mov.w     [w14+2], w0
    58ae:	00 00 e0    	cp0.w     w0
    58b0:	51 00 32    	bra       Z, 0x5954 <.L292>
            break;
        temp.b[0] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0xFF;
    58b2:	64 00 47    	add.w     w14, #0x4, w0
    58b4:	80 00 78    	mov.w     w0, w1
    58b6:	1e 00 90    	mov.w     [w14+2], w0
    58b8:	4f f6 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    58ba:	00 00 e0    	cp0.w     w0
    58bc:	03 00 3a    	bra       NZ, 0x58c4 <.L277>
    58be:	2e 00 90    	mov.w     [w14+4], w0
    58c0:	00 40 78    	mov.b     w0, w0
    58c2:	01 00 37    	bra       0x58c6 <.L278>

000058c4 <.L277>:
    58c4:	00 c0 eb    	setm.b    w0

000058c6 <.L278>:
    58c6:	20 4f 98    	mov.b     w0, [w14+10]

        arg = str_tok_r((char *)NULL, ", ", &remainder);
    58c8:	68 00 47    	add.w     w14, #0x8, w0
    58ca:	00 01 78    	mov.w     w0, w2
    58cc:	81 55 29    	mov.w     #0x9558, w1
    58ce:	00 00 eb    	clr.w     w0
    58d0:	98 f7 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    58d2:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    58d4:	1e 00 90    	mov.w     [w14+2], w0
    58d6:	00 00 e0    	cp0.w     w0
    58d8:	3f 00 32    	bra       Z, 0x5958 <.L293>
            break;
        temp.b[1] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0xFF;
    58da:	64 00 47    	add.w     w14, #0x4, w0
    58dc:	80 00 78    	mov.w     w0, w1
    58de:	1e 00 90    	mov.w     [w14+2], w0
    58e0:	3b f6 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    58e2:	00 00 e0    	cp0.w     w0
    58e4:	03 00 3a    	bra       NZ, 0x58ec <.L280>
    58e6:	2e 00 90    	mov.w     [w14+4], w0
    58e8:	00 40 78    	mov.b     w0, w0
    58ea:	01 00 37    	bra       0x58ee <.L281>

000058ec <.L280>:
    58ec:	00 c0 eb    	setm.b    w0

000058ee <.L281>:
    58ee:	30 4f 98    	mov.b     w0, [w14+11]

        __builtin_tblwtl(val2, temp.w);
    58f0:	de 00 90    	mov.w     [w14+10], w1
    58f2:	3e 00 90    	mov.w     [w14+6], w0
    58f4:	01 08 bb    	tblwtl.w  w1, [w0]

        arg = str_tok_r((char *)NULL, ", ", &remainder);
    58f6:	68 00 47    	add.w     w14, #0x8, w0
    58f8:	00 01 78    	mov.w     w0, w2
    58fa:	81 55 29    	mov.w     #0x9558, w1
    58fc:	00 00 eb    	clr.w     w0
    58fe:	81 f7 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5900:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    5902:	1e 00 90    	mov.w     [w14+2], w0
    5904:	00 00 e0    	cp0.w     w0
    5906:	2a 00 32    	bra       Z, 0x595c <.L294>
            break;
        temp.b[0] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0xFF;
    5908:	64 00 47    	add.w     w14, #0x4, w0
    590a:	80 00 78    	mov.w     w0, w1
    590c:	1e 00 90    	mov.w     [w14+2], w0
    590e:	24 f6 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5910:	00 00 e0    	cp0.w     w0
    5912:	03 00 3a    	bra       NZ, 0x591a <.L283>
    5914:	2e 00 90    	mov.w     [w14+4], w0
    5916:	00 40 78    	mov.b     w0, w0
    5918:	01 00 37    	bra       0x591c <.L284>

0000591a <.L283>:
    591a:	00 c0 eb    	setm.b    w0

0000591c <.L284>:
    591c:	20 4f 98    	mov.b     w0, [w14+10]

        arg = str_tok_r((char *)NULL, ", ", &remainder);
    591e:	68 00 47    	add.w     w14, #0x8, w0
    5920:	00 01 78    	mov.w     w0, w2
    5922:	81 55 29    	mov.w     #0x9558, w1
    5924:	00 00 eb    	clr.w     w0
    5926:	6d f7 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5928:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    592a:	1e 00 90    	mov.w     [w14+2], w0
    592c:	00 00 e0    	cp0.w     w0
    592e:	18 00 32    	bra       Z, 0x5960 <.L295>
            break;
        temp.b[1] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0x00;
    5930:	64 00 47    	add.w     w14, #0x4, w0
    5932:	80 00 78    	mov.w     w0, w1
    5934:	1e 00 90    	mov.w     [w14+2], w0
    5936:	10 f6 07    	rcall     0x4558 <_str2hex> <.L0> <.LFB0> <.LFE0> <.Letext0> <.Ltext0>
    5938:	00 00 e0    	cp0.w     w0
    593a:	03 00 3a    	bra       NZ, 0x5942 <.L286>
    593c:	2e 00 90    	mov.w     [w14+4], w0
    593e:	00 40 78    	mov.b     w0, w0
    5940:	01 00 37    	bra       0x5944 <.L287>

00005942 <.L286>:
    5942:	00 40 eb    	clr.b     w0

00005944 <.L287>:
    5944:	30 4f 98    	mov.b     w0, [w14+11]

        __builtin_tblwth(val2, temp.w);
    5946:	de 00 90    	mov.w     [w14+10], w1
    5948:	3e 00 90    	mov.w     [w14+6], w0
    594a:	01 88 bb    	tblwth.w  w1, [w0]
    594c:	3e 00 90    	mov.w     [w14+6], w0
    594e:	00 80 e8    	inc2.w    w0, w0
    5950:	30 07 98    	mov.w     w0, [w14+6]
    }
    5952:	a6 ff 37    	bra       0x58a0 <.L288>

00005954 <.L292>:
    5954:	00 00 00    	nop       
    5956:	05 00 37    	bra       0x5962 <.L276>

00005958 <.L293>:
    5958:	00 00 00    	nop       
    595a:	03 00 37    	bra       0x5962 <.L276>

0000595c <.L294>:
    595c:	00 00 00    	nop       
    595e:	01 00 37    	bra       0x5962 <.L276>

00005960 <.L295>:
    5960:	00 00 00    	nop       

00005962 <.L276>:

    __asm__("disi #16");            // disable interrupts for 16 cycles
    5962:	10 00 fc    	disi      #0x10
    __builtin_write_NVM();          // issue the unlock sequence and perform the write
    5964:	50 05 20    	mov.w     #0x55, w0
    5966:	30 3b 88    	mov.w     w0, 0x766
    5968:	a0 0a 20    	mov.w     #0xaa, w0
    596a:	30 3b 88    	mov.w     w0, 0x766
    596c:	61 e7 a8    	bset.b    0x761, #0x7
	...

00005974 <.L289>:
    while (NVMCONbits.WR == 1) {}   // wait until the write is done
    5974:	01 3b 80    	mov.w     0x760, w1
    5976:	00 00 28    	mov.w     #0x8000, w0
    5978:	00 80 60    	and.w     w1, w0, w0
    597a:	00 00 e0    	cp0.w     w0
    597c:	fb ff 3a    	bra       NZ, 0x5974 <.L289>
    NVMCONbits.WREN = 0;            // disable further writes to program memory
    597e:	61 c7 a9    	bclr.b    0x761, #0x6
    __asm__("pop _TBLPAG");         // restore original value to TBLPAG
    5980:	54 00 f9    	pop       0x54
    5982:	03 00 37    	bra       0x598a <.L269>

00005984 <.L290>:
    5984:	00 00 00    	nop       
    5986:	01 00 37    	bra       0x598a <.L269>

00005988 <.L291>:
    5988:	00 00 00    	nop       

0000598a <.L269>:
}
    598a:	00 80 fa    	ulnk      
    598c:	00 00 06    	return    

0000598e <_init_parser>:

void init_parser(void) {
    598e:	00 00 fa    	lnk       #0x0
    cmd_buffer_pos = cmd_buffer;
    5990:	00 48 22    	mov.w     #0x2480, w0
    5992:	50 43 88    	mov.w     w0, 0x86a
    cmd_buffer_left = CMD_BUFFER_LENGTH;
    5994:	00 08 20    	mov.w     #0x80, w0
    5996:	60 43 88    	mov.w     w0, 0x86c

    parser_state = parser_normal;
    5998:	40 9a 25    	mov.w     #0x59a4, w0
    599a:	20 43 88    	mov.w     w0, 0x864
    parser_last_state = (STATE_HANDLER_T)NULL;
    599c:	66 28 ef    	clr.w     0x866
    parser_task = (STATE_HANDLER_T)NULL;
    599e:	68 28 ef    	clr.w     0x868
}
    59a0:	00 80 fa    	ulnk      
    59a2:	00 00 06    	return    

000059a4 <_parser_normal>:

void parser_normal(void) {
    59a4:	08 00 fa    	lnk       #0x8
    uint8_t ch;
    uint16_t i;
    char *command, *remainder;

    if (parser_state != parser_last_state) {
    59a6:	21 43 80    	mov.w     0x864, w1
    59a8:	30 43 80    	mov.w     0x866, w0
    59aa:	80 8f 50    	sub.w     w1, w0, [w15]
    59ac:	06 00 32    	bra       Z, 0x59ba <.L298>
        parser_last_state = parser_state;
    59ae:	20 43 80    	mov.w     0x864, w0
    59b0:	30 43 88    	mov.w     w0, 0x866
        cmd_buffer_pos = cmd_buffer;
    59b2:	00 48 22    	mov.w     #0x2480, w0
    59b4:	50 43 88    	mov.w     w0, 0x86a
        cmd_buffer_left = CMD_BUFFER_LENGTH;
    59b6:	00 08 20    	mov.w     #0x80, w0
    59b8:	60 43 88    	mov.w     w0, 0x86c

000059ba <.L298>:
    }

    if (parser_task)
    59ba:	40 43 80    	mov.w     0x868, w0
    59bc:	00 00 e0    	cp0.w     w0
    59be:	02 00 32    	bra       Z, 0x59c4 <.L299>
        parser_task();
    59c0:	40 43 80    	mov.w     0x868, w0
    59c2:	00 00 01    	call      w0

000059c4 <.L299>:

    if (cdc_in_waiting() > 0) {
    59c4:	ca 09 07    	rcall     0x6d5a <_cdc_in_waiting> <.LFB5> <.LFE4>
    59c6:	00 00 e0    	cp0.w     w0
    59c8:	4a 00 32    	bra       Z, 0x5a5e <.L300>
        ch = cdc_getc();
    59ca:	ed 09 07    	rcall     0x6da6 <_cdc_getc> <.LFB8> <.LFE7>
    59cc:	20 47 98    	mov.b     w0, [w14+2]
        if (cmd_buffer_left == 1) {
    59ce:	60 43 80    	mov.w     0x86c, w0
    59d0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    59d2:	0d 00 3a    	bra       NZ, 0x59ee <.L301>
            cmd_buffer_pos = cmd_buffer;
    59d4:	00 48 22    	mov.w     #0x2480, w0
    59d6:	50 43 88    	mov.w     w0, 0x86a
            cmd_buffer_left = CMD_BUFFER_LENGTH;
    59d8:	00 08 20    	mov.w     #0x80, w0
    59da:	60 43 88    	mov.w     w0, 0x86c

            *cmd_buffer_pos++ = ch;
    59dc:	50 43 80    	mov.w     0x86a, w0
    59de:	ae 40 90    	mov.b     [w14+2], w1
    59e0:	01 48 78    	mov.b     w1, [w0]
    59e2:	00 00 e8    	inc.w     w0, w0
    59e4:	50 43 88    	mov.w     w0, 0x86a
            cmd_buffer_left--;
    59e6:	60 43 80    	mov.w     0x86c, w0
    59e8:	00 00 e9    	dec.w     w0, w0
    59ea:	60 43 88    	mov.w     w0, 0x86c
    59ec:	38 00 37    	bra       0x5a5e <.L300>

000059ee <.L301>:
        } else if (ch == '\r') {
    59ee:	2e 40 90    	mov.b     [w14+2], w0
    59f0:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    59f2:	2d 00 3a    	bra       NZ, 0x5a4e <.L302>
            *cmd_buffer_pos = '\0';
    59f4:	50 43 80    	mov.w     0x86a, w0
    59f6:	80 40 eb    	clr.b     w1
    59f8:	01 48 78    	mov.b     w1, [w0]

//            cdc_putc('[');
//            cdc_puts(cmd_buffer);
//            cdc_puts("]\r\n");

            remainder = (char *)NULL;
    59fa:	00 00 eb    	clr.w     w0
    59fc:	30 07 98    	mov.w     w0, [w14+6]
            command = str_tok_r(cmd_buffer, ":, ", &remainder);
    59fe:	66 00 47    	add.w     w14, #0x6, w0
    5a00:	00 01 78    	mov.w     w0, w2
    5a02:	e1 53 29    	mov.w     #0x953e, w1
    5a04:	00 48 22    	mov.w     #0x2480, w0
    5a06:	fd f6 07    	rcall     0x4802 <_str_tok_r> <.LFB6> <.LFE5>
    5a08:	20 07 98    	mov.w     w0, [w14+4]
            if (command) {
    5a0a:	2e 00 90    	mov.w     [w14+4], w0
    5a0c:	00 00 e0    	cp0.w     w0
    5a0e:	1a 00 32    	bra       Z, 0x5a44 <.L303>
                for (i = 0; i < ROOT_TABLE_ENTRIES; i++) {
    5a10:	00 00 eb    	clr.w     w0
    5a12:	00 0f 78    	mov.w     w0, [w14]
    5a14:	14 00 37    	bra       0x5a3e <.L304>

00005a16 <.L306>:
                    if (str_cmp(command, root_table[i].command) == 0) {
    5a16:	1e 00 78    	mov.w     [w14], w0
    5a18:	c2 00 dd    	sl.w      w0, #0x2, w1
    5a1a:	60 29 22    	mov.w     #0x2296, w0
    5a1c:	00 80 40    	add.w     w1, w0, w0
    5a1e:	10 00 78    	mov.w     [w0], w0
    5a20:	80 00 78    	mov.w     w0, w1
    5a22:	2e 00 90    	mov.w     [w14+4], w0
    5a24:	93 f6 07    	rcall     0x474c <_str_cmp> <.LFB4> <.LFE3>
    5a26:	00 00 e0    	cp0.w     w0
    5a28:	09 00 3a    	bra       NZ, 0x5a3c <.L305>
                        root_table[i].handler(remainder);
    5a2a:	1e 00 78    	mov.w     [w14], w0
    5a2c:	42 00 dd    	sl.w      w0, #0x2, w0
    5a2e:	80 80 e8    	inc2.w    w0, w1
    5a30:	60 29 22    	mov.w     #0x2296, w0
    5a32:	00 80 40    	add.w     w1, w0, w0
    5a34:	90 00 78    	mov.w     [w0], w1
    5a36:	3e 00 90    	mov.w     [w14+6], w0
    5a38:	01 00 01    	call      w1
                        break;
    5a3a:	04 00 37    	bra       0x5a44 <.L303>

00005a3c <.L305>:
    5a3c:	1e 0f e8    	inc.w     [w14], [w14]

00005a3e <.L304>:
    5a3e:	1e 00 78    	mov.w     [w14], w0
    5a40:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    5a42:	e9 ff 36    	bra       LEU, 0x5a16 <.L306>

00005a44 <.L303>:
                    }
                }
            }

            cmd_buffer_pos = cmd_buffer;
    5a44:	00 48 22    	mov.w     #0x2480, w0
    5a46:	50 43 88    	mov.w     w0, 0x86a
            cmd_buffer_left = CMD_BUFFER_LENGTH;
    5a48:	00 08 20    	mov.w     #0x80, w0
    5a4a:	60 43 88    	mov.w     w0, 0x86c
    5a4c:	08 00 37    	bra       0x5a5e <.L300>

00005a4e <.L302>:
        } else {
            *cmd_buffer_pos++ = ch;
    5a4e:	50 43 80    	mov.w     0x86a, w0
    5a50:	ae 40 90    	mov.b     [w14+2], w1
    5a52:	01 48 78    	mov.b     w1, [w0]
    5a54:	00 00 e8    	inc.w     w0, w0
    5a56:	50 43 88    	mov.w     w0, 0x86a
            cmd_buffer_left--;
    5a58:	60 43 80    	mov.w     0x86c, w0
    5a5a:	00 00 e9    	dec.w     w0, w0
    5a5c:	60 43 88    	mov.w     w0, 0x86c

00005a5e <.L300>:
        }
    }

    if (parser_state != parser_last_state) {
    5a5e:	21 43 80    	mov.w     0x864, w1
    5a60:	30 43 80    	mov.w     0x866, w0
    5a62:	80 8f 50    	sub.w     w1, w0, [w15]
    5a64:	01 00 32    	bra       Z, 0x5a68 <.L297>
        parser_task = (STATE_HANDLER_T)NULL;
    5a66:	68 28 ef    	clr.w     0x868

00005a68 <.L297>:
    }
}
    5a68:	00 80 fa    	ulnk      
    5a6a:	00 00 06    	return    

00005a6c <_usb_disable_endpoints>:
    usb_service();
}
#endif

void usb_disable_endpoints(uint8_t starting_ep) {
    5a6c:	06 00 fa    	lnk       #0x6
    5a6e:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t *U1EP;
    uint8_t ep;

    U1EP = (uint16_t *)&U1EP0;
    5a70:	a0 4a 20    	mov.w     #0x4aa, w0
    5a72:	10 07 98    	mov.w     w0, [w14+2]
    for (ep = starting_ep; ep < 16; ep++) {
    5a74:	ce 40 90    	mov.b     [w14+4], w1
    5a76:	01 4f 78    	mov.b     w1, [w14]
    5a78:	13 00 37    	bra       0x5aa0 <.L2>

00005a7a <.L3>:
        U1EP[ep] = ENDPT_DISABLED;
    5a7a:	1e 80 fb    	ze        [w14], w0
    5a7c:	00 00 40    	add.w     w0, w0, w0
    5a7e:	9e 00 90    	mov.w     [w14+2], w1
    5a80:	00 80 40    	add.w     w1, w0, w0
    5a82:	80 00 eb    	clr.w     w1
    5a84:	01 08 78    	mov.w     w1, [w0]
        USB_in_callbacks[ep] = (USB_CALLBACK_T)NULL;
    5a86:	1e 80 fb    	ze        [w14], w0
    5a88:	80 00 40    	add.w     w0, w0, w1
    5a8a:	40 3b 22    	mov.w     #0x23b4, w0
    5a8c:	00 80 40    	add.w     w1, w0, w0
    5a8e:	80 00 eb    	clr.w     w1
    5a90:	01 08 78    	mov.w     w1, [w0]
        USB_out_callbacks[ep] = (USB_CALLBACK_T)NULL;
    5a92:	1e 80 fb    	ze        [w14], w0
    5a94:	80 00 40    	add.w     w0, w0, w1
    5a96:	40 3d 22    	mov.w     #0x23d4, w0
    5a98:	00 80 40    	add.w     w1, w0, w0
    5a9a:	80 00 eb    	clr.w     w1
    5a9c:	01 08 78    	mov.w     w1, [w0]
    5a9e:	1e 4f e8    	inc.b     [w14], [w14]

00005aa0 <.L2>:
    5aa0:	1e 40 78    	mov.b     [w14], w0
    5aa2:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    5aa4:	ea ff 36    	bra       LEU, 0x5a7a <.L3>
    }
}
    5aa6:	00 80 fa    	ulnk      
    5aa8:	00 00 06    	return    

00005aaa <_usb_set_address_callback>:

void usb_set_address_callback(void) {
    5aaa:	00 00 fa    	lnk       #0x0
    switch (U1ADDR = USB_request.setup.wValue.b[0]) {
    5aac:	80 3a 22    	mov.w     #0x23a8, w0
    5aae:	10 40 78    	mov.b     [w0], w0
    5ab0:	00 80 fb    	ze        w0, w0
    5ab2:	b0 24 88    	mov.w     w0, 0x496
    5ab4:	b0 24 80    	mov.w     0x496, w0
    5ab6:	00 00 e0    	cp0.w     w0
    5ab8:	03 00 3a    	bra       NZ, 0x5ac0 <.L8>
        case 0:
            USB_USWSTAT = DEFAULT_STATE;
    5aba:	10 c0 b3    	mov.b     #0x1, w0
    5abc:	4a e8 b7    	mov.b     WREG, 0x84a
            break;
    5abe:	02 00 37    	bra       0x5ac4 <.L7>

00005ac0 <.L8>:
        default:
            USB_USWSTAT = ADDRESS_STATE;
    5ac0:	20 c0 b3    	mov.b     #0x2, w0
    5ac2:	4a e8 b7    	mov.b     WREG, 0x84a

00005ac4 <.L7>:
    }
    USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    5ac4:	00 00 eb    	clr.w     w0
    5ac6:	a0 1d 89    	mov.w     w0, 0x23b4
}
    5ac8:	00 80 fa    	ulnk      
    5aca:	00 00 06    	return    

00005acc <_init_usb>:

void init_usb(void) {
    5acc:	00 00 fa    	lnk       #0x0
    IEC5bits.USB1IE = 0;                    // disable USB interrupt
    5ace:	9e c0 a9    	bclr.b    0x9e, #0x6

    U1CONbits.PPBRST = 1;
    5ad0:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    5ad2:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    5ad4:	f0 0f 20    	mov.w     #0xff, w0
    5ad6:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    5ad8:	94 24 a9    	bclr.b    0x494, #0x1
    usb_disable_endpoints(0);               // disable all endpoints
    5ada:	00 40 eb    	clr.b     w0
    5adc:	c7 ff 07    	rcall     0x5a6c <_usb_disable_endpoints> <.L0> <.LFB0> <.LFE80> <.Letext0> <.Ltext0>
    U1EP0 = ENDPT_CONTROL;
    5ade:	d0 00 20    	mov.w     #0xd, w0
    5ae0:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    5ae2:	00 40 22    	mov.w     #0x2400, w0
    5ae4:	01 c4 b3    	mov.b     #0x40, w1
    5ae6:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    5ae8:	00 50 22    	mov.w     #0x2500, w0
    5aea:	10 20 89    	mov.w     w0, 0x2402
    BD[EP0OUT].status = UOWN | DTSEN;       // set UOWN bit (USB can write)
    5aec:	10 40 22    	mov.w     #0x2401, w0
    5aee:	81 c8 b3    	mov.b     #0x88, w1
    5af0:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    5af2:	00 54 22    	mov.w     #0x2540, w0
    5af4:	30 20 89    	mov.w     w0, 0x2406
    BD[EP0IN].status = DTSEN;               // clear UOWN bit (MCU can write)
    5af6:	50 40 22    	mov.w     #0x2405, w0
    5af8:	81 c0 b3    	mov.b     #0x8, w1
    5afa:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0;
    5afc:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0;
    5afe:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (uint16_t)BD >> 8;
    5b00:	00 40 22    	mov.w     #0x2400, w0
    5b02:	48 00 de    	lsr.w     w0, #0x8, w0
    5b04:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    5b06:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    5b08:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    5b0a:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    5b0c:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0;
    5b0e:	47 68 ef    	clr.b     0x847
    USB_USWSTAT = POWERED_STATE;
    5b10:	4a 68 ef    	clr.b     0x84a
    USB_device_status = 1;
    5b12:	10 c0 b3    	mov.b     #0x1, w0
    5b14:	48 e8 b7    	mov.b     WREG, 0x848
    USB_request.setup.bmRequestType = NO_REQUEST;
    5b16:	60 3a 22    	mov.w     #0x23a6, w0
    5b18:	80 c0 eb    	setm.b    w1
    5b1a:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    5b1c:	70 3a 22    	mov.w     #0x23a7, w0
    5b1e:	80 c0 eb    	setm.b    w1
    5b20:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    5b22:	00 00 eb    	clr.w     w0
    5b24:	80 1d 89    	mov.w     w0, 0x23b0
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    5b26:	00 00 eb    	clr.w     w0
    5b28:	90 1d 89    	mov.w     w0, 0x23b2
    while (U1CONbits.SE0) {}
    5b2a:	00 00 00    	nop       

00005b2c <.L10>:
    5b2c:	a1 24 80    	mov.w     0x494, w1
    5b2e:	00 04 20    	mov.w     #0x40, w0
    5b30:	00 80 60    	and.w     w1, w0, w0
    5b32:	00 00 e0    	cp0.w     w0
    5b34:	fb ff 3a    	bra       NZ, 0x5b2c <.L10>

#ifdef USB_INTERRUPT
    U1IE = 0xFF;
    U1EIE = 0xFF;
    IFS5bits.USB1IF = 0;
    IEC5bits.USB1IE = 1;
#endif
}
    5b36:	00 80 fa    	ulnk      
    5b38:	00 00 06    	return    

00005b3a <_usb_service>:

void usb_service(void) {
    5b3a:	04 00 fa    	lnk       #0x4
    BUFDESC *buf_desc_ptr;
    uint8_t ep;

    if (U1IRbits.UERRIF) {
    5b3c:	50 24 80    	mov.w     0x48a, w0
    5b3e:	62 00 60    	and.w     w0, #0x2, w0
    5b40:	00 00 e0    	cp0.w     w0
    5b42:	05 00 32    	bra       Z, 0x5b4e <.L12>
        U1EIR = 0xFF;                       // clear all flags in U1EIR to clear U1EIR
    5b44:	f0 0f 20    	mov.w     #0xff, w0
    5b46:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;                 // clear UERRIF
    5b48:	20 00 20    	mov.w     #0x2, w0
    5b4a:	50 24 88    	mov.w     w0, 0x48a
    5b4c:	ba 00 37    	bra       0x5cc2 <.L13>

00005b4e <.L12>:
    } else if (U1IRbits.SOFIF) {
    5b4e:	50 24 80    	mov.w     0x48a, w0
    5b50:	64 00 60    	and.w     w0, #0x4, w0
    5b52:	00 00 e0    	cp0.w     w0
    5b54:	03 00 32    	bra       Z, 0x5b5c <.L14>
        U1IR = U1IR_SOFIF;                  // clear SOFIF
    5b56:	40 00 20    	mov.w     #0x4, w0
    5b58:	50 24 88    	mov.w     w0, 0x48a
    5b5a:	b3 00 37    	bra       0x5cc2 <.L13>

00005b5c <.L14>:
    } else if (U1IRbits.IDLEIF) {
    5b5c:	50 24 80    	mov.w     0x48a, w0
    5b5e:	70 00 60    	and.w     w0, #0x10, w0
    5b60:	00 00 e0    	cp0.w     w0
    5b62:	03 00 32    	bra       Z, 0x5b6a <.L15>
        U1IR = U1IR_IDLEIF;                 // clear IDLEIF
    5b64:	00 01 20    	mov.w     #0x10, w0
    5b66:	50 24 88    	mov.w     w0, 0x48a
    5b68:	ac 00 37    	bra       0x5cc2 <.L13>

00005b6a <.L15>:
//      U1PWRCbits.USUSPND = 1;             // put USB module in suspend mode
    } else if (U1IRbits.RESUMEIF) {
    5b6a:	51 24 80    	mov.w     0x48a, w1
    5b6c:	00 02 20    	mov.w     #0x20, w0
    5b6e:	00 80 60    	and.w     w1, w0, w0
    5b70:	00 00 e0    	cp0.w     w0
    5b72:	03 00 32    	bra       Z, 0x5b7a <.L16>
        U1IR = U1IR_RESUMEIF;               // clear RESUMEIF
    5b74:	00 02 20    	mov.w     #0x20, w0
    5b76:	50 24 88    	mov.w     w0, 0x48a
    5b78:	a4 00 37    	bra       0x5cc2 <.L13>

00005b7a <.L16>:
//      U1PWRCbits.USUSPND = 0;             // resume USB module operation
    } else if (U1IRbits.STALLIF) {
    5b7a:	51 24 80    	mov.w     0x48a, w1
    5b7c:	00 08 20    	mov.w     #0x80, w0
    5b7e:	00 80 60    	and.w     w1, w0, w0
    5b80:	00 00 e0    	cp0.w     w0
    5b82:	03 00 32    	bra       Z, 0x5b8a <.L17>
        U1IR = U1IR_STALLIF;                // clear STALLIF
    5b84:	00 08 20    	mov.w     #0x80, w0
    5b86:	50 24 88    	mov.w     w0, 0x48a
    5b88:	9c 00 37    	bra       0x5cc2 <.L13>

00005b8a <.L17>:
    } else if (U1IRbits.URSTIF) {
    5b8a:	50 24 80    	mov.w     0x48a, w0
    5b8c:	61 00 60    	and.w     w0, #0x1, w0
    5b8e:	00 00 e0    	cp0.w     w0
    5b90:	27 00 32    	bra       Z, 0x5be0 <.L18>
        USB_curr_config = 0;
    5b92:	47 68 ef    	clr.b     0x847
        while (U1IRbits.TRNIF) {
    5b94:	08 00 37    	bra       0x5ba6 <.L19>

00005b96 <.L20>:
            U1IR = U1IR_TRNIF;              // clear TRNIF to advance the U1STAT FIFO
    5b96:	80 00 20    	mov.w     #0x8, w0
    5b98:	50 24 88    	mov.w     w0, 0x48a
	...

00005ba6 <.L19>:
    5ba6:	50 24 80    	mov.w     0x48a, w0
    5ba8:	68 00 60    	and.w     w0, #0x8, w0
    5baa:	00 00 e0    	cp0.w     w0
    5bac:	f4 ff 3a    	bra       NZ, 0x5b96 <.L20>
            __builtin_nop();                // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();                // ...to allow a pending TRNIF to appear
        }
        usb_disable_endpoints(0);           // disable all endpoints
    5bae:	00 40 eb    	clr.b     w0
    5bb0:	5d ff 07    	rcall     0x5a6c <_usb_disable_endpoints> <.L0> <.LFB0> <.LFE80> <.Letext0> <.Ltext0>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    5bb2:	00 40 22    	mov.w     #0x2400, w0
    5bb4:	01 c4 b3    	mov.b     #0x40, w1
    5bb6:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    5bb8:	00 50 22    	mov.w     #0x2500, w0
    5bba:	10 20 89    	mov.w     w0, 0x2402
        BD[EP0OUT].status = UOWN | DTSEN;   // set UOWN bit (USB can write)
    5bbc:	10 40 22    	mov.w     #0x2401, w0
    5bbe:	81 c8 b3    	mov.b     #0x88, w1
    5bc0:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;  // EP0 IN gets a buffer
    5bc2:	00 54 22    	mov.w     #0x2540, w0
    5bc4:	30 20 89    	mov.w     w0, 0x2406
        BD[EP0IN].status = DTSEN;           // clear UOWN bit (MCU can write)
    5bc6:	50 40 22    	mov.w     #0x2405, w0
    5bc8:	81 c0 b3    	mov.b     #0x8, w1
    5bca:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0;                         // set USB Address to 0
    5bcc:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                        // clear all the USB interrupt flags
    5bce:	f0 0f 20    	mov.w     #0xff, w0
    5bd0:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;              // EP0 is a control pipe and requires an ACK
    5bd2:	d0 00 20    	mov.w     #0xd, w0
    5bd4:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                     // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    5bd6:	10 c0 b3    	mov.b     #0x1, w0
    5bd8:	4a e8 b7    	mov.b     WREG, 0x84a
        USB_device_status = 1;              // self powered, remote wakeup disabled
    5bda:	10 c0 b3    	mov.b     #0x1, w0
    5bdc:	48 e8 b7    	mov.b     WREG, 0x848
    5bde:	71 00 37    	bra       0x5cc2 <.L13>

00005be0 <.L18>:
    } else if (U1IRbits.TRNIF) {
    5be0:	50 24 80    	mov.w     0x48a, w0
    5be2:	68 00 60    	and.w     w0, #0x8, w0
    5be4:	00 00 e0    	cp0.w     w0
    5be6:	6d 00 32    	bra       Z, 0x5cc2 <.L13>
        buf_desc_ptr = &BD[U1STAT >> 3];    // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    5be8:	90 24 80    	mov.w     0x492, w0
    5bea:	43 00 de    	lsr.w     w0, #0x3, w0
    5bec:	c2 00 dd    	sl.w      w0, #0x2, w1
    5bee:	00 40 22    	mov.w     #0x2400, w0
    5bf0:	00 8f 40    	add.w     w1, w0, [w14]
        USB_buffer_desc.status = buf_desc_ptr->status;
    5bf2:	1e 00 78    	mov.w     [w14], w0
    5bf4:	10 40 90    	mov.b     [w0+1], w0
    5bf6:	3b e8 b7    	mov.b     WREG, 0x83b
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    5bf8:	1e 00 78    	mov.w     [w14], w0
    5bfa:	10 40 78    	mov.b     [w0], w0
    5bfc:	3a e8 b7    	mov.b     WREG, 0x83a
        USB_buffer_desc.address = buf_desc_ptr->address;
    5bfe:	1e 00 78    	mov.w     [w14], w0
    5c00:	10 00 90    	mov.w     [w0+2], w0
    5c02:	e0 41 88    	mov.w     w0, 0x83c
        USB_USTAT = U1STAT;                 // save the USB status register
    5c04:	90 24 80    	mov.w     0x492, w0
    5c06:	00 40 78    	mov.b     w0, w0
    5c08:	49 e8 b7    	mov.b     WREG, 0x849
        U1IR = U1IR_TRNIF;                  // clear TRNIF
    5c0a:	80 00 20    	mov.w     #0x8, w0
    5c0c:	50 24 88    	mov.w     w0, 0x48a
        USB_error_flags = 0;                // clear USB error flags
    5c0e:	46 68 ef    	clr.b     0x846
        switch (USB_buffer_desc.status & 0x3C) {    // extract PID bits
    5c10:	3b c8 bf    	mov.b     0x83b, WREG
    5c12:	80 80 fb    	ze        w0, w1
    5c14:	c0 03 20    	mov.w     #0x3c, w0
    5c16:	00 80 60    	and.w     w1, w0, w0
    5c18:	41 02 20    	mov.w     #0x24, w1
    5c1a:	81 0f 50    	sub.w     w0, w1, [w15]
    5c1c:	08 00 32    	bra       Z, 0x5c2e <.L23>
    5c1e:	41 03 20    	mov.w     #0x34, w1
    5c20:	81 0f 50    	sub.w     w0, w1, [w15]
    5c22:	03 00 32    	bra       Z, 0x5c2a <.L24>
    5c24:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    5c26:	17 00 32    	bra       Z, 0x5c56 <.L22>
    5c28:	3d 00 37    	bra       0x5ca4 <.L21>

00005c2a <.L24>:
            case TOKEN_SETUP:
                usb_process_setup_token();
    5c2a:	4e 00 07    	rcall     0x5cc8 <_usb_process_setup_token> <.LFB4> <.LFE3>
                break;
    5c2c:	3b 00 37    	bra       0x5ca4 <.L21>

00005c2e <.L23>:
            case TOKEN_IN:
                ep = (USB_USTAT >> 4) & 0x0F;
    5c2e:	49 c8 bf    	mov.b     0x849, WREG
    5c30:	00 80 fb    	ze        w0, w0
    5c32:	44 00 de    	lsr.w     w0, #0x4, w0
    5c34:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_in_callbacks[ep])
    5c36:	2e 40 90    	mov.b     [w14+2], w0
    5c38:	00 80 fb    	ze        w0, w0
    5c3a:	80 00 40    	add.w     w0, w0, w1
    5c3c:	40 3b 22    	mov.w     #0x23b4, w0
    5c3e:	00 80 40    	add.w     w1, w0, w0
    5c40:	10 00 78    	mov.w     [w0], w0
    5c42:	00 00 e0    	cp0.w     w0
    5c44:	2e 00 32    	bra       Z, 0x5ca2 <.L27>
                    USB_in_callbacks[ep]();
    5c46:	2e 40 90    	mov.b     [w14+2], w0
    5c48:	00 80 fb    	ze        w0, w0
    5c4a:	80 00 40    	add.w     w0, w0, w1
    5c4c:	40 3b 22    	mov.w     #0x23b4, w0
    5c4e:	00 80 40    	add.w     w1, w0, w0
    5c50:	10 00 78    	mov.w     [w0], w0
    5c52:	00 00 01    	call      w0
                break;
    5c54:	27 00 37    	bra       0x5ca4 <.L21>

00005c56 <.L22>:
            case TOKEN_OUT:
                ep = (USB_USTAT >> 4) & 0x0F;
    5c56:	49 c8 bf    	mov.b     0x849, WREG
    5c58:	00 80 fb    	ze        w0, w0
    5c5a:	44 00 de    	lsr.w     w0, #0x4, w0
    5c5c:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_out_callbacks[ep])
    5c5e:	2e 40 90    	mov.b     [w14+2], w0
    5c60:	00 80 fb    	ze        w0, w0
    5c62:	80 00 40    	add.w     w0, w0, w1
    5c64:	40 3d 22    	mov.w     #0x23d4, w0
    5c66:	00 80 40    	add.w     w1, w0, w0
    5c68:	10 00 78    	mov.w     [w0], w0
    5c6a:	00 00 e0    	cp0.w     w0
    5c6c:	07 00 32    	bra       Z, 0x5c7c <.L26>
                    USB_out_callbacks[ep]();
    5c6e:	2e 40 90    	mov.b     [w14+2], w0
    5c70:	00 80 fb    	ze        w0, w0
    5c72:	80 00 40    	add.w     w0, w0, w1
    5c74:	40 3d 22    	mov.w     #0x23d4, w0
    5c76:	00 80 40    	add.w     w1, w0, w0
    5c78:	10 00 78    	mov.w     [w0], w0
    5c7a:	00 00 01    	call      w0

00005c7c <.L26>:
                if ((ep == 0) && (USB_request.bytes_left.w == 0)) {
    5c7c:	2e 40 90    	mov.b     [w14+2], w0
    5c7e:	00 04 e0    	cp0.b     w0
    5c80:	11 00 3a    	bra       NZ, 0x5ca4 <.L21>
    5c82:	80 1d 81    	mov.w     0x23b0, w0
    5c84:	00 00 e0    	cp0.w     w0
    5c86:	0e 00 3a    	bra       NZ, 0x5ca4 <.L21>
                    BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // reset EP0 OUT buffer
    5c88:	00 40 22    	mov.w     #0x2400, w0
    5c8a:	01 c4 b3    	mov.b     #0x40, w1
    5c8c:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0OUT].status = UOWN | DTSEN;
    5c8e:	10 40 22    	mov.w     #0x2401, w0
    5c90:	81 c8 b3    	mov.b     #0x88, w1
    5c92:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0;                // complete status phase of control transfer
    5c94:	40 40 22    	mov.w     #0x2404, w0
    5c96:	80 40 eb    	clr.b     w1
    5c98:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5c9a:	50 40 22    	mov.w     #0x2405, w0
    5c9c:	81 cc b3    	mov.b     #0xc8, w1
    5c9e:	01 48 78    	mov.b     w1, [w0]
    5ca0:	01 00 37    	bra       0x5ca4 <.L21>

00005ca2 <.L27>:
    5ca2:	00 00 00    	nop       

00005ca4 <.L21>:
                }
        }
        if (USB_error_flags & REQUEST_ERROR) {      // if there was a Request Error...
    5ca4:	46 c8 bf    	mov.b     0x846, WREG
    5ca6:	00 80 fb    	ze        w0, w0
    5ca8:	61 00 60    	and.w     w0, #0x1, w0
    5caa:	00 40 78    	mov.b     w0, w0
    5cac:	00 04 e0    	cp0.b     w0
    5cae:	09 00 32    	bra       Z, 0x5cc2 <.L13>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // ...get ready to receive the next Setup token...
    5cb0:	00 40 22    	mov.w     #0x2400, w0
    5cb2:	01 c4 b3    	mov.b     #0x40, w1
    5cb4:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | BSTALL;
    5cb6:	50 40 22    	mov.w     #0x2405, w0
    5cb8:	41 c8 b3    	mov.b     #0x84, w1
    5cba:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = UOWN | BSTALL;      // ...and issue a protocol stall on EP0
    5cbc:	10 40 22    	mov.w     #0x2401, w0
    5cbe:	41 c8 b3    	mov.b     #0x84, w1
    5cc0:	01 48 78    	mov.b     w1, [w0]

00005cc2 <.L13>:
        }
    }
    IFS5bits.USB1IF = 0;                    // clear USB Interrupt flag
    5cc2:	8e c0 a9    	bclr.b    0x8e, #0x6
}
    5cc4:	00 80 fa    	ulnk      
    5cc6:	00 00 06    	return    

00005cc8 <_usb_process_setup_token>:

void usb_process_setup_token(void) {
    5cc8:	02 00 fa    	lnk       #0x2
    uint8_t *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    5cca:	e1 41 80    	mov.w     0x83c, w1
    5ccc:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;           // copy the setup packet received from the host
    5cce:	1e 00 78    	mov.w     [w14], w0
    5cd0:	90 40 78    	mov.b     [w0], w1
    5cd2:	e0 83 20    	mov.w     #0x83e, w0
    5cd4:	01 48 78    	mov.b     w1, [w0]
    5cd6:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    5cd8:	1e 00 78    	mov.w     [w14], w0
    5cda:	90 40 78    	mov.b     [w0], w1
    5cdc:	e0 83 20    	mov.w     #0x83e, w0
    5cde:	11 40 98    	mov.b     w1, [w0+1]
    5ce0:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    5ce2:	1e 00 78    	mov.w     [w14], w0
    5ce4:	90 40 78    	mov.b     [w0], w1
    5ce6:	e0 83 20    	mov.w     #0x83e, w0
    5ce8:	21 40 98    	mov.b     w1, [w0+2]
    5cea:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    5cec:	1e 00 78    	mov.w     [w14], w0
    5cee:	90 40 78    	mov.b     [w0], w1
    5cf0:	e0 83 20    	mov.w     #0x83e, w0
    5cf2:	31 40 98    	mov.b     w1, [w0+3]
    5cf4:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    5cf6:	1e 00 78    	mov.w     [w14], w0
    5cf8:	90 40 78    	mov.b     [w0], w1
    5cfa:	e0 83 20    	mov.w     #0x83e, w0
    5cfc:	41 40 98    	mov.b     w1, [w0+4]
    5cfe:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    5d00:	1e 00 78    	mov.w     [w14], w0
    5d02:	90 40 78    	mov.b     [w0], w1
    5d04:	e0 83 20    	mov.w     #0x83e, w0
    5d06:	51 40 98    	mov.b     w1, [w0+5]
    5d08:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    5d0a:	1e 00 78    	mov.w     [w14], w0
    5d0c:	90 40 78    	mov.b     [w0], w1
    5d0e:	e0 83 20    	mov.w     #0x83e, w0
    5d10:	61 40 98    	mov.b     w1, [w0+6]
    5d12:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    5d14:	1e 00 78    	mov.w     [w14], w0
    5d16:	90 40 78    	mov.b     [w0], w1
    5d18:	e0 83 20    	mov.w     #0x83e, w0
    5d1a:	71 40 98    	mov.b     w1, [w0+7]
    5d1c:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;         // reset the EP0 OUT byte count
    5d1e:	00 40 22    	mov.w     #0x2400, w0
    5d20:	01 c4 b3    	mov.b     #0x40, w1
    5d22:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = DTSEN;                       // return the EP0 IN buffer to us (dequeue any pending requests)
    5d24:	50 40 22    	mov.w     #0x2405, w0
    5d26:	81 c0 b3    	mov.b     #0x8, w1
    5d28:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType & UOWN) && (USB_setup.wLength.w)) ? UOWN | DTS | DTSEN:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    5d2a:	e0 83 20    	mov.w     #0x83e, w0
    5d2c:	10 40 78    	mov.b     [w0], w0
    5d2e:	00 04 e0    	cp0.b     w0
    5d30:	06 00 35    	bra       LT, 0x5d3e <.L29>
    5d32:	e0 83 20    	mov.w     #0x83e, w0
    5d34:	30 00 90    	mov.w     [w0+6], w0
    5d36:	00 00 e0    	cp0.w     w0
    5d38:	02 00 32    	bra       Z, 0x5d3e <.L29>
    5d3a:	80 cc b3    	mov.b     #0xc8, w0
    5d3c:	01 00 37    	bra       0x5d40 <.L30>

00005d3e <.L29>:
    5d3e:	80 c8 b3    	mov.b     #0x88, w0

00005d40 <.L30>:
    5d40:	11 40 22    	mov.w     #0x2401, w1
    5d42:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                           // assuming there is nothing to dequeue, clear the packet disable bit
    5d44:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    5d46:	60 3a 22    	mov.w     #0x23a6, w0
    5d48:	80 c0 eb    	setm.b    w1
    5d4a:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    5d4c:	70 3a 22    	mov.w     #0x23a7, w0
    5d4e:	80 c0 eb    	setm.b    w1
    5d50:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    5d52:	00 00 eb    	clr.w     w0
    5d54:	80 1d 89    	mov.w     w0, 0x23b0
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    5d56:	00 00 eb    	clr.w     w0
    5d58:	90 1d 89    	mov.w     w0, 0x23b2
    switch (USB_setup.bmRequestType & 0x60) {       // extract request type bits
    5d5a:	e0 83 20    	mov.w     #0x83e, w0
    5d5c:	10 40 78    	mov.b     [w0], w0
    5d5e:	80 80 fb    	ze        w0, w1
    5d60:	00 06 20    	mov.w     #0x60, w0
    5d62:	00 80 60    	and.w     w1, w0, w0
    5d64:	01 02 20    	mov.w     #0x20, w1
    5d66:	81 0f 50    	sub.w     w0, w1, [w15]
    5d68:	11 00 32    	bra       Z, 0x5d8c <.L33>
    5d6a:	01 04 20    	mov.w     #0x40, w1
    5d6c:	81 0f 50    	sub.w     w0, w1, [w15]
    5d6e:	04 00 32    	bra       Z, 0x5d78 <.L34>
    5d70:	00 00 e0    	cp0.w     w0
    5d72:	16 00 3a    	bra       NZ, 0x5da0 <.L40>
        case STANDARD_REQ:
            usb_standard_requests();
    5d74:	1a 00 07    	rcall     0x5daa <_usb_standard_requests> <.LFB5> <.LFE4>
            break;
    5d76:	17 00 37    	bra       0x5da6 <.L28>

00005d78 <.L34>:
        case VENDOR_REQ:
            if (USB_setup_vendor_callback)
    5d78:	90 42 80    	mov.w     0x852, w0
    5d7a:	00 00 e0    	cp0.w     w0
    5d7c:	03 00 32    	bra       Z, 0x5d84 <.L36>
                USB_setup_vendor_callback();
    5d7e:	90 42 80    	mov.w     0x852, w0
    5d80:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    5d82:	11 00 37    	bra       0x5da6 <.L28>

00005d84 <.L36>:
    5d84:	46 c8 bf    	mov.b     0x846, WREG
    5d86:	00 04 a0    	bset.b    w0, #0x0
    5d88:	46 e8 b7    	mov.b     WREG, 0x846
    5d8a:	0d 00 37    	bra       0x5da6 <.L28>

00005d8c <.L33>:
        case CLASS_REQ:
            if (USB_setup_class_callback)
    5d8c:	80 42 80    	mov.w     0x850, w0
    5d8e:	00 00 e0    	cp0.w     w0
    5d90:	03 00 32    	bra       Z, 0x5d98 <.L38>
                USB_setup_class_callback();
    5d92:	80 42 80    	mov.w     0x850, w0
    5d94:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    5d96:	07 00 37    	bra       0x5da6 <.L28>

00005d98 <.L38>:
    5d98:	46 c8 bf    	mov.b     0x846, WREG
    5d9a:	00 04 a0    	bset.b    w0, #0x0
    5d9c:	46 e8 b7    	mov.b     WREG, 0x846
    5d9e:	03 00 37    	bra       0x5da6 <.L28>

00005da0 <.L40>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    5da0:	46 c8 bf    	mov.b     0x846, WREG
    5da2:	00 04 a0    	bset.b    w0, #0x0
    5da4:	46 e8 b7    	mov.b     WREG, 0x846

00005da6 <.L28>:
    }
}
    5da6:	00 80 fa    	ulnk      
    5da8:	00 00 06    	return    

00005daa <_usb_standard_requests>:

void usb_standard_requests(void) {
    5daa:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    uint16_t *U1EP;
    uint8_t ep;

    switch (USB_setup.bRequest) {
    5dac:	e0 83 20    	mov.w     #0x83e, w0
    5dae:	10 40 90    	mov.b     [w0+1], w0
    5db0:	00 80 fb    	ze        w0, w0
    5db2:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    5db4:	7d 01 32    	bra       Z, 0x60b0 <.L46>
    5db6:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    5db8:	0c 00 3c    	bra       GT, 0x5dd2 <.L51>
    5dba:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    5dbc:	c1 00 32    	bra       Z, 0x5f40 <.L44>
    5dbe:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    5dc0:	03 00 3c    	bra       GT, 0x5dc8 <.L52>
    5dc2:	00 00 e0    	cp0.w     w0
    5dc4:	12 00 32    	bra       Z, 0x5dea <.L43>
    5dc6:	48 02 37    	bra       0x6258 <.L42>

00005dc8 <.L52>:
    5dc8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5dca:	ba 00 32    	bra       Z, 0x5f40 <.L44>
    5dcc:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    5dce:	4e 01 32    	bra       Z, 0x606c <.L45>
    5dd0:	43 02 37    	bra       0x6258 <.L42>

00005dd2 <.L51>:
    5dd2:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    5dd4:	e3 01 32    	bra       Z, 0x619c <.L48>
    5dd6:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    5dd8:	03 00 3c    	bra       GT, 0x5de0 <.L53>
    5dda:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    5ddc:	d4 01 32    	bra       Z, 0x6186 <.L47>
    5dde:	3c 02 37    	bra       0x6258 <.L42>

00005de0 <.L53>:
    5de0:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    5de2:	fe 01 32    	bra       Z, 0x61e0 <.L49>
    5de4:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    5de6:	17 02 32    	bra       Z, 0x6216 <.L50>
    5de8:	37 02 37    	bra       0x6258 <.L42>

00005dea <.L43>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType & 0x1F) {   // extract request recipient bits
    5dea:	e0 83 20    	mov.w     #0x83e, w0
    5dec:	10 40 78    	mov.b     [w0], w0
    5dee:	00 80 fb    	ze        w0, w0
    5df0:	7f 00 60    	and.w     w0, #0x1f, w0
    5df2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    5df4:	13 00 32    	bra       Z, 0x5e1c <.L56>
    5df6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    5df8:	32 00 32    	bra       Z, 0x5e5e <.L57>
    5dfa:	00 00 e0    	cp0.w     w0
    5dfc:	9c 00 3a    	bra       NZ, 0x5f36 <.L132>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    5dfe:	30 20 81    	mov.w     0x2406, w0
    5e00:	81 84 20    	mov.w     #0x848, w1
    5e02:	91 40 78    	mov.b     [w1], w1
    5e04:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0;
    5e06:	30 20 81    	mov.w     0x2406, w0
    5e08:	00 00 e8    	inc.w     w0, w0
    5e0a:	80 40 eb    	clr.b     w1
    5e0c:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 2;
    5e0e:	40 40 22    	mov.w     #0x2404, w0
    5e10:	21 c0 b3    	mov.b     #0x2, w1
    5e12:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5e14:	50 40 22    	mov.w     #0x2405, w0
    5e16:	81 cc b3    	mov.b     #0xc8, w1
    5e18:	01 48 78    	mov.b     w1, [w0]
                    break;
    5e1a:	91 00 37    	bra       0x5f3e <.L58>

00005e1c <.L56>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    5e1c:	4a c8 bf    	mov.b     0x84a, WREG
    5e1e:	00 80 fb    	ze        w0, w0
    5e20:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    5e22:	03 00 32    	bra       Z, 0x5e2a <.L60>
    5e24:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5e26:	05 00 32    	bra       Z, 0x5e32 <.L61>
    5e28:	19 00 37    	bra       0x5e5c <.L59>

00005e2a <.L60>:
                        case ADDRESS_STATE:
                            USB_error_flags |= REQUEST_ERROR;
    5e2a:	46 c8 bf    	mov.b     0x846, WREG
    5e2c:	00 04 a0    	bset.b    w0, #0x0
    5e2e:	46 e8 b7    	mov.b     WREG, 0x846
                            break;
    5e30:	15 00 37    	bra       0x5e5c <.L59>

00005e32 <.L61>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    5e32:	e0 83 20    	mov.w     #0x83e, w0
    5e34:	40 40 90    	mov.b     [w0+4], w0
    5e36:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    5e38:	0e 00 3e    	bra       GTU, 0x5e56 <.L62>
                                BD[EP0IN].address[0] = 0;
    5e3a:	30 20 81    	mov.w     0x2406, w0
    5e3c:	80 40 eb    	clr.b     w1
    5e3e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    5e40:	30 20 81    	mov.w     0x2406, w0
    5e42:	00 00 e8    	inc.w     w0, w0
    5e44:	80 40 eb    	clr.b     w1
    5e46:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    5e48:	40 40 22    	mov.w     #0x2404, w0
    5e4a:	21 c0 b3    	mov.b     #0x2, w1
    5e4c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5e4e:	50 40 22    	mov.w     #0x2405, w0
    5e50:	81 cc b3    	mov.b     #0xc8, w1
    5e52:	01 48 78    	mov.b     w1, [w0]
    5e54:	03 00 37    	bra       0x5e5c <.L59>

00005e56 <.L62>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    5e56:	46 c8 bf    	mov.b     0x846, WREG
    5e58:	00 04 a0    	bset.b    w0, #0x0
    5e5a:	46 e8 b7    	mov.b     WREG, 0x846

00005e5c <.L59>:
                            }
                    }
                    break;
    5e5c:	70 00 37    	bra       0x5f3e <.L58>

00005e5e <.L57>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    5e5e:	4a c8 bf    	mov.b     0x84a, WREG
    5e60:	00 80 fb    	ze        w0, w0
    5e62:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    5e64:	03 00 32    	bra       Z, 0x5e6c <.L64>
    5e66:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5e68:	29 00 32    	bra       Z, 0x5ebc <.L65>
    5e6a:	61 00 37    	bra       0x5f2e <.L133>

00005e6c <.L64>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit and see if it is EP0
    5e6c:	e0 83 20    	mov.w     #0x83e, w0
    5e6e:	40 40 90    	mov.b     [w0+4], w0
    5e70:	00 80 fb    	ze        w0, w0
    5e72:	6f 00 60    	and.w     w0, #0xf, w0
    5e74:	00 00 e0    	cp0.w     w0
    5e76:	1e 00 3a    	bra       NZ, 0x5eb4 <.L66>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0] & 0x80) ? BD[EP0IN].status : BD[EP0OUT].status) & 0x04) >> 2;   // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    5e78:	31 20 81    	mov.w     0x2406, w1
    5e7a:	e0 83 20    	mov.w     #0x83e, w0
    5e7c:	40 40 90    	mov.b     [w0+4], w0
    5e7e:	00 04 e0    	cp0.b     w0
    5e80:	07 00 3d    	bra       GE, 0x5e90 <.L67>
    5e82:	50 40 22    	mov.w     #0x2405, w0
    5e84:	10 40 78    	mov.b     [w0], w0
    5e86:	00 80 fb    	ze        w0, w0
    5e88:	64 00 60    	and.w     w0, #0x4, w0
    5e8a:	42 80 de    	asr.w     w0, #0x2, w0
    5e8c:	00 40 78    	mov.b     w0, w0
    5e8e:	06 00 37    	bra       0x5e9c <.L68>

00005e90 <.L67>:
    5e90:	10 40 22    	mov.w     #0x2401, w0
    5e92:	10 40 78    	mov.b     [w0], w0
    5e94:	00 80 fb    	ze        w0, w0
    5e96:	64 00 60    	and.w     w0, #0x4, w0
    5e98:	42 80 de    	asr.w     w0, #0x2, w0
    5e9a:	00 40 78    	mov.b     w0, w0

00005e9c <.L68>:
    5e9c:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0;
    5e9e:	30 20 81    	mov.w     0x2406, w0
    5ea0:	00 00 e8    	inc.w     w0, w0
    5ea2:	80 40 eb    	clr.b     w1
    5ea4:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    5ea6:	40 40 22    	mov.w     #0x2404, w0
    5ea8:	21 c0 b3    	mov.b     #0x2, w1
    5eaa:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5eac:	50 40 22    	mov.w     #0x2405, w0
    5eae:	81 cc b3    	mov.b     #0xc8, w1
    5eb0:	01 48 78    	mov.b     w1, [w0]
    5eb2:	03 00 37    	bra       0x5eba <.L69>

00005eb4 <.L66>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    5eb4:	46 c8 bf    	mov.b     0x846, WREG
    5eb6:	00 04 a0    	bset.b    w0, #0x0
    5eb8:	46 e8 b7    	mov.b     WREG, 0x846

00005eba <.L69>:
                            }
                            break;
    5eba:	3c 00 37    	bra       0x5f34 <.L70>

00005ebc <.L65>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    5ebc:	a0 4a 20    	mov.w     #0x4aa, w0
    5ebe:	00 0f 78    	mov.w     w0, [w14]
                            ep = USB_setup.wIndex.b[0] & 0x0F;  // get EP and strip off direction bit for offset from U1EP0
    5ec0:	e0 83 20    	mov.w     #0x83e, w0
    5ec2:	40 40 90    	mov.b     [w0+4], w0
    5ec4:	6f 40 60    	and.b     w0, #0xf, w0
    5ec6:	20 47 98    	mov.b     w0, [w14+2]
                            buf_desc_ptr = &BD[EP0OUT] + ((ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00));  // compute pointer to the buffer descriptor for the specified EP
    5ec8:	2e 40 90    	mov.b     [w14+2], w0
    5eca:	00 80 fb    	ze        w0, w0
    5ecc:	00 00 40    	add.w     w0, w0, w0
    5ece:	80 00 78    	mov.w     w0, w1
    5ed0:	e0 83 20    	mov.w     #0x83e, w0
    5ed2:	40 40 90    	mov.b     [w0+4], w0
    5ed4:	00 00 fb    	se        w0, w0
    5ed6:	4f 00 de    	lsr.w     w0, #0xf, w0
    5ed8:	01 00 70    	ior.w     w0, w1, w0
    5eda:	c2 00 dd    	sl.w      w0, #0x2, w1
    5edc:	00 40 22    	mov.w     #0x2400, w0
    5ede:	00 80 40    	add.w     w1, w0, w0
    5ee0:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[ep] & ((USB_setup.wIndex.b[0] & 0x80) ? 0x04 : 0x08)) {    // if the specified EP is enabled for transfers in the specified direction...
    5ee2:	2e 40 90    	mov.b     [w14+2], w0
    5ee4:	00 80 fb    	ze        w0, w0
    5ee6:	00 00 40    	add.w     w0, w0, w0
    5ee8:	1e 00 40    	add.w     w0, [w14], w0
    5eea:	90 00 78    	mov.w     [w0], w1
    5eec:	e0 83 20    	mov.w     #0x83e, w0
    5eee:	40 40 90    	mov.b     [w0+4], w0
    5ef0:	00 04 e0    	cp0.b     w0
    5ef2:	02 00 3d    	bra       GE, 0x5ef8 <.L71>
    5ef4:	40 00 20    	mov.w     #0x4, w0
    5ef6:	01 00 37    	bra       0x5efa <.L72>

00005ef8 <.L71>:
    5ef8:	80 00 20    	mov.w     #0x8, w0

00005efa <.L72>:
    5efa:	00 80 60    	and.w     w1, w0, w0
    5efc:	00 00 e0    	cp0.w     w0
    5efe:	13 00 32    	bra       Z, 0x5f26 <.L73>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status) & 0x04) >> 2;    // ...return the BSTALL bit of the specified EP
    5f00:	30 20 81    	mov.w     0x2406, w0
    5f02:	ae 00 90    	mov.w     [w14+4], w1
    5f04:	91 40 90    	mov.b     [w1+1], w1
    5f06:	81 80 fb    	ze        w1, w1
    5f08:	e4 80 60    	and.w     w1, #0x4, w1
    5f0a:	c2 88 de    	asr.w     w1, #0x2, w1
    5f0c:	81 40 78    	mov.b     w1, w1
    5f0e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    5f10:	30 20 81    	mov.w     0x2406, w0
    5f12:	00 00 e8    	inc.w     w0, w0
    5f14:	80 40 eb    	clr.b     w1
    5f16:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    5f18:	40 40 22    	mov.w     #0x2404, w0
    5f1a:	21 c0 b3    	mov.b     #0x2, w1
    5f1c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5f1e:	50 40 22    	mov.w     #0x2405, w0
    5f20:	81 cc b3    	mov.b     #0xc8, w1
    5f22:	01 48 78    	mov.b     w1, [w0]
    5f24:	03 00 37    	bra       0x5f2c <.L74>

00005f26 <.L73>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    5f26:	46 c8 bf    	mov.b     0x846, WREG
    5f28:	00 04 a0    	bset.b    w0, #0x0
    5f2a:	46 e8 b7    	mov.b     WREG, 0x846

00005f2c <.L74>:
                            }
                            break;
    5f2c:	03 00 37    	bra       0x5f34 <.L70>

00005f2e <.L133>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    5f2e:	46 c8 bf    	mov.b     0x846, WREG
    5f30:	00 04 a0    	bset.b    w0, #0x0
    5f32:	46 e8 b7    	mov.b     WREG, 0x846

00005f34 <.L70>:
                    }
                    break;
    5f34:	04 00 37    	bra       0x5f3e <.L58>

00005f36 <.L132>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    5f36:	46 c8 bf    	mov.b     0x846, WREG
    5f38:	00 04 a0    	bset.b    w0, #0x0
    5f3a:	46 e8 b7    	mov.b     WREG, 0x846
            }
            break;
    5f3c:	92 01 37    	bra       0x6262 <.L41>

00005f3e <.L58>:
    5f3e:	91 01 37    	bra       0x6262 <.L41>

00005f40 <.L44>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType & 0x1F) {       // extract request recipient bits
    5f40:	e0 83 20    	mov.w     #0x83e, w0
    5f42:	10 40 78    	mov.b     [w0], w0
    5f44:	00 80 fb    	ze        w0, w0
    5f46:	7f 00 60    	and.w     w0, #0x1f, w0
    5f48:	00 00 e0    	cp0.w     w0
    5f4a:	03 00 32    	bra       Z, 0x5f52 <.L77>
    5f4c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    5f4e:	1c 00 32    	bra       Z, 0x5f88 <.L78>
    5f50:	88 00 37    	bra       0x6062 <.L134>

00005f52 <.L77>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    5f52:	e0 83 20    	mov.w     #0x83e, w0
    5f54:	20 40 90    	mov.b     [w0+2], w0
    5f56:	00 80 fb    	ze        w0, w0
    5f58:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    5f5a:	12 00 3a    	bra       NZ, 0x5f80 <.L135>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest == CLEAR_FEATURE)
    5f5c:	e0 83 20    	mov.w     #0x83e, w0
    5f5e:	10 40 90    	mov.b     [w0+1], w0
    5f60:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    5f62:	04 00 3a    	bra       NZ, 0x5f6c <.L81>
                                USB_device_status &= 0xFE;
    5f64:	48 c8 bf    	mov.b     0x848, WREG
    5f66:	00 04 a1    	bclr.b    w0, #0x0
    5f68:	48 e8 b7    	mov.b     WREG, 0x848
    5f6a:	03 00 37    	bra       0x5f72 <.L82>

00005f6c <.L81>:
                            else
                                USB_device_status |= 0x01;
    5f6c:	48 c8 bf    	mov.b     0x848, WREG
    5f6e:	00 04 a0    	bset.b    w0, #0x0
    5f70:	48 e8 b7    	mov.b     WREG, 0x848

00005f72 <.L82>:
                            BD[EP0IN].bytecount = 0;
    5f72:	40 40 22    	mov.w     #0x2404, w0
    5f74:	80 40 eb    	clr.b     w1
    5f76:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5f78:	50 40 22    	mov.w     #0x2405, w0
    5f7a:	81 cc b3    	mov.b     #0xc8, w1
    5f7c:	01 48 78    	mov.b     w1, [w0]
                            break;
    5f7e:	03 00 37    	bra       0x5f86 <.L83>

00005f80 <.L135>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    5f80:	46 c8 bf    	mov.b     0x846, WREG
    5f82:	00 04 a0    	bset.b    w0, #0x0
    5f84:	46 e8 b7    	mov.b     WREG, 0x846

00005f86 <.L83>:
                    }
                    break;
    5f86:	71 00 37    	bra       0x606a <.L84>

00005f88 <.L78>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    5f88:	4a c8 bf    	mov.b     0x84a, WREG
    5f8a:	00 80 fb    	ze        w0, w0
    5f8c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    5f8e:	03 00 32    	bra       Z, 0x5f96 <.L86>
    5f90:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    5f92:	12 00 32    	bra       Z, 0x5fb8 <.L87>
    5f94:	62 00 37    	bra       0x605a <.L136>

00005f96 <.L86>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit, and see if its EP0
    5f96:	e0 83 20    	mov.w     #0x83e, w0
    5f98:	40 40 90    	mov.b     [w0+4], w0
    5f9a:	00 80 fb    	ze        w0, w0
    5f9c:	6f 00 60    	and.w     w0, #0xf, w0
    5f9e:	00 00 e0    	cp0.w     w0
    5fa0:	07 00 3a    	bra       NZ, 0x5fb0 <.L88>
                                BD[EP0IN].bytecount = 0;
    5fa2:	40 40 22    	mov.w     #0x2404, w0
    5fa4:	80 40 eb    	clr.b     w1
    5fa6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5fa8:	50 40 22    	mov.w     #0x2405, w0
    5faa:	81 cc b3    	mov.b     #0xc8, w1
    5fac:	01 48 78    	mov.b     w1, [w0]
    5fae:	03 00 37    	bra       0x5fb6 <.L89>

00005fb0 <.L88>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    5fb0:	46 c8 bf    	mov.b     0x846, WREG
    5fb2:	00 04 a0    	bset.b    w0, #0x0
    5fb4:	46 e8 b7    	mov.b     WREG, 0x846

00005fb6 <.L89>:
                            }
                            break;
    5fb6:	54 00 37    	bra       0x6060 <.L90>

00005fb8 <.L87>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    5fb8:	a0 4a 20    	mov.w     #0x4aa, w0
    5fba:	00 0f 78    	mov.w     w0, [w14]
                            if (ep = USB_setup.wIndex.b[0] & 0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    5fbc:	e0 83 20    	mov.w     #0x83e, w0
    5fbe:	40 40 90    	mov.b     [w0+4], w0
    5fc0:	6f 40 60    	and.b     w0, #0xf, w0
    5fc2:	20 47 98    	mov.b     w0, [w14+2]
    5fc4:	2e 40 90    	mov.b     [w14+2], w0
    5fc6:	00 04 e0    	cp0.b     w0
    5fc8:	3c 00 32    	bra       Z, 0x6042 <.L91>
                                buf_desc_ptr = &BD[(ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00)]; // compute pointer to the buffer descriptor for the specified EP
    5fca:	2e 40 90    	mov.b     [w14+2], w0
    5fcc:	00 80 fb    	ze        w0, w0
    5fce:	00 00 40    	add.w     w0, w0, w0
    5fd0:	80 00 78    	mov.w     w0, w1
    5fd2:	e0 83 20    	mov.w     #0x83e, w0
    5fd4:	40 40 90    	mov.b     [w0+4], w0
    5fd6:	00 00 fb    	se        w0, w0
    5fd8:	4f 00 de    	lsr.w     w0, #0xf, w0
    5fda:	01 00 70    	ior.w     w0, w1, w0
    5fdc:	c2 00 dd    	sl.w      w0, #0x2, w1
    5fde:	00 40 22    	mov.w     #0x2400, w0
    5fe0:	00 80 40    	add.w     w1, w0, w0
    5fe2:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0] & 0x80) { // if the specified EP direction is IN...
    5fe4:	e0 83 20    	mov.w     #0x83e, w0
    5fe6:	40 40 90    	mov.b     [w0+4], w0
    5fe8:	00 04 e0    	cp0.b     w0
    5fea:	16 00 3d    	bra       GE, 0x6018 <.L92>
                                    if (U1EP[ep] & 0x04) {          // if EPn is enabled for IN transfers...
    5fec:	2e 40 90    	mov.b     [w14+2], w0
    5fee:	00 80 fb    	ze        w0, w0
    5ff0:	00 00 40    	add.w     w0, w0, w0
    5ff2:	1e 00 40    	add.w     w0, [w14], w0
    5ff4:	10 00 78    	mov.w     [w0], w0
    5ff6:	64 00 60    	and.w     w0, #0x4, w0
    5ff8:	00 00 e0    	cp0.w     w0
    5ffa:	0a 00 32    	bra       Z, 0x6010 <.L93>
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? 0 : (UOWN | BSTALL);
    5ffc:	e0 83 20    	mov.w     #0x83e, w0
    5ffe:	10 40 90    	mov.b     [w0+1], w0
    6000:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    6002:	02 00 3a    	bra       NZ, 0x6008 <.L94>
    6004:	00 40 eb    	clr.b     w0
    6006:	01 00 37    	bra       0x600a <.L95>

00006008 <.L94>:
    6008:	40 c8 b3    	mov.b     #0x84, w0

0000600a <.L95>:
    600a:	ae 00 90    	mov.w     [w14+4], w1
    600c:	90 40 98    	mov.b     w0, [w1+1]
    600e:	19 00 37    	bra       0x6042 <.L91>

00006010 <.L93>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    6010:	46 c8 bf    	mov.b     0x846, WREG
    6012:	00 04 a0    	bset.b    w0, #0x0
    6014:	46 e8 b7    	mov.b     WREG, 0x846
    6016:	15 00 37    	bra       0x6042 <.L91>

00006018 <.L92>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[ep] & 0x08) {  // if the EP is enabled for OUT transfers...
    6018:	2e 40 90    	mov.b     [w14+2], w0
    601a:	00 80 fb    	ze        w0, w0
    601c:	00 00 40    	add.w     w0, w0, w0
    601e:	1e 00 40    	add.w     w0, [w14], w0
    6020:	10 00 78    	mov.w     [w0], w0
    6022:	68 00 60    	and.w     w0, #0x8, w0
    6024:	00 00 e0    	cp0.w     w0
    6026:	0a 00 32    	bra       Z, 0x603c <.L96>
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? (UOWN | DTSEN) : (UOWN | BSTALL);
    6028:	e0 83 20    	mov.w     #0x83e, w0
    602a:	10 40 90    	mov.b     [w0+1], w0
    602c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    602e:	02 00 3a    	bra       NZ, 0x6034 <.L97>
    6030:	80 c8 b3    	mov.b     #0x88, w0
    6032:	01 00 37    	bra       0x6036 <.L98>

00006034 <.L97>:
    6034:	40 c8 b3    	mov.b     #0x84, w0

00006036 <.L98>:
    6036:	ae 00 90    	mov.w     [w14+4], w1
    6038:	90 40 98    	mov.b     w0, [w1+1]
    603a:	03 00 37    	bra       0x6042 <.L91>

0000603c <.L96>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    603c:	46 c8 bf    	mov.b     0x846, WREG
    603e:	00 04 a0    	bset.b    w0, #0x0
    6040:	46 e8 b7    	mov.b     WREG, 0x846

00006042 <.L91>:
                                    }
                                }
                            }
                            if (!(USB_error_flags & REQUEST_ERROR)) {   // if there was no Request Error...
    6042:	46 c8 bf    	mov.b     0x846, WREG
    6044:	00 80 fb    	ze        w0, w0
    6046:	61 00 60    	and.w     w0, #0x1, w0
    6048:	00 00 e0    	cp0.w     w0
    604a:	06 00 3a    	bra       NZ, 0x6058 <.L99>
                                BD[EP0IN].bytecount = 0;
    604c:	40 40 22    	mov.w     #0x2404, w0
    604e:	80 40 eb    	clr.b     w1
    6050:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // ...send packet as DATA1, set UOWN bit
    6052:	50 40 22    	mov.w     #0x2405, w0
    6054:	81 cc b3    	mov.b     #0xc8, w1
    6056:	01 48 78    	mov.b     w1, [w0]

00006058 <.L99>:
                            }
                            break;
    6058:	03 00 37    	bra       0x6060 <.L90>

0000605a <.L136>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    605a:	46 c8 bf    	mov.b     0x846, WREG
    605c:	00 04 a0    	bset.b    w0, #0x0
    605e:	46 e8 b7    	mov.b     WREG, 0x846

00006060 <.L90>:
                    }
                    break;
    6060:	04 00 37    	bra       0x606a <.L84>

00006062 <.L134>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    6062:	46 c8 bf    	mov.b     0x846, WREG
    6064:	00 04 a0    	bset.b    w0, #0x0
    6066:	46 e8 b7    	mov.b     WREG, 0x846
            }
            break;
    6068:	fc 00 37    	bra       0x6262 <.L41>

0000606a <.L84>:
    606a:	fb 00 37    	bra       0x6262 <.L41>

0000606c <.L45>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0] > 0x7F) {     // if new device address is illegal, send Request Error
    606c:	e0 83 20    	mov.w     #0x83e, w0
    606e:	20 40 90    	mov.b     [w0+2], w0
    6070:	00 04 e0    	cp0.b     w0
    6072:	04 00 3d    	bra       GE, 0x607c <.L100>
                USB_error_flags |= REQUEST_ERROR;
    6074:	46 c8 bf    	mov.b     0x846, WREG
    6076:	00 04 a0    	bset.b    w0, #0x0
    6078:	46 e8 b7    	mov.b     WREG, 0x846
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                USB_in_callbacks[0] = usb_set_address_callback;
                BD[EP0IN].bytecount = 0;
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
            }
            break;
    607a:	f3 00 37    	bra       0x6262 <.L41>

0000607c <.L100>:
    607c:	e0 83 20    	mov.w     #0x83e, w0
    607e:	90 40 78    	mov.b     [w0], w1
    6080:	60 3a 22    	mov.w     #0x23a6, w0
    6082:	01 48 78    	mov.b     w1, [w0]
    6084:	e0 83 20    	mov.w     #0x83e, w0
    6086:	90 40 90    	mov.b     [w0+1], w1
    6088:	70 3a 22    	mov.w     #0x23a7, w0
    608a:	01 48 78    	mov.b     w1, [w0]
    608c:	e0 83 20    	mov.w     #0x83e, w0
    608e:	10 00 90    	mov.w     [w0+2], w0
    6090:	40 1d 89    	mov.w     w0, 0x23a8
    6092:	e0 83 20    	mov.w     #0x83e, w0
    6094:	20 00 90    	mov.w     [w0+4], w0
    6096:	50 1d 89    	mov.w     w0, 0x23aa
    6098:	e0 83 20    	mov.w     #0x83e, w0
    609a:	30 00 90    	mov.w     [w0+6], w0
    609c:	60 1d 89    	mov.w     w0, 0x23ac
    609e:	a0 aa 25    	mov.w     #0x5aaa, w0
    60a0:	a0 1d 89    	mov.w     w0, 0x23b4
    60a2:	40 40 22    	mov.w     #0x2404, w0
    60a4:	80 40 eb    	clr.b     w1
    60a6:	01 48 78    	mov.b     w1, [w0]
    60a8:	50 40 22    	mov.w     #0x2405, w0
    60aa:	81 cc b3    	mov.b     #0xc8, w1
    60ac:	01 48 78    	mov.b     w1, [w0]
    60ae:	d9 00 37    	bra       0x6262 <.L41>

000060b0 <.L46>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    60b0:	e0 83 20    	mov.w     #0x83e, w0
    60b2:	90 40 78    	mov.b     [w0], w1
    60b4:	60 3a 22    	mov.w     #0x23a6, w0
    60b6:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    60b8:	e0 83 20    	mov.w     #0x83e, w0
    60ba:	90 40 90    	mov.b     [w0+1], w1
    60bc:	70 3a 22    	mov.w     #0x23a7, w0
    60be:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    60c0:	e0 83 20    	mov.w     #0x83e, w0
    60c2:	10 00 90    	mov.w     [w0+2], w0
    60c4:	40 1d 89    	mov.w     w0, 0x23a8
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    60c6:	e0 83 20    	mov.w     #0x83e, w0
    60c8:	20 00 90    	mov.w     [w0+4], w0
    60ca:	50 1d 89    	mov.w     w0, 0x23aa
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    60cc:	e0 83 20    	mov.w     #0x83e, w0
    60ce:	30 00 90    	mov.w     [w0+6], w0
    60d0:	60 1d 89    	mov.w     w0, 0x23ac
            switch (USB_setup.wValue.b[1]) {
    60d2:	e0 83 20    	mov.w     #0x83e, w0
    60d4:	30 40 90    	mov.b     [w0+3], w0
    60d6:	00 80 fb    	ze        w0, w0
    60d8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    60da:	0b 00 32    	bra       Z, 0x60f2 <.L104>
    60dc:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    60de:	24 00 32    	bra       Z, 0x6128 <.L105>
    60e0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    60e2:	37 00 3a    	bra       NZ, 0x6152 <.L137>
                case DEVICE:
                    USB_request.data_ptr = Device;
    60e4:	c0 58 29    	mov.w     #0x958c, w0
    60e6:	70 1d 89    	mov.w     w0, 0x23ae
                    USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    60e8:	70 1d 81    	mov.w     0x23ae, w0
    60ea:	10 40 78    	mov.b     [w0], w0
    60ec:	00 80 fb    	ze        w0, w0
    60ee:	80 1d 89    	mov.w     w0, 0x23b0
                    break;
    60f0:	39 00 37    	bra       0x6164 <.L106>

000060f2 <.L104>:
                case CONFIGURATION:
                    if (USB_setup.wValue.b[0] < NUM_CONFIGURATIONS) {
    60f2:	e0 83 20    	mov.w     #0x83e, w0
    60f4:	20 40 90    	mov.b     [w0+2], w0
    60f6:	00 04 e0    	cp0.b     w0
    60f8:	13 00 3a    	bra       NZ, 0x6120 <.L107>
                        USB_request.data_ptr = Configurations[USB_setup.wValue.b[0]];
    60fa:	e0 83 20    	mov.w     #0x83e, w0
    60fc:	20 40 90    	mov.b     [w0+2], w0
    60fe:	00 80 fb    	ze        w0, w0
    6100:	80 00 40    	add.w     w0, w0, w1
    6102:	20 5e 29    	mov.w     #0x95e2, w0
    6104:	00 80 40    	add.w     w1, w0, w0
    6106:	10 00 78    	mov.w     [w0], w0
    6108:	70 1d 89    	mov.w     w0, 0x23ae
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];  // wTotalLength starting at an offset of 2
    610a:	70 1d 81    	mov.w     0x23ae, w0
    610c:	00 80 e8    	inc2.w    w0, w0
    610e:	90 40 78    	mov.b     [w0], w1
    6110:	00 3b 22    	mov.w     #0x23b0, w0
    6112:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    6114:	70 1d 81    	mov.w     0x23ae, w0
    6116:	63 00 40    	add.w     w0, #0x3, w0
    6118:	90 40 78    	mov.b     [w0], w1
    611a:	10 3b 22    	mov.w     #0x23b1, w0
    611c:	01 48 78    	mov.b     w1, [w0]
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    611e:	22 00 37    	bra       0x6164 <.L106>

00006120 <.L107>:
    6120:	46 c8 bf    	mov.b     0x846, WREG
    6122:	00 04 a0    	bset.b    w0, #0x0
    6124:	46 e8 b7    	mov.b     WREG, 0x846
    6126:	1e 00 37    	bra       0x6164 <.L106>

00006128 <.L105>:
                case STRING:
                    if (USB_setup.wValue.b[0] < NUM_STRINGS) {
    6128:	e0 83 20    	mov.w     #0x83e, w0
    612a:	20 40 90    	mov.b     [w0+2], w0
    612c:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    612e:	0d 00 3e    	bra       GTU, 0x614a <.L109>
                        USB_request.data_ptr = Strings[USB_setup.wValue.b[0]];
    6130:	e0 83 20    	mov.w     #0x83e, w0
    6132:	20 40 90    	mov.b     [w0+2], w0
    6134:	00 80 fb    	ze        w0, w0
    6136:	80 00 40    	add.w     w0, w0, w1
    6138:	80 63 29    	mov.w     #0x9638, w0
    613a:	00 80 40    	add.w     w1, w0, w0
    613c:	10 00 78    	mov.w     [w0], w0
    613e:	70 1d 89    	mov.w     w0, 0x23ae
                        USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    6140:	70 1d 81    	mov.w     0x23ae, w0
    6142:	10 40 78    	mov.b     [w0], w0
    6144:	00 80 fb    	ze        w0, w0
    6146:	80 1d 89    	mov.w     w0, 0x23b0
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    6148:	0d 00 37    	bra       0x6164 <.L106>

0000614a <.L109>:
    614a:	46 c8 bf    	mov.b     0x846, WREG
    614c:	00 04 a0    	bset.b    w0, #0x0
    614e:	46 e8 b7    	mov.b     WREG, 0x846
    6150:	09 00 37    	bra       0x6164 <.L106>

00006152 <.L137>:
                default:
                    if (USB_get_descriptor_callback)
    6152:	70 42 80    	mov.w     0x84e, w0
    6154:	00 00 e0    	cp0.w     w0
    6156:	03 00 32    	bra       Z, 0x615e <.L111>
                        USB_get_descriptor_callback();
    6158:	70 42 80    	mov.w     0x84e, w0
    615a:	00 00 01    	call      w0
    615c:	03 00 37    	bra       0x6164 <.L106>

0000615e <.L111>:
                    else
                        USB_error_flags |= REQUEST_ERROR;
    615e:	46 c8 bf    	mov.b     0x846, WREG
    6160:	00 04 a0    	bset.b    w0, #0x0
    6162:	46 e8 b7    	mov.b     WREG, 0x846

00006164 <.L106>:
            }
            if (!(USB_error_flags & REQUEST_ERROR)) {
    6164:	46 c8 bf    	mov.b     0x846, WREG
    6166:	00 80 fb    	ze        w0, w0
    6168:	61 00 60    	and.w     w0, #0x1, w0
    616a:	00 00 e0    	cp0.w     w0
    616c:	79 00 3a    	bra       NZ, 0x6260 <.L142>
                USB_in_callbacks[0] = usb_send_data_packet;
    616e:	60 26 26    	mov.w     #0x6266, w0
    6170:	a0 1d 89    	mov.w     w0, 0x23b4
                if (USB_setup.wLength.w < USB_request.bytes_left.w)
    6172:	e0 83 20    	mov.w     #0x83e, w0
    6174:	b0 00 90    	mov.w     [w0+6], w1
    6176:	80 1d 81    	mov.w     0x23b0, w0
    6178:	80 8f 50    	sub.w     w1, w0, [w15]
    617a:	03 00 31    	bra       C, 0x6182 <.L113>
                    USB_request.bytes_left.w = USB_setup.wLength.w;
    617c:	e0 83 20    	mov.w     #0x83e, w0
    617e:	30 00 90    	mov.w     [w0+6], w0
    6180:	80 1d 89    	mov.w     w0, 0x23b0

00006182 <.L113>:
                usb_send_data_packet();
    6182:	71 00 07    	rcall     0x6266 <_usb_send_data_packet> <.LFB6> <.LFE5>
            }
            break;
    6184:	6e 00 37    	bra       0x6262 <.L41>

00006186 <.L47>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config; // copy current device configuration to EP0 IN buffer
    6186:	30 20 81    	mov.w     0x2406, w0
    6188:	71 84 20    	mov.w     #0x847, w1
    618a:	91 40 78    	mov.b     [w1], w1
    618c:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 1;
    618e:	40 40 22    	mov.w     #0x2404, w0
    6190:	11 c0 b3    	mov.b     #0x1, w1
    6192:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    6194:	50 40 22    	mov.w     #0x2405, w0
    6196:	81 cc b3    	mov.b     #0xc8, w1
    6198:	01 48 78    	mov.b     w1, [w0]
            break;
    619a:	63 00 37    	bra       0x6262 <.L41>

0000619c <.L48>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0] <= NUM_CONFIGURATIONS) {
    619c:	e0 83 20    	mov.w     #0x83e, w0
    619e:	20 40 90    	mov.b     [w0+2], w0
    61a0:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    61a2:	1a 00 3e    	bra       GTU, 0x61d8 <.L114>
                usb_disable_endpoints(1);           // disable all endpoints except EP0
    61a4:	10 c0 b3    	mov.b     #0x1, w0
    61a6:	62 fc 07    	rcall     0x5a6c <_usb_disable_endpoints> <.L0> <.LFB0> <.LFE80> <.Letext0> <.Ltext0>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    61a8:	e0 83 20    	mov.w     #0x83e, w0
    61aa:	20 40 90    	mov.b     [w0+2], w0
    61ac:	47 e8 b7    	mov.b     WREG, 0x847
    61ae:	47 c8 bf    	mov.b     0x847, WREG
    61b0:	00 80 fb    	ze        w0, w0
    61b2:	00 00 e0    	cp0.w     w0
    61b4:	03 00 3a    	bra       NZ, 0x61bc <.L138>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    61b6:	20 c0 b3    	mov.b     #0x2, w0
    61b8:	4a e8 b7    	mov.b     WREG, 0x84a
                        break;
    61ba:	07 00 37    	bra       0x61ca <.L117>

000061bc <.L138>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    61bc:	30 c0 b3    	mov.b     #0x3, w0
    61be:	4a e8 b7    	mov.b     WREG, 0x84a
                        if (USB_set_config_callback)
    61c0:	60 42 80    	mov.w     0x84c, w0
    61c2:	00 00 e0    	cp0.w     w0
    61c4:	02 00 32    	bra       Z, 0x61ca <.L117>
                            USB_set_config_callback();
    61c6:	60 42 80    	mov.w     0x84c, w0
    61c8:	00 00 01    	call      w0

000061ca <.L117>:
                }
                BD[EP0IN].bytecount = 0;
    61ca:	40 40 22    	mov.w     #0x2404, w0
    61cc:	80 40 eb    	clr.b     w1
    61ce:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    61d0:	50 40 22    	mov.w     #0x2405, w0
    61d2:	81 cc b3    	mov.b     #0xc8, w1
    61d4:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= REQUEST_ERROR;
            }
            break;
    61d6:	45 00 37    	bra       0x6262 <.L41>

000061d8 <.L114>:
    61d8:	46 c8 bf    	mov.b     0x846, WREG
    61da:	00 04 a0    	bset.b    w0, #0x0
    61dc:	46 e8 b7    	mov.b     WREG, 0x846
    61de:	41 00 37    	bra       0x6262 <.L41>

000061e0 <.L49>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    61e0:	4a c8 bf    	mov.b     0x84a, WREG
    61e2:	00 80 fb    	ze        w0, w0
    61e4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    61e6:	13 00 3a    	bra       NZ, 0x620e <.L139>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    61e8:	e0 83 20    	mov.w     #0x83e, w0
    61ea:	40 40 90    	mov.b     [w0+4], w0
    61ec:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    61ee:	0a 00 3e    	bra       GTU, 0x6204 <.L121>
                        BD[EP0IN].address[0] = 0;   // always send back 0 for bAlternateSetting
    61f0:	30 20 81    	mov.w     0x2406, w0
    61f2:	80 40 eb    	clr.b     w1
    61f4:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 1;
    61f6:	40 40 22    	mov.w     #0x2404, w0
    61f8:	11 c0 b3    	mov.b     #0x1, w1
    61fa:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    61fc:	50 40 22    	mov.w     #0x2405, w0
    61fe:	81 cc b3    	mov.b     #0xc8, w1
    6200:	01 48 78    	mov.b     w1, [w0]
    6202:	03 00 37    	bra       0x620a <.L122>

00006204 <.L121>:
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    6204:	46 c8 bf    	mov.b     0x846, WREG
    6206:	00 04 a0    	bset.b    w0, #0x0
    6208:	46 e8 b7    	mov.b     WREG, 0x846

0000620a <.L122>:
                    }
                    break;
    620a:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    620c:	2a 00 37    	bra       0x6262 <.L41>

0000620e <.L139>:
    620e:	46 c8 bf    	mov.b     0x846, WREG
    6210:	00 04 a0    	bset.b    w0, #0x0
    6212:	46 e8 b7    	mov.b     WREG, 0x846
    6214:	26 00 37    	bra       0x6262 <.L41>

00006216 <.L50>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    6216:	4a c8 bf    	mov.b     0x84a, WREG
    6218:	00 80 fb    	ze        w0, w0
    621a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    621c:	19 00 3a    	bra       NZ, 0x6250 <.L140>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    621e:	e0 83 20    	mov.w     #0x83e, w0
    6220:	40 40 90    	mov.b     [w0+4], w0
    6222:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    6224:	10 00 3e    	bra       GTU, 0x6246 <.L126>
                        switch (USB_setup.wValue.b[0]) {
    6226:	e0 83 20    	mov.w     #0x83e, w0
    6228:	20 40 90    	mov.b     [w0+2], w0
    622a:	00 80 fb    	ze        w0, w0
    622c:	00 00 e0    	cp0.w     w0
    622e:	07 00 3a    	bra       NZ, 0x623e <.L141>
                            case 0:                 // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0;
    6230:	40 40 22    	mov.w     #0x2404, w0
    6232:	80 40 eb    	clr.b     w1
    6234:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    6236:	50 40 22    	mov.w     #0x2405, w0
    6238:	81 cc b3    	mov.b     #0xc8, w1
    623a:	01 48 78    	mov.b     w1, [w0]
                                break;
    623c:	07 00 37    	bra       0x624c <.L130>

0000623e <.L141>:
                            default:
                                USB_error_flags |= REQUEST_ERROR;
    623e:	46 c8 bf    	mov.b     0x846, WREG
    6240:	00 04 a0    	bset.b    w0, #0x0
    6242:	46 e8 b7    	mov.b     WREG, 0x846
    6244:	03 00 37    	bra       0x624c <.L130>

00006246 <.L126>:
                        }
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    6246:	46 c8 bf    	mov.b     0x846, WREG
    6248:	00 04 a0    	bset.b    w0, #0x0
    624a:	46 e8 b7    	mov.b     WREG, 0x846

0000624c <.L130>:
                    }
                    break;
    624c:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    624e:	09 00 37    	bra       0x6262 <.L41>

00006250 <.L140>:
    6250:	46 c8 bf    	mov.b     0x846, WREG
    6252:	00 04 a0    	bset.b    w0, #0x0
    6254:	46 e8 b7    	mov.b     WREG, 0x846
    6256:	05 00 37    	bra       0x6262 <.L41>

00006258 <.L42>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= REQUEST_ERROR;
    6258:	46 c8 bf    	mov.b     0x846, WREG
    625a:	00 04 a0    	bset.b    w0, #0x0
    625c:	46 e8 b7    	mov.b     WREG, 0x846
    625e:	01 00 37    	bra       0x6262 <.L41>

00006260 <.L142>:
    6260:	00 00 00    	nop       

00006262 <.L41>:
    }
}
    6262:	00 80 fa    	ulnk      
    6264:	00 00 06    	return    

00006266 <_usb_send_data_packet>:

void usb_send_data_packet(void) {
    6266:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (USB_request.bytes_left.w < MAX_PACKET_SIZE) {
    6268:	81 1d 81    	mov.w     0x23b0, w1
    626a:	f0 03 20    	mov.w     #0x3f, w0
    626c:	80 8f 50    	sub.w     w1, w0, [w15]
    626e:	05 00 3e    	bra       GTU, 0x627a <.L144>
        packet_length = (uint8_t)USB_request.bytes_left.w;
    6270:	80 1d 81    	mov.w     0x23b0, w0
    6272:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    6274:	00 00 eb    	clr.w     w0
    6276:	80 1d 89    	mov.w     w0, 0x23b0
    6278:	05 00 37    	bra       0x6284 <.L145>

0000627a <.L144>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    627a:	00 c4 b3    	mov.b     #0x40, w0
    627c:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    627e:	80 1d 81    	mov.w     0x23b0, w0
    6280:	00 04 b1    	sub.w     #0x40, w0
    6282:	80 1d 89    	mov.w     w0, 0x23b0

00006284 <.L145>:
    }
    for (i = 0; i < packet_length; i++) {
    6284:	00 40 eb    	clr.b     w0
    6286:	10 47 98    	mov.b     w0, [w14+1]
    6288:	0c 00 37    	bra       0x62a2 <.L146>

0000628a <.L147>:
        BD[EP0IN].address[i] = *USB_request.data_ptr++;
    628a:	31 20 81    	mov.w     0x2406, w1
    628c:	1e 40 90    	mov.b     [w14+1], w0
    628e:	00 80 fb    	ze        w0, w0
    6290:	80 80 40    	add.w     w1, w0, w1
    6292:	70 1d 81    	mov.w     0x23ae, w0
    6294:	10 41 78    	mov.b     [w0], w2
    6296:	82 48 78    	mov.b     w2, [w1]
    6298:	00 00 e8    	inc.w     w0, w0
    629a:	70 1d 89    	mov.w     w0, 0x23ae
    629c:	1e 40 90    	mov.b     [w14+1], w0
    629e:	00 40 e8    	inc.b     w0, w0
    62a0:	10 47 98    	mov.b     w0, [w14+1]

000062a2 <.L146>:
    62a2:	1e 40 90    	mov.b     [w14+1], w0
    62a4:	9e 4f 50    	sub.b     w0, [w14], [w15]
    62a6:	f1 ff 39    	bra       NC, 0x628a <.L147>
    }
    BD[EP0IN].bytecount = packet_length;
    62a8:	40 40 22    	mov.w     #0x2404, w0
    62aa:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    62ac:	50 40 22    	mov.w     #0x2405, w0
    62ae:	10 40 78    	mov.b     [w0], w0
    62b0:	00 c0 ea    	com.b     w0, w0
    62b2:	02 c4 b3    	mov.b     #0x40, w2
    62b4:	82 40 60    	and.b     w0, w2, w1
    62b6:	80 c8 b3    	mov.b     #0x88, w0
    62b8:	00 c0 70    	ior.b     w1, w0, w0
    62ba:	80 40 78    	mov.b     w0, w1
    62bc:	50 40 22    	mov.w     #0x2405, w0
    62be:	01 48 78    	mov.b     w1, [w0]
    if (USB_request.bytes_left.w == 0) {
    62c0:	80 1d 81    	mov.w     0x23b0, w0
    62c2:	00 00 e0    	cp0.w     w0
    62c4:	0f 00 3a    	bra       NZ, 0x62e4 <.L143>
        if (USB_request.done_callback)
    62c6:	90 1d 81    	mov.w     0x23b2, w0
    62c8:	00 00 e0    	cp0.w     w0
    62ca:	02 00 32    	bra       Z, 0x62d0 <.L149>
            USB_request.done_callback();
    62cc:	90 1d 81    	mov.w     0x23b2, w0
    62ce:	00 00 01    	call      w0

000062d0 <.L149>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    62d0:	60 3a 22    	mov.w     #0x23a6, w0
    62d2:	80 c0 eb    	setm.b    w1
    62d4:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    62d6:	70 3a 22    	mov.w     #0x23a7, w0
    62d8:	80 c0 eb    	setm.b    w1
    62da:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    62dc:	00 00 eb    	clr.w     w0
    62de:	90 1d 89    	mov.w     w0, 0x23b2
        USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    62e0:	00 00 eb    	clr.w     w0
    62e2:	a0 1d 89    	mov.w     w0, 0x23b4

000062e4 <.L143>:
    }
}
    62e4:	00 80 fa    	ulnk      
    62e6:	00 00 06    	return    

000062e8 <_usb_receive_data_packet>:

void usb_receive_data_packet(void) {
    62e8:	02 00 fa    	lnk       #0x2
    uint8_t i;

    for (i = 0; i < BD[EP0OUT].bytecount; i++) {
    62ea:	00 40 eb    	clr.b     w0
    62ec:	00 4f 78    	mov.b     w0, [w14]
    62ee:	09 00 37    	bra       0x6302 <.L151>

000062f0 <.L152>:
        *USB_request.data_ptr++ = BD[EP0OUT].address[i];
    62f0:	70 1d 81    	mov.w     0x23ae, w0
    62f2:	12 20 81    	mov.w     0x2402, w2
    62f4:	9e 80 fb    	ze        [w14], w1
    62f6:	81 00 41    	add.w     w2, w1, w1
    62f8:	91 40 78    	mov.b     [w1], w1
    62fa:	01 48 78    	mov.b     w1, [w0]
    62fc:	00 00 e8    	inc.w     w0, w0
    62fe:	70 1d 89    	mov.w     w0, 0x23ae
    6300:	1e 4f e8    	inc.b     [w14], [w14]

00006302 <.L151>:
    6302:	00 40 22    	mov.w     #0x2400, w0
    6304:	10 40 78    	mov.b     [w0], w0
    6306:	9e 4f 50    	sub.b     w0, [w14], [w15]
    6308:	f3 ff 3e    	bra       GTU, 0x62f0 <.L152>
    }
    USB_request.bytes_left.w -= BD[EP0OUT].bytecount;
    630a:	81 1d 81    	mov.w     0x23b0, w1
    630c:	00 40 22    	mov.w     #0x2400, w0
    630e:	10 40 78    	mov.b     [w0], w0
    6310:	00 80 fb    	ze        w0, w0
    6312:	00 80 50    	sub.w     w1, w0, w0
    6314:	80 1d 89    	mov.w     w0, 0x23b0
    if (USB_request.bytes_left.w > 0) {
    6316:	80 1d 81    	mov.w     0x23b0, w0
    6318:	00 00 e0    	cp0.w     w0
    631a:	0e 00 32    	bra       Z, 0x6338 <.L153>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    631c:	00 40 22    	mov.w     #0x2400, w0
    631e:	01 c4 b3    	mov.b     #0x40, w1
    6320:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].status = ((BD[EP0OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    6322:	10 40 22    	mov.w     #0x2401, w0
    6324:	10 40 78    	mov.b     [w0], w0
    6326:	00 c0 ea    	com.b     w0, w0
    6328:	02 c4 b3    	mov.b     #0x40, w2
    632a:	82 40 60    	and.b     w0, w2, w1
    632c:	80 c8 b3    	mov.b     #0x88, w0
    632e:	00 c0 70    	ior.b     w1, w0, w0
    6330:	80 40 78    	mov.b     w0, w1
    6332:	10 40 22    	mov.w     #0x2401, w0
    6334:	01 48 78    	mov.b     w1, [w0]
    6336:	0f 00 37    	bra       0x6356 <.L150>

00006338 <.L153>:
    } else {
        if (USB_request.done_callback)
    6338:	90 1d 81    	mov.w     0x23b2, w0
    633a:	00 00 e0    	cp0.w     w0
    633c:	02 00 32    	bra       Z, 0x6342 <.L155>
            USB_request.done_callback();
    633e:	90 1d 81    	mov.w     0x23b2, w0
    6340:	00 00 01    	call      w0

00006342 <.L155>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // all data received, so clear device request
    6342:	60 3a 22    	mov.w     #0x23a6, w0
    6344:	80 c0 eb    	setm.b    w1
    6346:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    6348:	70 3a 22    	mov.w     #0x23a7, w0
    634a:	80 c0 eb    	setm.b    w1
    634c:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    634e:	00 00 eb    	clr.w     w0
    6350:	90 1d 89    	mov.w     w0, 0x23b2
        USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    6352:	00 00 eb    	clr.w     w0
    6354:	a0 1e 89    	mov.w     w0, 0x23d4

00006356 <.L150>:
    }
}
    6356:	00 80 fa    	ulnk      
    6358:	00 00 06    	return    

0000635a <_digout_set>:
// Initial servo pulse width is 1.5 ms
uint16_t servo_OCxRS_save[4] = { 23999, 23999, 23999, 23999 };
uint16_t servo_OCxR_save[4] = { 1, 1, 1, 1 };

void digout_set(uint16_t pin) {
    635a:	02 00 fa    	lnk       #0x2
    635c:	00 0f 78    	mov.w     w0, [w14]
    if (pin == 0)
    635e:	1e 00 78    	mov.w     [w14], w0
    6360:	00 00 e0    	cp0.w     w0
    6362:	02 00 3a    	bra       NZ, 0x6368 <.L2>
        D0_LAT = 1;
    6364:	ec 82 a8    	bset.b    0x2ec, #0x4
    6366:	0e 00 37    	bra       0x6384 <.L1>

00006368 <.L2>:
    else if (pin == 1)
    6368:	1e 00 78    	mov.w     [w14], w0
    636a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    636c:	02 00 3a    	bra       NZ, 0x6372 <.L4>
        D1_LAT = 1;
    636e:	ec a2 a8    	bset.b    0x2ec, #0x5
    6370:	09 00 37    	bra       0x6384 <.L1>

00006372 <.L4>:
    else if (pin == 2)
    6372:	1e 00 78    	mov.w     [w14], w0
    6374:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    6376:	02 00 3a    	bra       NZ, 0x637c <.L5>
        D2_LAT = 1;
    6378:	dd 22 a8    	bset.b    0x2dd, #0x1
    637a:	04 00 37    	bra       0x6384 <.L1>

0000637c <.L5>:
    else if (pin == 3)
    637c:	1e 00 78    	mov.w     [w14], w0
    637e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6380:	01 00 3a    	bra       NZ, 0x6384 <.L1>
        D3_LAT = 1;
    6382:	dd 42 a8    	bset.b    0x2dd, #0x2

00006384 <.L1>:
}
    6384:	00 80 fa    	ulnk      
    6386:	00 00 06    	return    

00006388 <_digout_clear>:

void digout_clear(uint16_t pin) {
    6388:	02 00 fa    	lnk       #0x2
    638a:	00 0f 78    	mov.w     w0, [w14]
    if (pin == 0)
    638c:	1e 00 78    	mov.w     [w14], w0
    638e:	00 00 e0    	cp0.w     w0
    6390:	02 00 3a    	bra       NZ, 0x6396 <.L7>
        D0_LAT = 0;
    6392:	ec 82 a9    	bclr.b    0x2ec, #0x4
    6394:	0e 00 37    	bra       0x63b2 <.L6>

00006396 <.L7>:
    else if (pin == 1)
    6396:	1e 00 78    	mov.w     [w14], w0
    6398:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    639a:	02 00 3a    	bra       NZ, 0x63a0 <.L9>
        D1_LAT = 0;
    639c:	ec a2 a9    	bclr.b    0x2ec, #0x5
    639e:	09 00 37    	bra       0x63b2 <.L6>

000063a0 <.L9>:
    else if (pin == 2)
    63a0:	1e 00 78    	mov.w     [w14], w0
    63a2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    63a4:	02 00 3a    	bra       NZ, 0x63aa <.L10>
        D2_LAT = 0;
    63a6:	dd 22 a9    	bclr.b    0x2dd, #0x1
    63a8:	04 00 37    	bra       0x63b2 <.L6>

000063aa <.L10>:
    else if (pin == 3)
    63aa:	1e 00 78    	mov.w     [w14], w0
    63ac:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    63ae:	01 00 3a    	bra       NZ, 0x63b2 <.L6>
        D3_LAT = 0;
    63b0:	dd 42 a9    	bclr.b    0x2dd, #0x2

000063b2 <.L6>:
}
    63b2:	00 80 fa    	ulnk      
    63b4:	00 00 06    	return    

000063b6 <_digout_toggle>:

void digout_toggle(uint16_t pin) {
    63b6:	02 00 fa    	lnk       #0x2
    63b8:	00 0f 78    	mov.w     w0, [w14]
    if (pin == 0)
    63ba:	1e 00 78    	mov.w     [w14], w0
    63bc:	00 00 e0    	cp0.w     w0
    63be:	0f 00 3a    	bra       NZ, 0x63de <.L12>
        D0_LAT = !D0_LAT;
    63c0:	60 17 80    	mov.w     0x2ec, w0
    63c2:	70 00 60    	and.w     w0, #0x10, w0
    63c4:	00 f0 a7    	btsc.w    w0, #0xf
    63c6:	00 00 ea    	neg.w     w0, w0
    63c8:	00 00 e9    	dec.w     w0, w0
    63ca:	4f 00 de    	lsr.w     w0, #0xf, w0
    63cc:	00 40 78    	mov.b     w0, w0
    63ce:	00 80 fb    	ze        w0, w0
    63d0:	61 00 60    	and.w     w0, #0x1, w0
    63d2:	44 00 dd    	sl.w      w0, #0x4, w0
    63d4:	61 17 80    	mov.w     0x2ec, w1
    63d6:	01 40 a1    	bclr.w    w1, #0x4
    63d8:	01 00 70    	ior.w     w0, w1, w0
    63da:	60 17 88    	mov.w     w0, 0x2ec
    63dc:	38 00 37    	bra       0x644e <.L11>

000063de <.L12>:
    else if (pin == 1)
    63de:	1e 00 78    	mov.w     [w14], w0
    63e0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    63e2:	10 00 3a    	bra       NZ, 0x6404 <.L14>
        D1_LAT = !D1_LAT;
    63e4:	61 17 80    	mov.w     0x2ec, w1
    63e6:	00 02 20    	mov.w     #0x20, w0
    63e8:	00 80 60    	and.w     w1, w0, w0
    63ea:	00 f0 a7    	btsc.w    w0, #0xf
    63ec:	00 00 ea    	neg.w     w0, w0
    63ee:	00 00 e9    	dec.w     w0, w0
    63f0:	4f 00 de    	lsr.w     w0, #0xf, w0
    63f2:	00 40 78    	mov.b     w0, w0
    63f4:	00 80 fb    	ze        w0, w0
    63f6:	61 00 60    	and.w     w0, #0x1, w0
    63f8:	45 00 dd    	sl.w      w0, #0x5, w0
    63fa:	61 17 80    	mov.w     0x2ec, w1
    63fc:	01 50 a1    	bclr.w    w1, #0x5
    63fe:	01 00 70    	ior.w     w0, w1, w0
    6400:	60 17 88    	mov.w     w0, 0x2ec
    6402:	25 00 37    	bra       0x644e <.L11>

00006404 <.L14>:
    else if (pin == 2)
    6404:	1e 00 78    	mov.w     [w14], w0
    6406:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    6408:	10 00 3a    	bra       NZ, 0x642a <.L15>
        D2_LAT = !D2_LAT;
    640a:	e1 16 80    	mov.w     0x2dc, w1
    640c:	00 20 20    	mov.w     #0x200, w0
    640e:	00 80 60    	and.w     w1, w0, w0
    6410:	00 f0 a7    	btsc.w    w0, #0xf
    6412:	00 00 ea    	neg.w     w0, w0
    6414:	00 00 e9    	dec.w     w0, w0
    6416:	4f 00 de    	lsr.w     w0, #0xf, w0
    6418:	00 40 78    	mov.b     w0, w0
    641a:	00 80 fb    	ze        w0, w0
    641c:	61 00 60    	and.w     w0, #0x1, w0
    641e:	49 00 dd    	sl.w      w0, #0x9, w0
    6420:	e1 16 80    	mov.w     0x2dc, w1
    6422:	01 90 a1    	bclr.w    w1, #0x9
    6424:	01 00 70    	ior.w     w0, w1, w0
    6426:	e0 16 88    	mov.w     w0, 0x2dc
    6428:	12 00 37    	bra       0x644e <.L11>

0000642a <.L15>:
    else if (pin == 3)
    642a:	1e 00 78    	mov.w     [w14], w0
    642c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    642e:	0f 00 3a    	bra       NZ, 0x644e <.L11>
        D3_LAT = !D3_LAT;
    6430:	e1 16 80    	mov.w     0x2dc, w1
    6432:	00 40 20    	mov.w     #0x400, w0
    6434:	00 80 60    	and.w     w1, w0, w0
    6436:	00 f0 a7    	btsc.w    w0, #0xf
    6438:	00 00 ea    	neg.w     w0, w0
    643a:	00 00 e9    	dec.w     w0, w0
    643c:	4f 00 de    	lsr.w     w0, #0xf, w0
    643e:	00 40 78    	mov.b     w0, w0
    6440:	00 80 fb    	ze        w0, w0
    6442:	61 00 60    	and.w     w0, #0x1, w0
    6444:	4a 00 dd    	sl.w      w0, #0xa, w0
    6446:	e1 16 80    	mov.w     0x2dc, w1
    6448:	01 a0 a1    	bclr.w    w1, #0xa
    644a:	01 00 70    	ior.w     w0, w1, w0
    644c:	e0 16 88    	mov.w     w0, 0x2dc

0000644e <.L11>:
}
    644e:	00 80 fa    	ulnk      
    6450:	00 00 06    	return    

00006452 <_digout_write>:

void digout_write(uint16_t pin, uint16_t val) {
    6452:	04 00 fa    	lnk       #0x4
    6454:	00 0f 78    	mov.w     w0, [w14]
    6456:	11 07 98    	mov.w     w1, [w14+2]
    if (pin == 0)
    6458:	1e 00 78    	mov.w     [w14], w0
    645a:	00 00 e0    	cp0.w     w0
    645c:	0e 00 3a    	bra       NZ, 0x647a <.L17>
        D0_LAT = (val) ? 1 : 0;
    645e:	1e 00 90    	mov.w     [w14+2], w0
    6460:	00 f0 a7    	btsc.w    w0, #0xf
    6462:	00 00 ea    	neg.w     w0, w0
    6464:	00 00 ea    	neg.w     w0, w0
    6466:	4f 00 de    	lsr.w     w0, #0xf, w0
    6468:	00 40 78    	mov.b     w0, w0
    646a:	00 80 fb    	ze        w0, w0
    646c:	61 00 60    	and.w     w0, #0x1, w0
    646e:	44 00 dd    	sl.w      w0, #0x4, w0
    6470:	61 17 80    	mov.w     0x2ec, w1
    6472:	01 40 a1    	bclr.w    w1, #0x4
    6474:	01 00 70    	ior.w     w0, w1, w0
    6476:	60 17 88    	mov.w     w0, 0x2ec
    6478:	32 00 37    	bra       0x64de <.L16>

0000647a <.L17>:
    else if (pin == 1)
    647a:	1e 00 78    	mov.w     [w14], w0
    647c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    647e:	0e 00 3a    	bra       NZ, 0x649c <.L19>
        D1_LAT = (val) ? 1 : 0;
    6480:	1e 00 90    	mov.w     [w14+2], w0
    6482:	00 f0 a7    	btsc.w    w0, #0xf
    6484:	00 00 ea    	neg.w     w0, w0
    6486:	00 00 ea    	neg.w     w0, w0
    6488:	4f 00 de    	lsr.w     w0, #0xf, w0
    648a:	00 40 78    	mov.b     w0, w0
    648c:	00 80 fb    	ze        w0, w0
    648e:	61 00 60    	and.w     w0, #0x1, w0
    6490:	45 00 dd    	sl.w      w0, #0x5, w0
    6492:	61 17 80    	mov.w     0x2ec, w1
    6494:	01 50 a1    	bclr.w    w1, #0x5
    6496:	01 00 70    	ior.w     w0, w1, w0
    6498:	60 17 88    	mov.w     w0, 0x2ec
    649a:	21 00 37    	bra       0x64de <.L16>

0000649c <.L19>:
    else if (pin == 2)
    649c:	1e 00 78    	mov.w     [w14], w0
    649e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    64a0:	0e 00 3a    	bra       NZ, 0x64be <.L20>
        D2_LAT = (val) ? 1 : 0;
    64a2:	1e 00 90    	mov.w     [w14+2], w0
    64a4:	00 f0 a7    	btsc.w    w0, #0xf
    64a6:	00 00 ea    	neg.w     w0, w0
    64a8:	00 00 ea    	neg.w     w0, w0
    64aa:	4f 00 de    	lsr.w     w0, #0xf, w0
    64ac:	00 40 78    	mov.b     w0, w0
    64ae:	00 80 fb    	ze        w0, w0
    64b0:	61 00 60    	and.w     w0, #0x1, w0
    64b2:	49 00 dd    	sl.w      w0, #0x9, w0
    64b4:	e1 16 80    	mov.w     0x2dc, w1
    64b6:	01 90 a1    	bclr.w    w1, #0x9
    64b8:	01 00 70    	ior.w     w0, w1, w0
    64ba:	e0 16 88    	mov.w     w0, 0x2dc
    64bc:	10 00 37    	bra       0x64de <.L16>

000064be <.L20>:
    else if (pin == 3)
    64be:	1e 00 78    	mov.w     [w14], w0
    64c0:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    64c2:	0d 00 3a    	bra       NZ, 0x64de <.L16>
        D3_LAT = (val) ? 1 : 0;
    64c4:	1e 00 90    	mov.w     [w14+2], w0
    64c6:	00 f0 a7    	btsc.w    w0, #0xf
    64c8:	00 00 ea    	neg.w     w0, w0
    64ca:	00 00 ea    	neg.w     w0, w0
    64cc:	4f 00 de    	lsr.w     w0, #0xf, w0
    64ce:	00 40 78    	mov.b     w0, w0
    64d0:	00 80 fb    	ze        w0, w0
    64d2:	61 00 60    	and.w     w0, #0x1, w0
    64d4:	4a 00 dd    	sl.w      w0, #0xa, w0
    64d6:	e1 16 80    	mov.w     0x2dc, w1
    64d8:	01 a0 a1    	bclr.w    w1, #0xa
    64da:	01 00 70    	ior.w     w0, w1, w0
    64dc:	e0 16 88    	mov.w     w0, 0x2dc

000064de <.L16>:
}
    64de:	00 80 fa    	ulnk      
    64e0:	00 00 06    	return    

000064e2 <_digout_read>:

uint16_t digout_read(uint16_t pin) {
    64e2:	02 00 fa    	lnk       #0x2
    64e4:	00 0f 78    	mov.w     w0, [w14]
    if (pin == 0)
    64e6:	1e 00 78    	mov.w     [w14], w0
    64e8:	00 00 e0    	cp0.w     w0
    64ea:	05 00 3a    	bra       NZ, 0x64f6 <.L22>
        return D0;
    64ec:	50 17 80    	mov.w     0x2ea, w0
    64ee:	44 00 de    	lsr.w     w0, #0x4, w0
    64f0:	61 40 60    	and.b     w0, #0x1, w0
    64f2:	00 80 fb    	ze        w0, w0
    64f4:	19 00 37    	bra       0x6528 <.L23>

000064f6 <.L22>:
    else if (pin == 1)
    64f6:	1e 00 78    	mov.w     [w14], w0
    64f8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    64fa:	05 00 3a    	bra       NZ, 0x6506 <.L24>
        return D1;
    64fc:	50 17 80    	mov.w     0x2ea, w0
    64fe:	45 00 de    	lsr.w     w0, #0x5, w0
    6500:	61 40 60    	and.b     w0, #0x1, w0
    6502:	00 80 fb    	ze        w0, w0
    6504:	11 00 37    	bra       0x6528 <.L23>

00006506 <.L24>:
    else if (pin == 2)
    6506:	1e 00 78    	mov.w     [w14], w0
    6508:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    650a:	05 00 3a    	bra       NZ, 0x6516 <.L25>
        return D2;
    650c:	d0 16 80    	mov.w     0x2da, w0
    650e:	49 00 de    	lsr.w     w0, #0x9, w0
    6510:	61 40 60    	and.b     w0, #0x1, w0
    6512:	00 80 fb    	ze        w0, w0
    6514:	09 00 37    	bra       0x6528 <.L23>

00006516 <.L25>:
    else if (pin == 3)
    6516:	1e 00 78    	mov.w     [w14], w0
    6518:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    651a:	05 00 3a    	bra       NZ, 0x6526 <.L26>
        return D3;
    651c:	d0 16 80    	mov.w     0x2da, w0
    651e:	4a 00 de    	lsr.w     w0, #0xa, w0
    6520:	61 40 60    	and.b     w0, #0x1, w0
    6522:	00 80 fb    	ze        w0, w0
    6524:	01 00 37    	bra       0x6528 <.L23>

00006526 <.L26>:
    else
        return 0xFFFF;
    6526:	00 80 eb    	setm.w    w0

00006528 <.L23>:
}
    6528:	00 80 fa    	ulnk      
    652a:	00 00 06    	return    

0000652c <_digout_set_od>:

void digout_set_od(uint16_t pin, uint16_t val) {
    652c:	04 00 fa    	lnk       #0x4
    652e:	00 0f 78    	mov.w     w0, [w14]
    6530:	11 07 98    	mov.w     w1, [w14+2]
    if (pin == 0)
    6532:	1e 00 78    	mov.w     [w14], w0
    6534:	00 00 e0    	cp0.w     w0
    6536:	0e 00 3a    	bra       NZ, 0x6554 <.L28>
        D0_OD = (val) ? 1 : 0;
    6538:	1e 00 90    	mov.w     [w14+2], w0
    653a:	00 f0 a7    	btsc.w    w0, #0xf
    653c:	00 00 ea    	neg.w     w0, w0
    653e:	00 00 ea    	neg.w     w0, w0
    6540:	4f 00 de    	lsr.w     w0, #0xf, w0
    6542:	00 40 78    	mov.b     w0, w0
    6544:	00 80 fb    	ze        w0, w0
    6546:	61 00 60    	and.w     w0, #0x1, w0
    6548:	44 00 dd    	sl.w      w0, #0x4, w0
    654a:	71 17 80    	mov.w     0x2ee, w1
    654c:	01 40 a1    	bclr.w    w1, #0x4
    654e:	01 00 70    	ior.w     w0, w1, w0
    6550:	70 17 88    	mov.w     w0, 0x2ee
    6552:	32 00 37    	bra       0x65b8 <.L27>

00006554 <.L28>:
    else if (pin == 1)
    6554:	1e 00 78    	mov.w     [w14], w0
    6556:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    6558:	0e 00 3a    	bra       NZ, 0x6576 <.L30>
        D1_OD = (val) ? 1 : 0;
    655a:	1e 00 90    	mov.w     [w14+2], w0
    655c:	00 f0 a7    	btsc.w    w0, #0xf
    655e:	00 00 ea    	neg.w     w0, w0
    6560:	00 00 ea    	neg.w     w0, w0
    6562:	4f 00 de    	lsr.w     w0, #0xf, w0
    6564:	00 40 78    	mov.b     w0, w0
    6566:	00 80 fb    	ze        w0, w0
    6568:	61 00 60    	and.w     w0, #0x1, w0
    656a:	45 00 dd    	sl.w      w0, #0x5, w0
    656c:	71 17 80    	mov.w     0x2ee, w1
    656e:	01 50 a1    	bclr.w    w1, #0x5
    6570:	01 00 70    	ior.w     w0, w1, w0
    6572:	70 17 88    	mov.w     w0, 0x2ee
    6574:	21 00 37    	bra       0x65b8 <.L27>

00006576 <.L30>:
    else if (pin == 2)
    6576:	1e 00 78    	mov.w     [w14], w0
    6578:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    657a:	0e 00 3a    	bra       NZ, 0x6598 <.L31>
        D2_OD = (val) ? 1 : 0;
    657c:	1e 00 90    	mov.w     [w14+2], w0
    657e:	00 f0 a7    	btsc.w    w0, #0xf
    6580:	00 00 ea    	neg.w     w0, w0
    6582:	00 00 ea    	neg.w     w0, w0
    6584:	4f 00 de    	lsr.w     w0, #0xf, w0
    6586:	00 40 78    	mov.b     w0, w0
    6588:	00 80 fb    	ze        w0, w0
    658a:	61 00 60    	and.w     w0, #0x1, w0
    658c:	49 00 dd    	sl.w      w0, #0x9, w0
    658e:	f1 16 80    	mov.w     0x2de, w1
    6590:	01 90 a1    	bclr.w    w1, #0x9
    6592:	01 00 70    	ior.w     w0, w1, w0
    6594:	f0 16 88    	mov.w     w0, 0x2de
    6596:	10 00 37    	bra       0x65b8 <.L27>

00006598 <.L31>:
    else if (pin == 3)
    6598:	1e 00 78    	mov.w     [w14], w0
    659a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    659c:	0d 00 3a    	bra       NZ, 0x65b8 <.L27>
        D3_OD = (val) ? 1 : 0;
    659e:	1e 00 90    	mov.w     [w14+2], w0
    65a0:	00 f0 a7    	btsc.w    w0, #0xf
    65a2:	00 00 ea    	neg.w     w0, w0
    65a4:	00 00 ea    	neg.w     w0, w0
    65a6:	4f 00 de    	lsr.w     w0, #0xf, w0
    65a8:	00 40 78    	mov.b     w0, w0
    65aa:	00 80 fb    	ze        w0, w0
    65ac:	61 00 60    	and.w     w0, #0x1, w0
    65ae:	4a 00 dd    	sl.w      w0, #0xa, w0
    65b0:	f1 16 80    	mov.w     0x2de, w1
    65b2:	01 a0 a1    	bclr.w    w1, #0xa
    65b4:	01 00 70    	ior.w     w0, w1, w0
    65b6:	f0 16 88    	mov.w     w0, 0x2de

000065b8 <.L27>:
}
    65b8:	00 80 fa    	ulnk      
    65ba:	00 00 06    	return    

000065bc <_digout_get_od>:

uint16_t digout_get_od(uint16_t pin) {
    65bc:	02 00 fa    	lnk       #0x2
    65be:	00 0f 78    	mov.w     w0, [w14]
    if (pin == 0)
    65c0:	1e 00 78    	mov.w     [w14], w0
    65c2:	00 00 e0    	cp0.w     w0
    65c4:	05 00 3a    	bra       NZ, 0x65d0 <.L33>
        return D0_OD;
    65c6:	70 17 80    	mov.w     0x2ee, w0
    65c8:	44 00 de    	lsr.w     w0, #0x4, w0
    65ca:	61 40 60    	and.b     w0, #0x1, w0
    65cc:	00 80 fb    	ze        w0, w0
    65ce:	19 00 37    	bra       0x6602 <.L34>

000065d0 <.L33>:
    else if (pin == 1)
    65d0:	1e 00 78    	mov.w     [w14], w0
    65d2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    65d4:	05 00 3a    	bra       NZ, 0x65e0 <.L35>
        return D1_OD;
    65d6:	70 17 80    	mov.w     0x2ee, w0
    65d8:	45 00 de    	lsr.w     w0, #0x5, w0
    65da:	61 40 60    	and.b     w0, #0x1, w0
    65dc:	00 80 fb    	ze        w0, w0
    65de:	11 00 37    	bra       0x6602 <.L34>

000065e0 <.L35>:
    else if (pin == 2)
    65e0:	1e 00 78    	mov.w     [w14], w0
    65e2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    65e4:	05 00 3a    	bra       NZ, 0x65f0 <.L36>
        return D2_OD;
    65e6:	f0 16 80    	mov.w     0x2de, w0
    65e8:	49 00 de    	lsr.w     w0, #0x9, w0
    65ea:	61 40 60    	and.b     w0, #0x1, w0
    65ec:	00 80 fb    	ze        w0, w0
    65ee:	09 00 37    	bra       0x6602 <.L34>

000065f0 <.L36>:
    else if (pin == 3)
    65f0:	1e 00 78    	mov.w     [w14], w0
    65f2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    65f4:	05 00 3a    	bra       NZ, 0x6600 <.L37>
        return D3_OD;
    65f6:	f0 16 80    	mov.w     0x2de, w0
    65f8:	4a 00 de    	lsr.w     w0, #0xa, w0
    65fa:	61 40 60    	and.b     w0, #0x1, w0
    65fc:	00 80 fb    	ze        w0, w0
    65fe:	01 00 37    	bra       0x6602 <.L34>

00006600 <.L37>:
    else
        return 0xFFFF;
    6600:	00 80 eb    	setm.w    w0

00006602 <.L34>:
}
    6602:	00 80 fa    	ulnk      
    6604:	00 00 06    	return    

00006606 <_digout_set_duty>:

void digout_set_duty(uint16_t pin, uint16_t duty) {
    6606:	0a 00 fa    	lnk       #0xa
    6608:	30 07 98    	mov.w     w0, [w14+6]
    660a:	41 07 98    	mov.w     w1, [w14+8]
    OCx_T *oc;
    WORD32 temp;

    oc = (OCx_T *)&OC1CON1;
    660c:	00 19 20    	mov.w     #0x190, w0
    660e:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4) {
    6610:	3e 00 90    	mov.w     [w14+6], w0
    6612:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6614:	18 00 3e    	bra       GTU, 0x6646 <.L38>
        temp.ul = (uint32_t)duty * (uint32_t)(oc[pin].OCxRS);
    6616:	4e 00 90    	mov.w     [w14+8], w0
    6618:	61 01 b8    	mul.uu    w0, #0x1, w2
    661a:	3e 00 90    	mov.w     [w14+6], w0
    661c:	6a 00 b9    	mul.su    w0, #0xa, w0
    661e:	00 00 78    	mov.w     w0, w0
    6620:	1e 00 40    	add.w     w0, [w14], w0
    6622:	20 00 90    	mov.w     [w0+4], w0
    6624:	80 00 eb    	clr.w     w1
    6626:	00 9a b9    	mul.ss    w3, w0, w4
    6628:	04 02 78    	mov.w     w4, w4
    662a:	02 8b b9    	mul.ss    w1, w2, w6
    662c:	86 02 78    	mov.w     w6, w5
    662e:	05 02 42    	add.w     w4, w5, w4
    6630:	00 10 b8    	mul.uu    w2, w0, w0
    6632:	01 02 42    	add.w     w4, w1, w4
    6634:	84 00 78    	mov.w     w4, w1
    6636:	10 07 98    	mov.w     w0, [w14+2]
    6638:	21 07 98    	mov.w     w1, [w14+4]
        oc[pin].OCxR = temp.w[1];
    663a:	3e 00 90    	mov.w     [w14+6], w0
    663c:	6a 00 b9    	mul.su    w0, #0xa, w0
    663e:	00 00 78    	mov.w     w0, w0
    6640:	1e 00 40    	add.w     w0, [w14], w0
    6642:	ae 00 90    	mov.w     [w14+4], w1
    6644:	31 00 98    	mov.w     w1, [w0+6]

00006646 <.L38>:
    }
}
    6646:	00 80 fa    	ulnk      
    6648:	00 00 06    	return    

0000664a <_digout_get_duty>:

uint16_t digout_get_duty(uint16_t pin) {
    664a:	08 00 fa    	lnk       #0x8
    664c:	30 07 98    	mov.w     w0, [w14+6]
    OCx_T *oc;
    WORD32 temp;

    oc = (OCx_T *)&OC1CON1;
    664e:	00 19 20    	mov.w     #0x190, w0
    6650:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4) {
    6652:	3e 00 90    	mov.w     [w14+6], w0
    6654:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6656:	15 00 3e    	bra       GTU, 0x6682 <.L41>
        temp.w[0] = 0;
    6658:	00 00 eb    	clr.w     w0
    665a:	10 07 98    	mov.w     w0, [w14+2]
        temp.w[1] = oc[pin].OCxR;
    665c:	3e 00 90    	mov.w     [w14+6], w0
    665e:	6a 00 b9    	mul.su    w0, #0xa, w0
    6660:	00 00 78    	mov.w     w0, w0
    6662:	1e 00 40    	add.w     w0, [w14], w0
    6664:	30 00 90    	mov.w     [w0+6], w0
    6666:	20 07 98    	mov.w     w0, [w14+4]
        return (uint16_t)(temp.ul / (uint32_t)(oc[pin].OCxRS));
    6668:	1e 02 90    	mov.w     [w14+2], w4
    666a:	ae 02 90    	mov.w     [w14+4], w5
    666c:	3e 00 90    	mov.w     [w14+6], w0
    666e:	6a 00 b9    	mul.su    w0, #0xa, w0
    6670:	00 00 78    	mov.w     w0, w0
    6672:	1e 00 40    	add.w     w0, [w14], w0
    6674:	20 00 90    	mov.w     [w0+4], w0
    6676:	80 00 eb    	clr.w     w1
    6678:	00 01 be    	mov.d     w0, w2
    667a:	04 00 be    	mov.d     w4, w0
    667c:	84 d6 07    	rcall     0x1386 <___udivsi3>
    667e:	00 00 78    	mov.w     w0, w0
    6680:	01 00 37    	bra       0x6684 <.L42>

00006682 <.L41>:
    } else
        return 0xFFFF;
    6682:	00 80 eb    	setm.w    w0

00006684 <.L42>:
}
    6684:	00 80 fa    	ulnk      
    6686:	00 00 06    	return    

00006688 <_digout_set_period>:

void digout_set_period(uint16_t pin, uint16_t period) {
    6688:	0c 00 fa    	lnk       #0xc
    668a:	40 07 98    	mov.w     w0, [w14+8]
    668c:	51 07 98    	mov.w     w1, [w14+10]
    OCx_T *oc;
    WORD32 temp;
    uint16_t duty;

    oc = (OCx_T *)&OC1CON1;
    668e:	00 19 20    	mov.w     #0x190, w0
    6690:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4) {
    6692:	4e 00 90    	mov.w     [w14+8], w0
    6694:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6696:	34 00 3e    	bra       GTU, 0x6700 <.L43>
        temp.w[0] = 0;
    6698:	00 00 eb    	clr.w     w0
    669a:	20 07 98    	mov.w     w0, [w14+4]
        temp.w[1] = oc[pin].OCxR;
    669c:	4e 00 90    	mov.w     [w14+8], w0
    669e:	6a 00 b9    	mul.su    w0, #0xa, w0
    66a0:	00 00 78    	mov.w     w0, w0
    66a2:	1e 00 40    	add.w     w0, [w14], w0
    66a4:	30 00 90    	mov.w     [w0+6], w0
    66a6:	30 07 98    	mov.w     w0, [w14+6]
        duty = (uint16_t)(temp.ul / (uint32_t)(oc[pin].OCxRS));
    66a8:	2e 02 90    	mov.w     [w14+4], w4
    66aa:	be 02 90    	mov.w     [w14+6], w5
    66ac:	4e 00 90    	mov.w     [w14+8], w0
    66ae:	6a 00 b9    	mul.su    w0, #0xa, w0
    66b0:	00 00 78    	mov.w     w0, w0
    66b2:	1e 00 40    	add.w     w0, [w14], w0
    66b4:	20 00 90    	mov.w     [w0+4], w0
    66b6:	80 00 eb    	clr.w     w1
    66b8:	00 01 be    	mov.d     w0, w2
    66ba:	04 00 be    	mov.d     w4, w0
    66bc:	64 d6 07    	rcall     0x1386 <___udivsi3>
    66be:	10 07 98    	mov.w     w0, [w14+2]
        temp.ul = (uint32_t)duty * (uint32_t)period;
    66c0:	1e 00 90    	mov.w     [w14+2], w0
    66c2:	61 01 b8    	mul.uu    w0, #0x1, w2
    66c4:	5e 00 90    	mov.w     [w14+10], w0
    66c6:	80 00 eb    	clr.w     w1
    66c8:	00 9a b9    	mul.ss    w3, w0, w4
    66ca:	04 02 78    	mov.w     w4, w4
    66cc:	02 8b b9    	mul.ss    w1, w2, w6
    66ce:	86 02 78    	mov.w     w6, w5
    66d0:	05 02 42    	add.w     w4, w5, w4
    66d2:	00 10 b8    	mul.uu    w2, w0, w0
    66d4:	01 02 42    	add.w     w4, w1, w4
    66d6:	84 00 78    	mov.w     w4, w1
    66d8:	20 07 98    	mov.w     w0, [w14+4]
    66da:	31 07 98    	mov.w     w1, [w14+6]
        oc[pin].OCxRS = period;
    66dc:	4e 00 90    	mov.w     [w14+8], w0
    66de:	6a 00 b9    	mul.su    w0, #0xa, w0
    66e0:	00 00 78    	mov.w     w0, w0
    66e2:	1e 00 40    	add.w     w0, [w14], w0
    66e4:	de 00 90    	mov.w     [w14+10], w1
    66e6:	21 00 98    	mov.w     w1, [w0+4]
        oc[pin].OCxR = temp.w[1];
    66e8:	4e 00 90    	mov.w     [w14+8], w0
    66ea:	6a 00 b9    	mul.su    w0, #0xa, w0
    66ec:	00 00 78    	mov.w     w0, w0
    66ee:	1e 00 40    	add.w     w0, [w14], w0
    66f0:	be 00 90    	mov.w     [w14+6], w1
    66f2:	31 00 98    	mov.w     w1, [w0+6]
        oc[pin].OCxTMR = 0;
    66f4:	4e 00 90    	mov.w     [w14+8], w0
    66f6:	6a 00 b9    	mul.su    w0, #0xa, w0
    66f8:	00 00 78    	mov.w     w0, w0
    66fa:	1e 00 40    	add.w     w0, [w14], w0
    66fc:	80 00 eb    	clr.w     w1
    66fe:	41 00 98    	mov.w     w1, [w0+8]

00006700 <.L43>:
    }
}
    6700:	00 80 fa    	ulnk      
    6702:	00 00 06    	return    

00006704 <_digout_get_period>:

uint16_t digout_get_period(uint16_t pin) {
    6704:	04 00 fa    	lnk       #0x4
    6706:	10 07 98    	mov.w     w0, [w14+2]
    OCx_T *oc;

    oc = (OCx_T *)&OC1CON1;
    6708:	00 19 20    	mov.w     #0x190, w0
    670a:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4)
    670c:	1e 00 90    	mov.w     [w14+2], w0
    670e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6710:	06 00 3e    	bra       GTU, 0x671e <.L46>
        return oc[pin].OCxRS;
    6712:	1e 00 90    	mov.w     [w14+2], w0
    6714:	6a 00 b9    	mul.su    w0, #0xa, w0
    6716:	00 00 78    	mov.w     w0, w0
    6718:	1e 00 40    	add.w     w0, [w14], w0
    671a:	20 00 90    	mov.w     [w0+4], w0
    671c:	01 00 37    	bra       0x6720 <.L47>

0000671e <.L46>:
    else
        return 0xFFFF;
    671e:	00 80 eb    	setm.w    w0

00006720 <.L47>:
}
    6720:	00 80 fa    	ulnk      
    6722:	00 00 06    	return    

00006724 <_digout_set_width>:

void digout_set_width(uint16_t pin, uint16_t width) {
    6724:	06 00 fa    	lnk       #0x6
    6726:	10 07 98    	mov.w     w0, [w14+2]
    6728:	21 07 98    	mov.w     w1, [w14+4]
    OCx_T *oc;

    oc = (OCx_T *)&OC1CON1;
    672a:	00 19 20    	mov.w     #0x190, w0
    672c:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4){
    672e:	1e 00 90    	mov.w     [w14+2], w0
    6730:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6732:	12 00 3e    	bra       GTU, 0x6758 <.L48>
        oc[pin].OCxRS = width;
    6734:	1e 00 90    	mov.w     [w14+2], w0
    6736:	6a 00 b9    	mul.su    w0, #0xa, w0
    6738:	00 00 78    	mov.w     w0, w0
    673a:	1e 00 40    	add.w     w0, [w14], w0
    673c:	ae 00 90    	mov.w     [w14+4], w1
    673e:	21 00 98    	mov.w     w1, [w0+4]
        oc[pin].OCxR = 1;
    6740:	1e 00 90    	mov.w     [w14+2], w0
    6742:	6a 00 b9    	mul.su    w0, #0xa, w0
    6744:	00 00 78    	mov.w     w0, w0
    6746:	1e 00 40    	add.w     w0, [w14], w0
    6748:	11 00 20    	mov.w     #0x1, w1
    674a:	31 00 98    	mov.w     w1, [w0+6]
        oc[pin].OCxTMR = 0;
    674c:	1e 00 90    	mov.w     [w14+2], w0
    674e:	6a 00 b9    	mul.su    w0, #0xa, w0
    6750:	00 00 78    	mov.w     w0, w0
    6752:	1e 00 40    	add.w     w0, [w14], w0
    6754:	80 00 eb    	clr.w     w1
    6756:	41 00 98    	mov.w     w1, [w0+8]

00006758 <.L48>:
    }
}
    6758:	00 80 fa    	ulnk      
    675a:	00 00 06    	return    

0000675c <_digout_get_width>:

uint16_t digout_get_width(uint16_t pin) {
    675c:	04 00 fa    	lnk       #0x4
    675e:	10 07 98    	mov.w     w0, [w14+2]
    OCx_T *oc;

    oc = (OCx_T *)&OC1CON1;
    6760:	00 19 20    	mov.w     #0x190, w0
    6762:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4)
    6764:	1e 00 90    	mov.w     [w14+2], w0
    6766:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6768:	06 00 3e    	bra       GTU, 0x6776 <.L51>
        return oc[pin].OCxRS;
    676a:	1e 00 90    	mov.w     [w14+2], w0
    676c:	6a 00 b9    	mul.su    w0, #0xa, w0
    676e:	00 00 78    	mov.w     w0, w0
    6770:	1e 00 40    	add.w     w0, [w14], w0
    6772:	20 00 90    	mov.w     [w0+4], w0
    6774:	01 00 37    	bra       0x6778 <.L52>

00006776 <.L51>:
    else
        return 0xFFFF;
    6776:	00 80 eb    	setm.w    w0

00006778 <.L52>:
}
    6778:	00 80 fa    	ulnk      
    677a:	00 00 06    	return    

0000677c <_digout_set_timer1_period>:

void digout_set_timer1_period(uint16_t value1, uint16_t value2) {
    677c:	08 00 fa    	lnk       #0x8
    677e:	20 07 98    	mov.w     w0, [w14+4]
    6780:	31 07 98    	mov.w     w1, [w14+6]
    uint16_t pin;
    OCx_T *oc;

    T1CONbits.TON = 0;
    6782:	05 e1 a9    	bclr.b    0x105, #0x7
    PR1 = value1;
    6784:	ae 00 90    	mov.w     [w14+4], w1
    6786:	11 08 88    	mov.w     w1, 0x102
    T1CON = value2;
    6788:	be 00 90    	mov.w     [w14+6], w1
    678a:	21 08 88    	mov.w     w1, 0x104
    TMR1 = 0;
    678c:	00 21 ef    	clr.w     0x100

    oc = (OCx_T *)&OC1CON1;
    678e:	00 19 20    	mov.w     #0x190, w0
    6790:	10 07 98    	mov.w     w0, [w14+2]
    for (pin = 0; pin < 4; pin++) {
    6792:	00 00 eb    	clr.w     w0
    6794:	00 0f 78    	mov.w     w0, [w14]
    6796:	0f 00 37    	bra       0x67b6 <.L54>

00006798 <.L56>:
        if (pin_modes[pin] == DIGOUT_SERVO) {
    6798:	c1 87 20    	mov.w     #0x87c, w1
    679a:	1e 00 78    	mov.w     [w14], w0
    679c:	00 00 40    	add.w     w0, w0, w0
    679e:	00 80 40    	add.w     w1, w0, w0
    67a0:	10 00 78    	mov.w     [w0], w0
    67a2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    67a4:	07 00 3a    	bra       NZ, 0x67b4 <.L55>
            oc[pin].OCxTMR = 0;
    67a6:	1e 00 78    	mov.w     [w14], w0
    67a8:	6a 00 b9    	mul.su    w0, #0xa, w0
    67aa:	00 00 78    	mov.w     w0, w0
    67ac:	9e 00 90    	mov.w     [w14+2], w1
    67ae:	00 80 40    	add.w     w1, w0, w0
    67b0:	80 00 eb    	clr.w     w1
    67b2:	41 00 98    	mov.w     w1, [w0+8]

000067b4 <.L55>:
    67b4:	1e 0f e8    	inc.w     [w14], [w14]

000067b6 <.L54>:
    67b6:	1e 00 78    	mov.w     [w14], w0
    67b8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    67ba:	ee ff 36    	bra       LEU, 0x6798 <.L56>
        }
    }
    T1CONbits.TON = 1;
    67bc:	05 e1 a8    	bset.b    0x105, #0x7
}
    67be:	00 80 fa    	ulnk      
    67c0:	00 00 06    	return    

000067c2 <_digout_set_mode>:

void digout_set_mode(uint16_t pin, uint16_t mode) {
    67c2:	0a 00 fa    	lnk       #0xa
    67c4:	30 07 98    	mov.w     w0, [w14+6]
    67c6:	41 07 98    	mov.w     w1, [w14+8]
    uint8_t *RPOR, *RPINR;
    OCx_T *oc;

    if ((pin > 3) || (mode > DIGOUT_SERVO))
    67c8:	3e 00 90    	mov.w     [w14+6], w0
    67ca:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    67cc:	7d 01 3e    	bra       GTU, 0x6ac8 <.L86>
    67ce:	4e 00 90    	mov.w     [w14+8], w0
    67d0:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    67d2:	7c 01 3e    	bra       GTU, 0x6acc <.L87>
        return;

    oc = (OCx_T *)&OC1CON1;
    67d4:	00 19 20    	mov.w     #0x190, w0
    67d6:	00 0f 78    	mov.w     w0, [w14]
    RPOR = (uint8_t *)&RPOR0;
    67d8:	00 6c 20    	mov.w     #0x6c0, w0
    67da:	10 07 98    	mov.w     w0, [w14+2]
    RPINR = (uint8_t *)&RPINR0;
    67dc:	00 68 20    	mov.w     #0x680, w0
    67de:	20 07 98    	mov.w     w0, [w14+4]

    if ((pin_modes[pin] == DIGOUT_PWM) || (pin_modes[pin] == DIGOUT_SERVO)) {
    67e0:	c1 87 20    	mov.w     #0x87c, w1
    67e2:	3e 00 90    	mov.w     [w14+6], w0
    67e4:	00 00 40    	add.w     w0, w0, w0
    67e6:	00 80 40    	add.w     w1, w0, w0
    67e8:	10 00 78    	mov.w     [w0], w0
    67ea:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    67ec:	07 00 32    	bra       Z, 0x67fc <.L61>
    67ee:	c1 87 20    	mov.w     #0x87c, w1
    67f0:	3e 00 90    	mov.w     [w14+6], w0
    67f2:	00 00 40    	add.w     w0, w0, w0
    67f4:	00 80 40    	add.w     w1, w0, w0
    67f6:	10 00 78    	mov.w     [w0], w0
    67f8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    67fa:	3d 00 3a    	bra       NZ, 0x6876 <.L62>

000067fc <.L61>:
        oc[pin].OCxCON1 = 0;
    67fc:	3e 00 90    	mov.w     [w14+6], w0
    67fe:	6a 00 b9    	mul.su    w0, #0xa, w0
    6800:	00 00 78    	mov.w     w0, w0
    6802:	1e 00 40    	add.w     w0, [w14], w0
    6804:	80 00 eb    	clr.w     w1
    6806:	01 08 78    	mov.w     w1, [w0]
        oc[pin].OCxCON2 = 0;
    6808:	3e 00 90    	mov.w     [w14+6], w0
    680a:	6a 00 b9    	mul.su    w0, #0xa, w0
    680c:	00 00 78    	mov.w     w0, w0
    680e:	1e 00 40    	add.w     w0, [w14], w0
    6810:	80 00 eb    	clr.w     w1
    6812:	11 00 98    	mov.w     w1, [w0+2]
        __builtin_write_OSCCONL(OSCCON & 0xBF);
    6814:	11 3a 80    	mov.w     0x742, w1
    6816:	f0 0b 20    	mov.w     #0xbf, w0
    6818:	00 81 60    	and.w     w1, w0, w2
    681a:	60 04 20    	mov.w     #0x46, w0
    681c:	71 05 20    	mov.w     #0x57, w1
    681e:	23 74 20    	mov.w     #0x742, w3
    6820:	80 49 78    	mov.b     w0, [w3]
    6822:	81 49 78    	mov.b     w1, [w3]
    6824:	82 49 78    	mov.b     w2, [w3]
        if (pin == 0)
    6826:	3e 00 90    	mov.w     [w14+6], w0
    6828:	00 00 e0    	cp0.w     w0
    682a:	05 00 3a    	bra       NZ, 0x6836 <.L63>
            RPOR[D0_RP] = 0;
    682c:	1e 00 90    	mov.w     [w14+2], w0
    682e:	6a 00 40    	add.w     w0, #0xa, w0
    6830:	80 40 eb    	clr.b     w1
    6832:	01 48 78    	mov.b     w1, [w0]
    6834:	17 00 37    	bra       0x6864 <.L64>

00006836 <.L63>:
        else if (pin == 1)
    6836:	3e 00 90    	mov.w     [w14+6], w0
    6838:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    683a:	05 00 3a    	bra       NZ, 0x6846 <.L65>
            RPOR[D1_RP] = 0;
    683c:	1e 00 90    	mov.w     [w14+2], w0
    683e:	71 00 40    	add.w     w0, #0x11, w0
    6840:	80 40 eb    	clr.b     w1
    6842:	01 48 78    	mov.b     w1, [w0]
    6844:	0f 00 37    	bra       0x6864 <.L64>

00006846 <.L65>:
        else if (pin == 2)
    6846:	3e 00 90    	mov.w     [w14+6], w0
    6848:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    684a:	05 00 3a    	bra       NZ, 0x6856 <.L66>
            RPOR[D2_RP] = 0;
    684c:	1e 00 90    	mov.w     [w14+2], w0
    684e:	64 00 40    	add.w     w0, #0x4, w0
    6850:	80 40 eb    	clr.b     w1
    6852:	01 48 78    	mov.b     w1, [w0]
    6854:	07 00 37    	bra       0x6864 <.L64>

00006856 <.L66>:
        else if (pin == 3)
    6856:	3e 00 90    	mov.w     [w14+6], w0
    6858:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    685a:	04 00 3a    	bra       NZ, 0x6864 <.L64>
            RPOR[D3_RP] = 0;
    685c:	1e 00 90    	mov.w     [w14+2], w0
    685e:	63 00 40    	add.w     w0, #0x3, w0
    6860:	80 40 eb    	clr.b     w1
    6862:	01 48 78    	mov.b     w1, [w0]

00006864 <.L64>:
        __builtin_write_OSCCONL(OSCCON | 0x40);
    6864:	10 3a 80    	mov.w     0x742, w0
    6866:	00 01 78    	mov.w     w0, w2
    6868:	02 60 a0    	bset.w    w2, #0x6
    686a:	60 04 20    	mov.w     #0x46, w0
    686c:	71 05 20    	mov.w     #0x57, w1
    686e:	23 74 20    	mov.w     #0x742, w3
    6870:	80 49 78    	mov.b     w0, [w3]
    6872:	81 49 78    	mov.b     w1, [w3]
    6874:	82 49 78    	mov.b     w2, [w3]

00006876 <.L62>:
    }

    if (pin_modes[pin] == DIGOUT_PWM) {
    6876:	c1 87 20    	mov.w     #0x87c, w1
    6878:	3e 00 90    	mov.w     [w14+6], w0
    687a:	00 00 40    	add.w     w0, w0, w0
    687c:	00 80 40    	add.w     w1, w0, w0
    687e:	10 00 78    	mov.w     [w0], w0
    6880:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    6882:	15 00 3a    	bra       NZ, 0x68ae <.L67>
        pwm_OCxRS_save[pin] = oc[pin].OCxRS;
    6884:	3e 00 90    	mov.w     [w14+6], w0
    6886:	6a 00 b9    	mul.su    w0, #0xa, w0
    6888:	00 00 78    	mov.w     w0, w0
    688a:	1e 00 40    	add.w     w0, [w14], w0
    688c:	a0 00 90    	mov.w     [w0+4], w1
    688e:	02 80 20    	mov.w     #0x800, w2
    6890:	3e 00 90    	mov.w     [w14+6], w0
    6892:	00 00 40    	add.w     w0, w0, w0
    6894:	00 00 41    	add.w     w2, w0, w0
    6896:	01 08 78    	mov.w     w1, [w0]
        pwm_OCxR_save[pin] = oc[pin].OCxR;
    6898:	3e 00 90    	mov.w     [w14+6], w0
    689a:	6a 00 b9    	mul.su    w0, #0xa, w0
    689c:	00 00 78    	mov.w     w0, w0
    689e:	1e 00 40    	add.w     w0, [w14], w0
    68a0:	b0 00 90    	mov.w     [w0+6], w1
    68a2:	82 80 20    	mov.w     #0x808, w2
    68a4:	3e 00 90    	mov.w     [w14+6], w0
    68a6:	00 00 40    	add.w     w0, w0, w0
    68a8:	00 00 41    	add.w     w2, w0, w0
    68aa:	01 08 78    	mov.w     w1, [w0]
    68ac:	1b 00 37    	bra       0x68e4 <.L68>

000068ae <.L67>:
    } else if (pin_modes[pin] == DIGOUT_SERVO) {
    68ae:	c1 87 20    	mov.w     #0x87c, w1
    68b0:	3e 00 90    	mov.w     [w14+6], w0
    68b2:	00 00 40    	add.w     w0, w0, w0
    68b4:	00 80 40    	add.w     w1, w0, w0
    68b6:	10 00 78    	mov.w     [w0], w0
    68b8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    68ba:	14 00 3a    	bra       NZ, 0x68e4 <.L68>
        servo_OCxRS_save[pin] = oc[pin].OCxRS;
    68bc:	3e 00 90    	mov.w     [w14+6], w0
    68be:	6a 00 b9    	mul.su    w0, #0xa, w0
    68c0:	00 00 78    	mov.w     w0, w0
    68c2:	1e 00 40    	add.w     w0, [w14], w0
    68c4:	a0 00 90    	mov.w     [w0+4], w1
    68c6:	02 81 20    	mov.w     #0x810, w2
    68c8:	3e 00 90    	mov.w     [w14+6], w0
    68ca:	00 00 40    	add.w     w0, w0, w0
    68cc:	00 00 41    	add.w     w2, w0, w0
    68ce:	01 08 78    	mov.w     w1, [w0]
        servo_OCxR_save[pin] = oc[pin].OCxR;
    68d0:	3e 00 90    	mov.w     [w14+6], w0
    68d2:	6a 00 b9    	mul.su    w0, #0xa, w0
    68d4:	00 00 78    	mov.w     w0, w0
    68d6:	1e 00 40    	add.w     w0, [w14], w0
    68d8:	b0 00 90    	mov.w     [w0+6], w1
    68da:	82 81 20    	mov.w     #0x818, w2
    68dc:	3e 00 90    	mov.w     [w14+6], w0
    68de:	00 00 40    	add.w     w0, w0, w0
    68e0:	00 00 41    	add.w     w2, w0, w0
    68e2:	01 08 78    	mov.w     w1, [w0]

000068e4 <.L68>:
    }

    pin_modes[pin] = mode;
    68e4:	c1 87 20    	mov.w     #0x87c, w1
    68e6:	3e 00 90    	mov.w     [w14+6], w0
    68e8:	00 00 40    	add.w     w0, w0, w0
    68ea:	00 80 40    	add.w     w1, w0, w0
    68ec:	ce 00 90    	mov.w     [w14+8], w1
    68ee:	01 08 78    	mov.w     w1, [w0]
    if (mode == DIGOUT_OUT) {
    68f0:	4e 00 90    	mov.w     [w14+8], w0
    68f2:	00 00 e0    	cp0.w     w0
    68f4:	14 00 3a    	bra       NZ, 0x691e <.L69>
        if (pin == 0)
    68f6:	3e 00 90    	mov.w     [w14+6], w0
    68f8:	00 00 e0    	cp0.w     w0
    68fa:	02 00 3a    	bra       NZ, 0x6900 <.L70>
            D0_DIR = OUT;
    68fc:	e8 82 a9    	bclr.b    0x2e8, #0x4
    68fe:	e7 00 37    	bra       0x6ace <.L57>

00006900 <.L70>:
        else if (pin == 1)
    6900:	3e 00 90    	mov.w     [w14+6], w0
    6902:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    6904:	02 00 3a    	bra       NZ, 0x690a <.L71>
            D1_DIR = OUT;
    6906:	e8 a2 a9    	bclr.b    0x2e8, #0x5
    6908:	e2 00 37    	bra       0x6ace <.L57>

0000690a <.L71>:
        else if (pin == 2)
    690a:	3e 00 90    	mov.w     [w14+6], w0
    690c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    690e:	02 00 3a    	bra       NZ, 0x6914 <.L72>
            D2_DIR = OUT;
    6910:	d9 22 a9    	bclr.b    0x2d9, #0x1
    6912:	dd 00 37    	bra       0x6ace <.L57>

00006914 <.L72>:
        else if (pin == 3)
    6914:	3e 00 90    	mov.w     [w14+6], w0
    6916:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6918:	da 00 3a    	bra       NZ, 0x6ace <.L57>
            D3_DIR = OUT;
    691a:	d9 42 a9    	bclr.b    0x2d9, #0x2
    691c:	d8 00 37    	bra       0x6ace <.L57>

0000691e <.L69>:
    } else if (mode == DIGOUT_IN) {
    691e:	4e 00 90    	mov.w     [w14+8], w0
    6920:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    6922:	14 00 3a    	bra       NZ, 0x694c <.L73>
        if (pin == 0)
    6924:	3e 00 90    	mov.w     [w14+6], w0
    6926:	00 00 e0    	cp0.w     w0
    6928:	02 00 3a    	bra       NZ, 0x692e <.L74>
            D0_DIR = IN;
    692a:	e8 82 a8    	bset.b    0x2e8, #0x4
    692c:	d0 00 37    	bra       0x6ace <.L57>

0000692e <.L74>:
        else if (pin == 1)
    692e:	3e 00 90    	mov.w     [w14+6], w0
    6930:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    6932:	02 00 3a    	bra       NZ, 0x6938 <.L75>
            D1_DIR = IN;
    6934:	e8 a2 a8    	bset.b    0x2e8, #0x5
    6936:	cb 00 37    	bra       0x6ace <.L57>

00006938 <.L75>:
        else if (pin == 2)
    6938:	3e 00 90    	mov.w     [w14+6], w0
    693a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    693c:	02 00 3a    	bra       NZ, 0x6942 <.L76>
            D2_DIR = IN;
    693e:	d9 22 a8    	bset.b    0x2d9, #0x1
    6940:	c6 00 37    	bra       0x6ace <.L57>

00006942 <.L76>:
        else if (pin == 3)
    6942:	3e 00 90    	mov.w     [w14+6], w0
    6944:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6946:	c3 00 3a    	bra       NZ, 0x6ace <.L57>
            D3_DIR = IN;
    6948:	d9 42 a8    	bset.b    0x2d9, #0x2
    694a:	c1 00 37    	bra       0x6ace <.L57>

0000694c <.L73>:
    } else if (mode == DIGOUT_PWM) {
    694c:	4e 00 90    	mov.w     [w14+8], w0
    694e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    6950:	5c 00 3a    	bra       NZ, 0x6a0a <.L77>
        __builtin_write_OSCCONL(OSCCON & 0xBF);
    6952:	11 3a 80    	mov.w     0x742, w1
    6954:	f0 0b 20    	mov.w     #0xbf, w0
    6956:	00 81 60    	and.w     w1, w0, w2
    6958:	60 04 20    	mov.w     #0x46, w0
    695a:	71 05 20    	mov.w     #0x57, w1
    695c:	23 74 20    	mov.w     #0x742, w3
    695e:	80 49 78    	mov.b     w0, [w3]
    6960:	81 49 78    	mov.b     w1, [w3]
    6962:	82 49 78    	mov.b     w2, [w3]
        if (pin == 0) {
    6964:	3e 00 90    	mov.w     [w14+6], w0
    6966:	00 00 e0    	cp0.w     w0
    6968:	06 00 3a    	bra       NZ, 0x6976 <.L78>
            D0_DIR = OUT;
    696a:	e8 82 a9    	bclr.b    0x2e8, #0x4
            RPOR[D0_RP] = OC1_RP;
    696c:	1e 00 90    	mov.w     [w14+2], w0
    696e:	6a 00 40    	add.w     w0, #0xa, w0
    6970:	21 c1 b3    	mov.b     #0x12, w1
    6972:	01 48 78    	mov.b     w1, [w0]
    6974:	1a 00 37    	bra       0x69aa <.L79>

00006976 <.L78>:
        } else if (pin == 1) {
    6976:	3e 00 90    	mov.w     [w14+6], w0
    6978:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    697a:	06 00 3a    	bra       NZ, 0x6988 <.L80>
            D1_DIR = OUT;
    697c:	e8 a2 a9    	bclr.b    0x2e8, #0x5
            RPOR[D1_RP] = OC2_RP;
    697e:	1e 00 90    	mov.w     [w14+2], w0
    6980:	71 00 40    	add.w     w0, #0x11, w0
    6982:	31 c1 b3    	mov.b     #0x13, w1
    6984:	01 48 78    	mov.b     w1, [w0]
    6986:	11 00 37    	bra       0x69aa <.L79>

00006988 <.L80>:
        } else if (pin == 2) {
    6988:	3e 00 90    	mov.w     [w14+6], w0
    698a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    698c:	06 00 3a    	bra       NZ, 0x699a <.L81>
            D2_DIR = OUT;
    698e:	d9 22 a9    	bclr.b    0x2d9, #0x1
            RPOR[D2_RP] = OC3_RP;
    6990:	1e 00 90    	mov.w     [w14+2], w0
    6992:	64 00 40    	add.w     w0, #0x4, w0
    6994:	41 c1 b3    	mov.b     #0x14, w1
    6996:	01 48 78    	mov.b     w1, [w0]
    6998:	08 00 37    	bra       0x69aa <.L79>

0000699a <.L81>:
        } else if (pin == 3) {
    699a:	3e 00 90    	mov.w     [w14+6], w0
    699c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    699e:	05 00 3a    	bra       NZ, 0x69aa <.L79>
            D3_DIR = OUT;
    69a0:	d9 42 a9    	bclr.b    0x2d9, #0x2
            RPOR[D3_RP] = OC4_RP;
    69a2:	1e 00 90    	mov.w     [w14+2], w0
    69a4:	63 00 40    	add.w     w0, #0x3, w0
    69a6:	51 c1 b3    	mov.b     #0x15, w1
    69a8:	01 48 78    	mov.b     w1, [w0]

000069aa <.L79>:
        }
        __builtin_write_OSCCONL(OSCCON | 0x40);
    69aa:	10 3a 80    	mov.w     0x742, w0
    69ac:	00 01 78    	mov.w     w0, w2
    69ae:	02 60 a0    	bset.w    w2, #0x6
    69b0:	60 04 20    	mov.w     #0x46, w0
    69b2:	71 05 20    	mov.w     #0x57, w1
    69b4:	23 74 20    	mov.w     #0x742, w3
    69b6:	80 49 78    	mov.b     w0, [w3]
    69b8:	81 49 78    	mov.b     w1, [w3]
    69ba:	82 49 78    	mov.b     w2, [w3]
        oc[pin].OCxRS = pwm_OCxRS_save[pin];
    69bc:	3e 00 90    	mov.w     [w14+6], w0
    69be:	6a 00 b9    	mul.su    w0, #0xa, w0
    69c0:	00 00 78    	mov.w     w0, w0
    69c2:	9e 00 40    	add.w     w0, [w14], w1
    69c4:	02 80 20    	mov.w     #0x800, w2
    69c6:	3e 00 90    	mov.w     [w14+6], w0
    69c8:	00 00 40    	add.w     w0, w0, w0
    69ca:	00 00 41    	add.w     w2, w0, w0
    69cc:	10 00 78    	mov.w     [w0], w0
    69ce:	a0 00 98    	mov.w     w0, [w1+4]
        oc[pin].OCxR = pwm_OCxR_save[pin];
    69d0:	3e 00 90    	mov.w     [w14+6], w0
    69d2:	6a 00 b9    	mul.su    w0, #0xa, w0
    69d4:	00 00 78    	mov.w     w0, w0
    69d6:	9e 00 40    	add.w     w0, [w14], w1
    69d8:	82 80 20    	mov.w     #0x808, w2
    69da:	3e 00 90    	mov.w     [w14+6], w0
    69dc:	00 00 40    	add.w     w0, w0, w0
    69de:	00 00 41    	add.w     w2, w0, w0
    69e0:	10 00 78    	mov.w     [w0], w0
    69e2:	b0 00 98    	mov.w     w0, [w1+6]
        oc[pin].OCxTMR = 0;
    69e4:	3e 00 90    	mov.w     [w14+6], w0
    69e6:	6a 00 b9    	mul.su    w0, #0xa, w0
    69e8:	00 00 78    	mov.w     w0, w0
    69ea:	1e 00 40    	add.w     w0, [w14], w0
    69ec:	80 00 eb    	clr.w     w1
    69ee:	41 00 98    	mov.w     w1, [w0+8]
        oc[pin].OCxCON1 = 0x1C06;
    69f0:	3e 00 90    	mov.w     [w14+6], w0
    69f2:	6a 00 b9    	mul.su    w0, #0xa, w0
    69f4:	00 00 78    	mov.w     w0, w0
    69f6:	1e 00 40    	add.w     w0, [w14], w0
    69f8:	61 c0 21    	mov.w     #0x1c06, w1
    69fa:	01 08 78    	mov.w     w1, [w0]
        oc[pin].OCxCON2 = 0x001F;
    69fc:	3e 00 90    	mov.w     [w14+6], w0
    69fe:	6a 00 b9    	mul.su    w0, #0xa, w0
    6a00:	00 00 78    	mov.w     w0, w0
    6a02:	1e 00 40    	add.w     w0, [w14], w0
    6a04:	f1 01 20    	mov.w     #0x1f, w1
    6a06:	11 00 98    	mov.w     w1, [w0+2]
    6a08:	62 00 37    	bra       0x6ace <.L57>

00006a0a <.L77>:
    } else if (mode == DIGOUT_SERVO) {
    6a0a:	4e 00 90    	mov.w     [w14+8], w0
    6a0c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6a0e:	5f 00 3a    	bra       NZ, 0x6ace <.L57>
        __builtin_write_OSCCONL(OSCCON & 0xBF);
    6a10:	11 3a 80    	mov.w     0x742, w1
    6a12:	f0 0b 20    	mov.w     #0xbf, w0
    6a14:	00 81 60    	and.w     w1, w0, w2
    6a16:	60 04 20    	mov.w     #0x46, w0
    6a18:	71 05 20    	mov.w     #0x57, w1
    6a1a:	23 74 20    	mov.w     #0x742, w3
    6a1c:	80 49 78    	mov.b     w0, [w3]
    6a1e:	81 49 78    	mov.b     w1, [w3]
    6a20:	82 49 78    	mov.b     w2, [w3]
        if (pin == 0) {
    6a22:	3e 00 90    	mov.w     [w14+6], w0
    6a24:	00 00 e0    	cp0.w     w0
    6a26:	06 00 3a    	bra       NZ, 0x6a34 <.L82>
            D0_DIR = OUT;
    6a28:	e8 82 a9    	bclr.b    0x2e8, #0x4
            RPOR[D0_RP] = OC1_RP;
    6a2a:	1e 00 90    	mov.w     [w14+2], w0
    6a2c:	6a 00 40    	add.w     w0, #0xa, w0
    6a2e:	21 c1 b3    	mov.b     #0x12, w1
    6a30:	01 48 78    	mov.b     w1, [w0]
    6a32:	1a 00 37    	bra       0x6a68 <.L83>

00006a34 <.L82>:
        } else if (pin == 1) {
    6a34:	3e 00 90    	mov.w     [w14+6], w0
    6a36:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    6a38:	06 00 3a    	bra       NZ, 0x6a46 <.L84>
            D1_DIR = OUT;
    6a3a:	e8 a2 a9    	bclr.b    0x2e8, #0x5
            RPOR[D1_RP] = OC2_RP;
    6a3c:	1e 00 90    	mov.w     [w14+2], w0
    6a3e:	71 00 40    	add.w     w0, #0x11, w0
    6a40:	31 c1 b3    	mov.b     #0x13, w1
    6a42:	01 48 78    	mov.b     w1, [w0]
    6a44:	11 00 37    	bra       0x6a68 <.L83>

00006a46 <.L84>:
        } else if (pin == 2) {
    6a46:	3e 00 90    	mov.w     [w14+6], w0
    6a48:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    6a4a:	06 00 3a    	bra       NZ, 0x6a58 <.L85>
            D2_DIR = OUT;
    6a4c:	d9 22 a9    	bclr.b    0x2d9, #0x1
            RPOR[D2_RP] = OC3_RP;
    6a4e:	1e 00 90    	mov.w     [w14+2], w0
    6a50:	64 00 40    	add.w     w0, #0x4, w0
    6a52:	41 c1 b3    	mov.b     #0x14, w1
    6a54:	01 48 78    	mov.b     w1, [w0]
    6a56:	08 00 37    	bra       0x6a68 <.L83>

00006a58 <.L85>:
        } else if (pin == 3) {
    6a58:	3e 00 90    	mov.w     [w14+6], w0
    6a5a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6a5c:	05 00 3a    	bra       NZ, 0x6a68 <.L83>
            D3_DIR = OUT;
    6a5e:	d9 42 a9    	bclr.b    0x2d9, #0x2
            RPOR[D3_RP] = OC4_RP;
    6a60:	1e 00 90    	mov.w     [w14+2], w0
    6a62:	63 00 40    	add.w     w0, #0x3, w0
    6a64:	51 c1 b3    	mov.b     #0x15, w1
    6a66:	01 48 78    	mov.b     w1, [w0]

00006a68 <.L83>:
        }
        __builtin_write_OSCCONL(OSCCON | 0x40);
    6a68:	10 3a 80    	mov.w     0x742, w0
    6a6a:	00 01 78    	mov.w     w0, w2
    6a6c:	02 60 a0    	bset.w    w2, #0x6
    6a6e:	60 04 20    	mov.w     #0x46, w0
    6a70:	71 05 20    	mov.w     #0x57, w1
    6a72:	23 74 20    	mov.w     #0x742, w3
    6a74:	80 49 78    	mov.b     w0, [w3]
    6a76:	81 49 78    	mov.b     w1, [w3]
    6a78:	82 49 78    	mov.b     w2, [w3]
        oc[pin].OCxRS = servo_OCxRS_save[pin];
    6a7a:	3e 00 90    	mov.w     [w14+6], w0
    6a7c:	6a 00 b9    	mul.su    w0, #0xa, w0
    6a7e:	00 00 78    	mov.w     w0, w0
    6a80:	9e 00 40    	add.w     w0, [w14], w1
    6a82:	02 81 20    	mov.w     #0x810, w2
    6a84:	3e 00 90    	mov.w     [w14+6], w0
    6a86:	00 00 40    	add.w     w0, w0, w0
    6a88:	00 00 41    	add.w     w2, w0, w0
    6a8a:	10 00 78    	mov.w     [w0], w0
    6a8c:	a0 00 98    	mov.w     w0, [w1+4]
        oc[pin].OCxR = servo_OCxR_save[pin];
    6a8e:	3e 00 90    	mov.w     [w14+6], w0
    6a90:	6a 00 b9    	mul.su    w0, #0xa, w0
    6a92:	00 00 78    	mov.w     w0, w0
    6a94:	9e 00 40    	add.w     w0, [w14], w1
    6a96:	82 81 20    	mov.w     #0x818, w2
    6a98:	3e 00 90    	mov.w     [w14+6], w0
    6a9a:	00 00 40    	add.w     w0, w0, w0
    6a9c:	00 00 41    	add.w     w2, w0, w0
    6a9e:	10 00 78    	mov.w     [w0], w0
    6aa0:	b0 00 98    	mov.w     w0, [w1+6]
        oc[pin].OCxTMR = 0;
    6aa2:	3e 00 90    	mov.w     [w14+6], w0
    6aa4:	6a 00 b9    	mul.su    w0, #0xa, w0
    6aa6:	00 00 78    	mov.w     w0, w0
    6aa8:	1e 00 40    	add.w     w0, [w14], w0
    6aaa:	80 00 eb    	clr.w     w1
    6aac:	41 00 98    	mov.w     w1, [w0+8]
        oc[pin].OCxCON1 = 0x1C0F;
    6aae:	3e 00 90    	mov.w     [w14+6], w0
    6ab0:	6a 00 b9    	mul.su    w0, #0xa, w0
    6ab2:	00 00 78    	mov.w     w0, w0
    6ab4:	1e 00 40    	add.w     w0, [w14], w0
    6ab6:	f1 c0 21    	mov.w     #0x1c0f, w1
    6ab8:	01 08 78    	mov.w     w1, [w0]
        oc[pin].OCxCON2 = 0x008B;
    6aba:	3e 00 90    	mov.w     [w14+6], w0
    6abc:	6a 00 b9    	mul.su    w0, #0xa, w0
    6abe:	00 00 78    	mov.w     w0, w0
    6ac0:	1e 00 40    	add.w     w0, [w14], w0
    6ac2:	b1 08 20    	mov.w     #0x8b, w1
    6ac4:	11 00 98    	mov.w     w1, [w0+2]
    6ac6:	03 00 37    	bra       0x6ace <.L57>

00006ac8 <.L86>:
    6ac8:	00 00 00    	nop       
    6aca:	01 00 37    	bra       0x6ace <.L57>

00006acc <.L87>:
    6acc:	00 00 00    	nop       

00006ace <.L57>:
    }
}
    6ace:	00 80 fa    	ulnk      
    6ad0:	00 00 06    	return    

00006ad2 <_digout_get_mode>:

uint16_t digout_get_mode(uint16_t pin) {
    6ad2:	02 00 fa    	lnk       #0x2
    6ad4:	00 0f 78    	mov.w     w0, [w14]
    if (pin < 4)
    6ad6:	1e 00 78    	mov.w     [w14], w0
    6ad8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    6ada:	06 00 3e    	bra       GTU, 0x6ae8 <.L89>
        return pin_modes[pin];
    6adc:	c1 87 20    	mov.w     #0x87c, w1
    6ade:	1e 00 78    	mov.w     [w14], w0
    6ae0:	00 00 40    	add.w     w0, w0, w0
    6ae2:	00 80 40    	add.w     w1, w0, w0
    6ae4:	10 00 78    	mov.w     [w0], w0
    6ae6:	01 00 37    	bra       0x6aea <.L90>

00006ae8 <.L89>:
    else
        return 0xFFFF;
    6ae8:	00 80 eb    	setm.w    w0

00006aea <.L90>:
}
    6aea:	00 80 fa    	ulnk      
    6aec:	00 00 06    	return    

00006aee <_cdc_set_line_coding_out_callback>:
} CDC_TX_buffer, CDC_RX_buffer;

uint8_t TXbuf[TX_BUFFER_SIZE], RXbuf[RX_BUFFER_SIZE];

void cdc_set_line_coding_out_callback(void) {
    6aee:	00 00 fa    	lnk       #0x0
    CDC_line_coding.dwDTERate.b[0] = BD[EP0OUT].address[0];
    6af0:	10 20 81    	mov.w     0x2402, w0
    6af2:	90 40 78    	mov.b     [w0], w1
    6af4:	20 87 20    	mov.w     #0x872, w0
    6af6:	01 48 78    	mov.b     w1, [w0]
    CDC_line_coding.dwDTERate.b[1] = BD[EP0OUT].address[1];
    6af8:	10 20 81    	mov.w     0x2402, w0
    6afa:	00 00 e8    	inc.w     w0, w0
    6afc:	90 40 78    	mov.b     [w0], w1
    6afe:	20 87 20    	mov.w     #0x872, w0
    6b00:	11 40 98    	mov.b     w1, [w0+1]
    CDC_line_coding.dwDTERate.b[2] = BD[EP0OUT].address[2];
    6b02:	10 20 81    	mov.w     0x2402, w0
    6b04:	00 80 e8    	inc2.w    w0, w0
    6b06:	90 40 78    	mov.b     [w0], w1
    6b08:	20 87 20    	mov.w     #0x872, w0
    6b0a:	21 40 98    	mov.b     w1, [w0+2]
    CDC_line_coding.dwDTERate.b[3] = BD[EP0OUT].address[3];
    6b0c:	10 20 81    	mov.w     0x2402, w0
    6b0e:	63 00 40    	add.w     w0, #0x3, w0
    6b10:	90 40 78    	mov.b     [w0], w1
    6b12:	20 87 20    	mov.w     #0x872, w0
    6b14:	31 40 98    	mov.b     w1, [w0+3]
    CDC_line_coding.bCharFormat = BD[EP0OUT].address[4];
    6b16:	10 20 81    	mov.w     0x2402, w0
    6b18:	64 00 40    	add.w     w0, #0x4, w0
    6b1a:	90 40 78    	mov.b     [w0], w1
    6b1c:	20 87 20    	mov.w     #0x872, w0
    6b1e:	41 40 98    	mov.b     w1, [w0+4]
    CDC_line_coding.bParityType = BD[EP0OUT].address[5];
    6b20:	10 20 81    	mov.w     0x2402, w0
    6b22:	65 00 40    	add.w     w0, #0x5, w0
    6b24:	90 40 78    	mov.b     [w0], w1
    6b26:	20 87 20    	mov.w     #0x872, w0
    6b28:	51 40 98    	mov.b     w1, [w0+5]
    CDC_line_coding.bDataBits = BD[EP0OUT].address[6];
    6b2a:	10 20 81    	mov.w     0x2402, w0
    6b2c:	66 00 40    	add.w     w0, #0x6, w0
    6b2e:	90 40 78    	mov.b     [w0], w1
    6b30:	20 87 20    	mov.w     #0x872, w0
    6b32:	61 40 98    	mov.b     w1, [w0+6]
    USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    6b34:	00 00 eb    	clr.w     w0
    6b36:	a0 1e 89    	mov.w     w0, 0x23d4
}
    6b38:	00 80 fa    	ulnk      
    6b3a:	00 00 06    	return    

00006b3c <_cdc_setup_callback>:

void cdc_setup_callback(void) {
    6b3c:	00 00 fa    	lnk       #0x0
    switch (USB_setup.bRequest) {
    6b3e:	e0 83 20    	mov.w     #0x83e, w0
    6b40:	10 40 90    	mov.b     [w0+1], w0
    6b42:	00 80 fb    	ze        w0, w0
    6b44:	01 02 20    	mov.w     #0x20, w1
    6b46:	81 0f 50    	sub.w     w0, w1, [w15]
    6b48:	1d 00 32    	bra       Z, 0x6b84 <.L6>
    6b4a:	01 02 20    	mov.w     #0x20, w1
    6b4c:	81 0f 50    	sub.w     w0, w1, [w15]
    6b4e:	05 00 3c    	bra       GT, 0x6b5a <.L9>
    6b50:	00 00 e0    	cp0.w     w0
    6b52:	0a 00 32    	bra       Z, 0x6b68 <.L4>
    6b54:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    6b56:	0f 00 32    	bra       Z, 0x6b76 <.L5>
    6b58:	5c 00 37    	bra       0x6c12 <.L3>

00006b5a <.L9>:
    6b5a:	11 02 20    	mov.w     #0x21, w1
    6b5c:	81 0f 50    	sub.w     w0, w1, [w15]
    6b5e:	26 00 32    	bra       Z, 0x6bac <.L7>
    6b60:	21 02 20    	mov.w     #0x22, w1
    6b62:	81 0f 50    	sub.w     w0, w1, [w15]
    6b64:	4c 00 32    	bra       Z, 0x6bfe <.L8>
    6b66:	55 00 37    	bra       0x6c12 <.L3>

00006b68 <.L4>:
        case SEND_ENCAPSULATED_COMMAND:
            BD[EP0IN].bytecount = 0;
    6b68:	40 40 22    	mov.w     #0x2404, w0
    6b6a:	80 40 eb    	clr.b     w1
    6b6c:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    6b6e:	50 40 22    	mov.w     #0x2405, w0
    6b70:	81 cc b3    	mov.b     #0xc8, w1
    6b72:	01 48 78    	mov.b     w1, [w0]
            break;
    6b74:	51 00 37    	bra       0x6c18 <.L2>

00006b76 <.L5>:
        case GET_ENCAPSULATED_RESPONSE:
            BD[EP0IN].bytecount = 0;
    6b76:	40 40 22    	mov.w     #0x2404, w0
    6b78:	80 40 eb    	clr.b     w1
    6b7a:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    6b7c:	50 40 22    	mov.w     #0x2405, w0
    6b7e:	81 cc b3    	mov.b     #0xc8, w1
    6b80:	01 48 78    	mov.b     w1, [w0]
            break;
    6b82:	4a 00 37    	bra       0x6c18 <.L2>

00006b84 <.L6>:
        case SET_LINE_CODING:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // save setup packet to continue processing 
    6b84:	e0 83 20    	mov.w     #0x83e, w0
    6b86:	90 40 78    	mov.b     [w0], w1
    6b88:	60 3a 22    	mov.w     #0x23a6, w0
    6b8a:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;            // a SET_LINE_CODING request when the OUT 
    6b8c:	e0 83 20    	mov.w     #0x83e, w0
    6b8e:	90 40 90    	mov.b     [w0+1], w1
    6b90:	70 3a 22    	mov.w     #0x23a7, w0
    6b92:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;            // request arrives
    6b94:	e0 83 20    	mov.w     #0x83e, w0
    6b96:	10 00 90    	mov.w     [w0+2], w0
    6b98:	40 1d 89    	mov.w     w0, 0x23a8
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    6b9a:	e0 83 20    	mov.w     #0x83e, w0
    6b9c:	20 00 90    	mov.w     [w0+4], w0
    6b9e:	50 1d 89    	mov.w     w0, 0x23aa
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    6ba0:	e0 83 20    	mov.w     #0x83e, w0
    6ba2:	30 00 90    	mov.w     [w0+6], w0
    6ba4:	60 1d 89    	mov.w     w0, 0x23ac
            USB_out_callbacks[0] = cdc_set_line_coding_out_callback;
    6ba6:	e0 ae 26    	mov.w     #0x6aee, w0
    6ba8:	a0 1e 89    	mov.w     w0, 0x23d4
            break;
    6baa:	36 00 37    	bra       0x6c18 <.L2>

00006bac <.L7>:
        case GET_LINE_CODING:
            BD[EP0IN].address[0] = CDC_line_coding.dwDTERate.b[0];
    6bac:	30 20 81    	mov.w     0x2406, w0
    6bae:	21 87 20    	mov.w     #0x872, w1
    6bb0:	91 40 78    	mov.b     [w1], w1
    6bb2:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[1] = CDC_line_coding.dwDTERate.b[1];
    6bb4:	30 20 81    	mov.w     0x2406, w0
    6bb6:	00 00 e8    	inc.w     w0, w0
    6bb8:	21 87 20    	mov.w     #0x872, w1
    6bba:	91 40 90    	mov.b     [w1+1], w1
    6bbc:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[2] = CDC_line_coding.dwDTERate.b[2];
    6bbe:	30 20 81    	mov.w     0x2406, w0
    6bc0:	00 80 e8    	inc2.w    w0, w0
    6bc2:	21 87 20    	mov.w     #0x872, w1
    6bc4:	a1 40 90    	mov.b     [w1+2], w1
    6bc6:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[3] = CDC_line_coding.dwDTERate.b[3];
    6bc8:	30 20 81    	mov.w     0x2406, w0
    6bca:	63 00 40    	add.w     w0, #0x3, w0
    6bcc:	21 87 20    	mov.w     #0x872, w1
    6bce:	b1 40 90    	mov.b     [w1+3], w1
    6bd0:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[4] = CDC_line_coding.bCharFormat;
    6bd2:	30 20 81    	mov.w     0x2406, w0
    6bd4:	64 00 40    	add.w     w0, #0x4, w0
    6bd6:	21 87 20    	mov.w     #0x872, w1
    6bd8:	c1 40 90    	mov.b     [w1+4], w1
    6bda:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[5] = CDC_line_coding.bParityType;
    6bdc:	30 20 81    	mov.w     0x2406, w0
    6bde:	65 00 40    	add.w     w0, #0x5, w0
    6be0:	21 87 20    	mov.w     #0x872, w1
    6be2:	d1 40 90    	mov.b     [w1+5], w1
    6be4:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[6] = CDC_line_coding.bDataBits;
    6be6:	30 20 81    	mov.w     0x2406, w0
    6be8:	66 00 40    	add.w     w0, #0x6, w0
    6bea:	21 87 20    	mov.w     #0x872, w1
    6bec:	e1 40 90    	mov.b     [w1+6], w1
    6bee:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 7;
    6bf0:	40 40 22    	mov.w     #0x2404, w0
    6bf2:	71 c0 b3    	mov.b     #0x7, w1
    6bf4:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    6bf6:	50 40 22    	mov.w     #0x2405, w0
    6bf8:	81 cc b3    	mov.b     #0xc8, w1
    6bfa:	01 48 78    	mov.b     w1, [w0]
            break;
    6bfc:	0d 00 37    	bra       0x6c18 <.L2>

00006bfe <.L8>:
        case SET_CONTROL_LINE_STATE:
            CDC_control_signal_bitmap = USB_setup.wValue.w;
    6bfe:	e0 83 20    	mov.w     #0x83e, w0
    6c00:	10 00 90    	mov.w     [w0+2], w0
    6c02:	d0 43 88    	mov.w     w0, 0x87a
            BD[EP0IN].bytecount = 0;
    6c04:	40 40 22    	mov.w     #0x2404, w0
    6c06:	80 40 eb    	clr.b     w1
    6c08:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    6c0a:	50 40 22    	mov.w     #0x2405, w0
    6c0c:	81 cc b3    	mov.b     #0xc8, w1
    6c0e:	01 48 78    	mov.b     w1, [w0]
            break;
    6c10:	03 00 37    	bra       0x6c18 <.L2>

00006c12 <.L3>:
        case SET_COMM_FEATURE:
        case GET_COMM_FEATURE:
        case CLEAR_COMM_FEATURE:
        case SEND_BREAK:
        default:
            USB_error_flags |= REQUEST_ERROR;
    6c12:	46 c8 bf    	mov.b     0x846, WREG
    6c14:	00 04 a0    	bset.b    w0, #0x0
    6c16:	46 e8 b7    	mov.b     WREG, 0x846

00006c18 <.L2>:
    }
}
    6c18:	00 80 fa    	ulnk      
    6c1a:	00 00 06    	return    

00006c1c <_init_cdc>:

void init_cdc(void) {
    6c1c:	00 00 fa    	lnk       #0x0
    CDC_line_coding.dwDTERate.ul = 115200;  // set initial line coding paramters to 115,200 baud
    6c1e:	22 87 20    	mov.w     #0x872, w2
    6c20:	00 20 2c    	mov.w     #0xc200, w0
    6c22:	11 00 20    	mov.w     #0x1, w1
    6c24:	00 89 be    	mov.d     w0, [w2]
    CDC_line_coding.bCharFormat = 0;        // ...1 stop bit,
    6c26:	20 87 20    	mov.w     #0x872, w0
    6c28:	80 40 eb    	clr.b     w1
    6c2a:	41 40 98    	mov.b     w1, [w0+4]
    CDC_line_coding.bParityType = 0;        // ...no parity,
    6c2c:	20 87 20    	mov.w     #0x872, w0
    6c2e:	80 40 eb    	clr.b     w1
    6c30:	51 40 98    	mov.b     w1, [w0+5]
    CDC_line_coding.bDataBits = 8;          // ...and 8 data bits
    6c32:	20 87 20    	mov.w     #0x872, w0
    6c34:	81 c0 b3    	mov.b     #0x8, w1
    6c36:	61 40 98    	mov.b     w1, [w0+6]

    CDC_control_signal_bitmap = 0;
    6c38:	7a 28 ef    	clr.w     0x87a

    CDC_TX_buffer.data = TXbuf;
    6c3a:	60 09 22    	mov.w     #0x2096, w0
    6c3c:	10 04 89    	mov.w     w0, 0x2082
    CDC_TX_buffer.length = TX_BUFFER_SIZE;
    6c3e:	00 10 20    	mov.w     #0x100, w0
    6c40:	20 04 89    	mov.w     w0, 0x2084
    CDC_TX_buffer.head = 0;
    6c42:	00 00 eb    	clr.w     w0
    6c44:	30 04 89    	mov.w     w0, 0x2086
    CDC_TX_buffer.tail = 0;
    6c46:	00 00 eb    	clr.w     w0
    6c48:	40 04 89    	mov.w     w0, 0x2088
    CDC_TX_buffer.count = 0;
    6c4a:	00 00 eb    	clr.w     w0
    6c4c:	50 04 89    	mov.w     w0, 0x208a

    CDC_RX_buffer.data = RXbuf;
    6c4e:	60 19 22    	mov.w     #0x2196, w0
    6c50:	60 04 89    	mov.w     w0, 0x208c
    CDC_RX_buffer.length = RX_BUFFER_SIZE;
    6c52:	00 10 20    	mov.w     #0x100, w0
    6c54:	70 04 89    	mov.w     w0, 0x208e
    CDC_RX_buffer.head = 0;
    6c56:	00 00 eb    	clr.w     w0
    6c58:	80 04 89    	mov.w     w0, 0x2090
    CDC_RX_buffer.tail = 0;
    6c5a:	00 00 eb    	clr.w     w0
    6c5c:	90 04 89    	mov.w     w0, 0x2092
    CDC_RX_buffer.count = 0;
    6c5e:	00 00 eb    	clr.w     w0
    6c60:	a0 04 89    	mov.w     w0, 0x2094
}
    6c62:	00 80 fa    	ulnk      
    6c64:	00 00 06    	return    

00006c66 <_cdc_tx_service>:

void cdc_tx_service(void) {
    6c66:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (!(BD[EP2IN].status & UOWN)) {   // see if UOWN bit of EP2 IN status register is clear (i.e., PIC owns EP2 IN buffer)
    6c68:	50 41 22    	mov.w     #0x2415, w0
    6c6a:	10 40 78    	mov.b     [w0], w0
    6c6c:	00 04 e0    	cp0.b     w0
    6c6e:	34 00 35    	bra       LT, 0x6cd8 <.L12>
        if (CDC_TX_buffer.count < MAX_PACKET_SIZE) 
    6c70:	51 04 81    	mov.w     0x208a, w1
    6c72:	f0 03 20    	mov.w     #0x3f, w0
    6c74:	80 8f 50    	sub.w     w1, w0, [w15]
    6c76:	03 00 3e    	bra       GTU, 0x6c7e <.L14>
            packet_length = CDC_TX_buffer.count;
    6c78:	50 04 81    	mov.w     0x208a, w0
    6c7a:	00 4f 78    	mov.b     w0, [w14]
    6c7c:	02 00 37    	bra       0x6c82 <.L15>

00006c7e <.L14>:
        else
            packet_length = MAX_PACKET_SIZE;
    6c7e:	00 c4 b3    	mov.b     #0x40, w0
    6c80:	00 4f 78    	mov.b     w0, [w14]

00006c82 <.L15>:
        for (i = 0; i < packet_length; i++) {
    6c82:	00 40 eb    	clr.b     w0
    6c84:	10 47 98    	mov.b     w0, [w14+1]
    6c86:	15 00 37    	bra       0x6cb2 <.L16>

00006c88 <.L18>:
            BD[EP2IN].address[i] = CDC_TX_buffer.data[CDC_TX_buffer.head];
    6c88:	b1 20 81    	mov.w     0x2416, w1
    6c8a:	1e 40 90    	mov.b     [w14+1], w0
    6c8c:	00 80 fb    	ze        w0, w0
    6c8e:	00 80 40    	add.w     w1, w0, w0
    6c90:	12 04 81    	mov.w     0x2082, w2
    6c92:	31 04 81    	mov.w     0x2086, w1
    6c94:	81 00 41    	add.w     w2, w1, w1
    6c96:	91 40 78    	mov.b     [w1], w1
    6c98:	01 48 78    	mov.b     w1, [w0]
            CDC_TX_buffer.head++;
    6c9a:	30 04 81    	mov.w     0x2086, w0
    6c9c:	00 00 e8    	inc.w     w0, w0
    6c9e:	30 04 89    	mov.w     w0, 0x2086
            if (CDC_TX_buffer.head == CDC_TX_buffer.length)
    6ca0:	31 04 81    	mov.w     0x2086, w1
    6ca2:	20 04 81    	mov.w     0x2084, w0
    6ca4:	80 8f 50    	sub.w     w1, w0, [w15]
    6ca6:	02 00 3a    	bra       NZ, 0x6cac <.L17>
                CDC_TX_buffer.head = 0;
    6ca8:	00 00 eb    	clr.w     w0
    6caa:	30 04 89    	mov.w     w0, 0x2086

00006cac <.L17>:
    6cac:	1e 40 90    	mov.b     [w14+1], w0
    6cae:	00 40 e8    	inc.b     w0, w0
    6cb0:	10 47 98    	mov.b     w0, [w14+1]

00006cb2 <.L16>:
    6cb2:	1e 40 90    	mov.b     [w14+1], w0
    6cb4:	9e 4f 50    	sub.b     w0, [w14], [w15]
    6cb6:	e8 ff 39    	bra       NC, 0x6c88 <.L18>
        }
        CDC_TX_buffer.count -= packet_length;
    6cb8:	51 04 81    	mov.w     0x208a, w1
    6cba:	1e 80 fb    	ze        [w14], w0
    6cbc:	00 80 50    	sub.w     w1, w0, w0
    6cbe:	50 04 89    	mov.w     w0, 0x208a
        BD[EP2IN].bytecount = packet_length;
    6cc0:	40 41 22    	mov.w     #0x2414, w0
    6cc2:	1e 48 78    	mov.b     [w14], [w0]
        BD[EP2IN].status = ((BD[EP2IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    6cc4:	50 41 22    	mov.w     #0x2415, w0
    6cc6:	10 40 78    	mov.b     [w0], w0
    6cc8:	00 c0 ea    	com.b     w0, w0
    6cca:	02 c4 b3    	mov.b     #0x40, w2
    6ccc:	82 40 60    	and.b     w0, w2, w1
    6cce:	80 c8 b3    	mov.b     #0x88, w0
    6cd0:	00 c0 70    	ior.b     w1, w0, w0
    6cd2:	80 40 78    	mov.b     w0, w1
    6cd4:	50 41 22    	mov.w     #0x2415, w0
    6cd6:	01 48 78    	mov.b     w1, [w0]

00006cd8 <.L12>:
    }
}
    6cd8:	00 80 fa    	ulnk      
    6cda:	00 00 06    	return    

00006cdc <_cdc_rx_service>:

void cdc_rx_service(void) {
    6cdc:	02 00 fa    	lnk       #0x2
    uint8_t i;

    if (!(BD[EP2OUT].status & UOWN)) {  // see if UOWN bit of EP2 OUT status register is clear (i.e., PIC owns EP2 OUT buffer)
    6cde:	10 41 22    	mov.w     #0x2411, w0
    6ce0:	10 40 78    	mov.b     [w0], w0
    6ce2:	00 04 e0    	cp0.b     w0
    6ce4:	38 00 35    	bra       LT, 0x6d56 <.L19>
        if ((BD[EP2OUT].bytecount + CDC_RX_buffer.count) <= CDC_RX_buffer.length) {
    6ce6:	00 41 22    	mov.w     #0x2410, w0
    6ce8:	10 40 78    	mov.b     [w0], w0
    6cea:	80 80 fb    	ze        w0, w1
    6cec:	a0 04 81    	mov.w     0x2094, w0
    6cee:	80 80 40    	add.w     w1, w0, w1
    6cf0:	70 04 81    	mov.w     0x208e, w0
    6cf2:	80 8f 50    	sub.w     w1, w0, [w15]
    6cf4:	2d 00 3e    	bra       GTU, 0x6d50 <.L21>
            for (i = 0; i < BD[EP2OUT].bytecount; i++) {
    6cf6:	00 40 eb    	clr.b     w0
    6cf8:	00 4f 78    	mov.b     w0, [w14]
    6cfa:	12 00 37    	bra       0x6d20 <.L22>

00006cfc <.L24>:
                CDC_RX_buffer.data[CDC_RX_buffer.tail] = BD[EP2OUT].address[i];
    6cfc:	61 04 81    	mov.w     0x208c, w1
    6cfe:	90 04 81    	mov.w     0x2092, w0
    6d00:	00 80 40    	add.w     w1, w0, w0
    6d02:	92 20 81    	mov.w     0x2412, w2
    6d04:	9e 80 fb    	ze        [w14], w1
    6d06:	81 00 41    	add.w     w2, w1, w1
    6d08:	91 40 78    	mov.b     [w1], w1
    6d0a:	01 48 78    	mov.b     w1, [w0]
                CDC_RX_buffer.tail++;
    6d0c:	90 04 81    	mov.w     0x2092, w0
    6d0e:	00 00 e8    	inc.w     w0, w0
    6d10:	90 04 89    	mov.w     w0, 0x2092
                if (CDC_RX_buffer.tail == CDC_RX_buffer.length)
    6d12:	91 04 81    	mov.w     0x2092, w1
    6d14:	70 04 81    	mov.w     0x208e, w0
    6d16:	80 8f 50    	sub.w     w1, w0, [w15]
    6d18:	02 00 3a    	bra       NZ, 0x6d1e <.L23>
                    CDC_RX_buffer.tail = 0;
    6d1a:	00 00 eb    	clr.w     w0
    6d1c:	90 04 89    	mov.w     w0, 0x2092

00006d1e <.L23>:
    6d1e:	1e 4f e8    	inc.b     [w14], [w14]

00006d20 <.L22>:
    6d20:	00 41 22    	mov.w     #0x2410, w0
    6d22:	10 40 78    	mov.b     [w0], w0
    6d24:	9e 4f 50    	sub.b     w0, [w14], [w15]
    6d26:	ea ff 3e    	bra       GTU, 0x6cfc <.L24>
            }
            CDC_RX_buffer.count += BD[EP2OUT].bytecount;
    6d28:	a1 04 81    	mov.w     0x2094, w1
    6d2a:	00 41 22    	mov.w     #0x2410, w0
    6d2c:	10 40 78    	mov.b     [w0], w0
    6d2e:	00 80 fb    	ze        w0, w0
    6d30:	00 80 40    	add.w     w1, w0, w0
    6d32:	a0 04 89    	mov.w     w0, 0x2094
            BD[EP2OUT].bytecount = 64;
    6d34:	00 41 22    	mov.w     #0x2410, w0
    6d36:	01 c4 b3    	mov.b     #0x40, w1
    6d38:	01 48 78    	mov.b     w1, [w0]
            BD[EP2OUT].status = ((BD[EP2OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    6d3a:	10 41 22    	mov.w     #0x2411, w0
    6d3c:	10 40 78    	mov.b     [w0], w0
    6d3e:	00 c0 ea    	com.b     w0, w0
    6d40:	02 c4 b3    	mov.b     #0x40, w2
    6d42:	82 40 60    	and.b     w0, w2, w1
    6d44:	80 c8 b3    	mov.b     #0x88, w0
    6d46:	00 c0 70    	ior.b     w1, w0, w0
    6d48:	80 40 78    	mov.b     w0, w1
    6d4a:	10 41 22    	mov.w     #0x2411, w0
    6d4c:	01 48 78    	mov.b     w1, [w0]
    6d4e:	03 00 37    	bra       0x6d56 <.L19>

00006d50 <.L21>:
        } else
            USB_error_flags |= REQUEST_ERROR;
    6d50:	46 c8 bf    	mov.b     0x846, WREG
    6d52:	00 04 a0    	bset.b    w0, #0x0
    6d54:	46 e8 b7    	mov.b     WREG, 0x846

00006d56 <.L19>:
    }
}
    6d56:	00 80 fa    	ulnk      
    6d58:	00 00 06    	return    

00006d5a <_cdc_in_waiting>:

uint16_t cdc_in_waiting(void) {
    6d5a:	00 00 fa    	lnk       #0x0
    return CDC_RX_buffer.count;
    6d5c:	a0 04 81    	mov.w     0x2094, w0
}
    6d5e:	00 80 fa    	ulnk      
    6d60:	00 00 06    	return    

00006d62 <_cdc_tx_buffer_space>:

uint16_t cdc_tx_buffer_space(void) {
    6d62:	00 00 fa    	lnk       #0x0
    return CDC_TX_buffer.length - CDC_TX_buffer.count;
    6d64:	21 04 81    	mov.w     0x2084, w1
    6d66:	50 04 81    	mov.w     0x208a, w0
    6d68:	00 80 50    	sub.w     w1, w0, w0
}
    6d6a:	00 80 fa    	ulnk      
    6d6c:	00 00 06    	return    

00006d6e <_cdc_putc>:

void cdc_putc(uint8_t ch) {
    6d6e:	02 00 fa    	lnk       #0x2
    6d70:	00 4f 78    	mov.b     w0, [w14]
    while (CDC_TX_buffer.count == CDC_TX_buffer.length) {
    6d72:	01 00 37    	bra       0x6d76 <.L28>

00006d74 <.L29>:
#ifndef USB_INTERRUPT
        usb_service();
    6d74:	e2 f6 07    	rcall     0x5b3a <_usb_service> <.LFB3> <.LFE2>

00006d76 <.L28>:
    6d76:	51 04 81    	mov.w     0x208a, w1
    6d78:	20 04 81    	mov.w     0x2084, w0
    6d7a:	80 8f 50    	sub.w     w1, w0, [w15]
    6d7c:	fb ff 32    	bra       Z, 0x6d74 <.L29>
#endif
    }
    disable_interrupts();
    6d7e:	ff 3f fc    	disi      #0x3fff
    CDC_TX_buffer.data[CDC_TX_buffer.tail] = ch;
    6d80:	11 04 81    	mov.w     0x2082, w1
    6d82:	40 04 81    	mov.w     0x2088, w0
    6d84:	00 80 40    	add.w     w1, w0, w0
    6d86:	1e 48 78    	mov.b     [w14], [w0]
    CDC_TX_buffer.tail++;
    6d88:	40 04 81    	mov.w     0x2088, w0
    6d8a:	00 00 e8    	inc.w     w0, w0
    6d8c:	40 04 89    	mov.w     w0, 0x2088
    if (CDC_TX_buffer.tail == CDC_TX_buffer.length)
    6d8e:	41 04 81    	mov.w     0x2088, w1
    6d90:	20 04 81    	mov.w     0x2084, w0
    6d92:	80 8f 50    	sub.w     w1, w0, [w15]
    6d94:	02 00 3a    	bra       NZ, 0x6d9a <.L30>
        CDC_TX_buffer.tail = 0;
    6d96:	00 00 eb    	clr.w     w0
    6d98:	40 04 89    	mov.w     w0, 0x2088

00006d9a <.L30>:
    CDC_TX_buffer.count++;
    6d9a:	50 04 81    	mov.w     0x208a, w0
    6d9c:	00 00 e8    	inc.w     w0, w0
    6d9e:	50 04 89    	mov.w     w0, 0x208a
    enable_interrupts();
    6da0:	52 20 ef    	clr.w     0x52
}
    6da2:	00 80 fa    	ulnk      
    6da4:	00 00 06    	return    

00006da6 <_cdc_getc>:

uint8_t cdc_getc(void) {
    6da6:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    while (CDC_RX_buffer.count == 0) {
    6da8:	01 00 37    	bra       0x6dac <.L32>

00006daa <.L33>:
#ifndef USB_INTERRUPT
        usb_service();
    6daa:	c7 f6 07    	rcall     0x5b3a <_usb_service> <.LFB3> <.LFE2>

00006dac <.L32>:
    6dac:	a0 04 81    	mov.w     0x2094, w0
    6dae:	00 00 e0    	cp0.w     w0
    6db0:	fc ff 32    	bra       Z, 0x6daa <.L33>
#endif
    }
    disable_interrupts();
    6db2:	ff 3f fc    	disi      #0x3fff
    ch = CDC_RX_buffer.data[CDC_RX_buffer.head];
    6db4:	61 04 81    	mov.w     0x208c, w1
    6db6:	80 04 81    	mov.w     0x2090, w0
    6db8:	00 80 40    	add.w     w1, w0, w0
    6dba:	10 4f 78    	mov.b     [w0], [w14]
    CDC_RX_buffer.head++;
    6dbc:	80 04 81    	mov.w     0x2090, w0
    6dbe:	00 00 e8    	inc.w     w0, w0
    6dc0:	80 04 89    	mov.w     w0, 0x2090
    if (CDC_RX_buffer.head == CDC_RX_buffer.length)
    6dc2:	81 04 81    	mov.w     0x2090, w1
    6dc4:	70 04 81    	mov.w     0x208e, w0
    6dc6:	80 8f 50    	sub.w     w1, w0, [w15]
    6dc8:	02 00 3a    	bra       NZ, 0x6dce <.L34>
        CDC_RX_buffer.head = 0;
    6dca:	00 00 eb    	clr.w     w0
    6dcc:	80 04 89    	mov.w     w0, 0x2090

00006dce <.L34>:
    CDC_RX_buffer.count--;
    6dce:	a0 04 81    	mov.w     0x2094, w0
    6dd0:	00 00 e9    	dec.w     w0, w0
    6dd2:	a0 04 89    	mov.w     w0, 0x2094
    enable_interrupts();
    6dd4:	52 20 ef    	clr.w     0x52
    return ch;
    6dd6:	1e 40 78    	mov.b     [w14], w0
}
    6dd8:	00 80 fa    	ulnk      
    6dda:	00 00 06    	return    

00006ddc <_cdc_puts>:

void cdc_puts(uint8_t *str) {
    6ddc:	02 00 fa    	lnk       #0x2
    6dde:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    6de0:	04 00 37    	bra       0x6dea <.L36>

00006de2 <.L37>:
        cdc_putc(*str++);
    6de2:	1e 00 78    	mov.w     [w14], w0
    6de4:	10 40 78    	mov.b     [w0], w0
    6de6:	1e 0f e8    	inc.w     [w14], [w14]
    6de8:	c2 ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>

00006dea <.L36>:
    6dea:	1e 00 78    	mov.w     [w14], w0
    6dec:	10 40 78    	mov.b     [w0], w0
    6dee:	00 04 e0    	cp0.b     w0
    6df0:	f8 ff 3a    	bra       NZ, 0x6de2 <.L37>
}
    6df2:	00 80 fa    	ulnk      
    6df4:	00 00 06    	return    

00006df6 <_cdc_gets>:

void cdc_gets(uint8_t *str, uint16_t len) {
    6df6:	04 00 fa    	lnk       #0x4
    6df8:	00 0f 78    	mov.w     w0, [w14]
    6dfa:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    6dfc:	1e 00 90    	mov.w     [w14+2], w0
    6dfe:	00 00 e0    	cp0.w     w0
    6e00:	1a 00 32    	bra       Z, 0x6e36 <.L43>
        return;

    if (len == 1) {
    6e02:	1e 00 90    	mov.w     [w14+2], w0
    6e04:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    6e06:	04 00 3a    	bra       NZ, 0x6e10 <.L41>
        *str = '\0';
    6e08:	1e 00 78    	mov.w     [w14], w0
    6e0a:	80 40 eb    	clr.b     w1
    6e0c:	01 48 78    	mov.b     w1, [w0]
        return;
    6e0e:	14 00 37    	bra       0x6e38 <.L38>

00006e10 <.L41>:
    }

    while (1) {
        *str = cdc_getc();
    6e10:	ca ff 07    	rcall     0x6da6 <_cdc_getc> <.LFB8> <.LFE7>
    6e12:	9e 00 78    	mov.w     [w14], w1
    6e14:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    6e16:	1e 00 78    	mov.w     [w14], w0
    6e18:	10 40 78    	mov.b     [w0], w0
    6e1a:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    6e1c:	08 00 32    	bra       Z, 0x6e2e <.L42>
    6e1e:	1e 00 90    	mov.w     [w14+2], w0
    6e20:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    6e22:	05 00 32    	bra       Z, 0x6e2e <.L42>
            break;
        str++;
    6e24:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    6e26:	1e 00 90    	mov.w     [w14+2], w0
    6e28:	00 00 e9    	dec.w     w0, w0
    6e2a:	10 07 98    	mov.w     w0, [w14+2]
    }
    6e2c:	f1 ff 37    	bra       0x6e10 <.L41>

00006e2e <.L42>:
    *str = '\0';
    6e2e:	1e 00 78    	mov.w     [w14], w0
    6e30:	80 40 eb    	clr.b     w1
    6e32:	01 48 78    	mov.b     w1, [w0]
    6e34:	01 00 37    	bra       0x6e38 <.L38>

00006e36 <.L43>:
    6e36:	00 00 00    	nop       

00006e38 <.L38>:
}
    6e38:	00 80 fa    	ulnk      
    6e3a:	00 00 06    	return    

00006e3c <_cdc_gets_term>:

void cdc_gets_term(uint8_t *str, uint16_t len) {
    6e3c:	08 00 fa    	lnk       #0x8
    6e3e:	20 07 98    	mov.w     w0, [w14+4]
    6e40:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    6e42:	3e 00 90    	mov.w     [w14+6], w0
    6e44:	00 00 e0    	cp0.w     w0
    6e46:	68 00 32    	bra       Z, 0x6f18 <.L57>
        return;

    if (len == 1) {
    6e48:	3e 00 90    	mov.w     [w14+6], w0
    6e4a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    6e4c:	04 00 3a    	bra       NZ, 0x6e56 <.L47>
        *str = '\0';
    6e4e:	2e 00 90    	mov.w     [w14+4], w0
    6e50:	80 40 eb    	clr.b     w1
    6e52:	01 48 78    	mov.b     w1, [w0]
        return;
    6e54:	62 00 37    	bra       0x6f1a <.L44>

00006e56 <.L47>:
    }

    cdc_putc(0x1B);                        // Save current cursor position
    6e56:	b0 c1 b3    	mov.b     #0x1b, w0
    6e58:	8a ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    cdc_putc('7');
    6e5a:	70 c3 b3    	mov.b     #0x37, w0
    6e5c:	88 ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    start = str;
    6e5e:	ae 00 90    	mov.w     [w14+4], w1
    6e60:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    6e62:	be 00 90    	mov.w     [w14+6], w1
    6e64:	01 0f 78    	mov.w     w1, [w14]
    6e66:	03 00 37    	bra       0x6e6e <.L56>

00006e68 <.L58>:
    while (1) {
        *str = cdc_getc();                 // Get a character
        if (*str == '\r')                  // If character is return,
            break;                         //   end the loop.
        if (*str == 0x1B) {                // If character is escape,
            cdc_putc(0x1B);                //   restore cursor position,
            cdc_putc('8');
            cdc_putc(0x1B);                //   clear to end of line, and
            cdc_putc('[');
            cdc_putc('K');
            str = start;                   //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str == '\b') ||              // If character is backspace
            (*str == 0x7F)) {              //   or delete, 
            if (str > start) {             //   and we are not at the start, 
                cdc_putc('\b');            //   erase the last character and
                cdc_putc(' ');
                cdc_putc('\b');
                str--;                     //   back up the pointer,
                left++;
            } else                         //   otherwise
                cdc_putc('\a');            //   send alert/bell character.
            continue;
        }
        if (left == 1) {                   // If string buffer is full,
            cdc_putc('\a');                //   send alert/bell character
            continue;
        }
        if ((*str >= 32) && (*str < 127)) {// If character is printable,
            cdc_putc(*str);                //   echo the received character
            str++;                         //   and advance the pointer.
            left--;
        }
    }
    6e68:	00 00 00    	nop       
    6e6a:	01 00 37    	bra       0x6e6e <.L56>

00006e6c <.L59>:
    6e6c:	00 00 00    	nop       

00006e6e <.L56>:
    6e6e:	9b ff 07    	rcall     0x6da6 <_cdc_getc> <.LFB8> <.LFE7>
    6e70:	ae 00 90    	mov.w     [w14+4], w1
    6e72:	80 48 78    	mov.b     w0, [w1]
    6e74:	2e 00 90    	mov.w     [w14+4], w0
    6e76:	10 40 78    	mov.b     [w0], w0
    6e78:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    6e7a:	08 00 3a    	bra       NZ, 0x6e8c <.L48>
    *str = '\0';                           // Terminarte the string with null
    6e7c:	2e 00 90    	mov.w     [w14+4], w0
    6e7e:	80 40 eb    	clr.b     w1
    6e80:	01 48 78    	mov.b     w1, [w0]
    cdc_putc('\n');                        // Send newline and
    6e82:	a0 c0 b3    	mov.b     #0xa, w0
    6e84:	74 ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    cdc_putc('\r');                        //   carriage return
    6e86:	d0 c0 b3    	mov.b     #0xd, w0
    6e88:	72 ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6e8a:	47 00 37    	bra       0x6f1a <.L44>

00006e8c <.L48>:
    6e8c:	2e 00 90    	mov.w     [w14+4], w0
    6e8e:	10 40 78    	mov.b     [w0], w0
    6e90:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    6e92:	0f 00 3a    	bra       NZ, 0x6eb2 <.L49>
    6e94:	b0 c1 b3    	mov.b     #0x1b, w0
    6e96:	6b ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6e98:	80 c3 b3    	mov.b     #0x38, w0
    6e9a:	69 ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6e9c:	b0 c1 b3    	mov.b     #0x1b, w0
    6e9e:	67 ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6ea0:	b0 c5 b3    	mov.b     #0x5b, w0
    6ea2:	65 ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6ea4:	b0 c4 b3    	mov.b     #0x4b, w0
    6ea6:	63 ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6ea8:	9e 00 90    	mov.w     [w14+2], w1
    6eaa:	21 07 98    	mov.w     w1, [w14+4]
    6eac:	be 00 90    	mov.w     [w14+6], w1
    6eae:	01 0f 78    	mov.w     w1, [w14]
    6eb0:	32 00 37    	bra       0x6f16 <.L50>

00006eb2 <.L49>:
    6eb2:	2e 00 90    	mov.w     [w14+4], w0
    6eb4:	10 40 78    	mov.b     [w0], w0
    6eb6:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    6eb8:	05 00 32    	bra       Z, 0x6ec4 <.L51>
    6eba:	2e 00 90    	mov.w     [w14+4], w0
    6ebc:	90 40 78    	mov.b     [w0], w1
    6ebe:	f0 c7 b3    	mov.b     #0x7f, w0
    6ec0:	80 cf 50    	sub.b     w1, w0, [w15]
    6ec2:	12 00 3a    	bra       NZ, 0x6ee8 <.L52>

00006ec4 <.L51>:
    6ec4:	ae 00 90    	mov.w     [w14+4], w1
    6ec6:	1e 00 90    	mov.w     [w14+2], w0
    6ec8:	80 8f 50    	sub.w     w1, w0, [w15]
    6eca:	0b 00 36    	bra       LEU, 0x6ee2 <.L53>
    6ecc:	80 c0 b3    	mov.b     #0x8, w0
    6ece:	4f ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6ed0:	00 c2 b3    	mov.b     #0x20, w0
    6ed2:	4d ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6ed4:	80 c0 b3    	mov.b     #0x8, w0
    6ed6:	4b ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6ed8:	2e 00 90    	mov.w     [w14+4], w0
    6eda:	00 00 e9    	dec.w     w0, w0
    6edc:	20 07 98    	mov.w     w0, [w14+4]
    6ede:	1e 0f e8    	inc.w     [w14], [w14]
    6ee0:	02 00 37    	bra       0x6ee6 <.L54>

00006ee2 <.L53>:
    6ee2:	70 c0 b3    	mov.b     #0x7, w0
    6ee4:	44 ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>

00006ee6 <.L54>:
    6ee6:	17 00 37    	bra       0x6f16 <.L50>

00006ee8 <.L52>:
    6ee8:	1e 00 78    	mov.w     [w14], w0
    6eea:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    6eec:	03 00 3a    	bra       NZ, 0x6ef4 <.L55>
    6eee:	70 c0 b3    	mov.b     #0x7, w0
    6ef0:	3e ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6ef2:	11 00 37    	bra       0x6f16 <.L50>

00006ef4 <.L55>:
    6ef4:	2e 00 90    	mov.w     [w14+4], w0
    6ef6:	10 40 78    	mov.b     [w0], w0
    6ef8:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    6efa:	b6 ff 36    	bra       LEU, 0x6e68 <.L58>
    6efc:	2e 00 90    	mov.w     [w14+4], w0
    6efe:	90 40 78    	mov.b     [w0], w1
    6f00:	e0 c7 b3    	mov.b     #0x7e, w0
    6f02:	80 cf 50    	sub.b     w1, w0, [w15]
    6f04:	b3 ff 3e    	bra       GTU, 0x6e6c <.L59>
    6f06:	2e 00 90    	mov.w     [w14+4], w0
    6f08:	10 40 78    	mov.b     [w0], w0
    6f0a:	31 ff 07    	rcall     0x6d6e <_cdc_putc> <.LFB7> <.LFE6>
    6f0c:	2e 00 90    	mov.w     [w14+4], w0
    6f0e:	00 00 e8    	inc.w     w0, w0
    6f10:	20 07 98    	mov.w     w0, [w14+4]
    6f12:	1e 0f e9    	dec.w     [w14], [w14]
    6f14:	ac ff 37    	bra       0x6e6e <.L56>

00006f16 <.L50>:
    6f16:	ab ff 37    	bra       0x6e6e <.L56>

00006f18 <.L57>:
    6f18:	00 00 00    	nop       

00006f1a <.L44>:
}
    6f1a:	00 80 fa    	ulnk      
    6f1c:	00 00 06    	return    

00006f1e <_init_wavegen>:
        }
    }
}

void init_wavegen(void) {
    6f1e:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    RPOR = (uint8_t *)&RPOR0;
    6f20:	00 6c 20    	mov.w     #0x6c0, w0
    6f22:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    6f24:	00 68 20    	mov.w     #0x680, w0
    6f26:	10 07 98    	mov.w     w0, [w14+2]

    nCS_DDS_DIR = OUT; nCS_DDS = 1;
    6f28:	c9 82 a9    	bclr.b    0x2c9, #0x4
    6f2a:	cd 82 a8    	bset.b    0x2cd, #0x4
    SCK_DDS_DIR = OUT; SCK_DDS = 1;
    6f2c:	c9 c2 a9    	bclr.b    0x2c9, #0x6
    6f2e:	cb c2 a8    	bset.b    0x2cb, #0x6
    MOSI_DDS_DIR = OUT; MOSI_DDS_DIR = OUT;
    6f30:	c9 e2 a9    	bclr.b    0x2c9, #0x7
    6f32:	c9 e2 a9    	bclr.b    0x2c9, #0x7
    MCLK_DDS_DIR = OUT; MCLK_DDS = 0;
    6f34:	e8 62 a9    	bclr.b    0x2e8, #0x3
    6f36:	ea 62 a9    	bclr.b    0x2ea, #0x3

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    6f38:	11 3a 80    	mov.w     0x742, w1
    6f3a:	f0 0b 20    	mov.w     #0xbf, w0
    6f3c:	00 81 60    	and.w     w1, w0, w2
    6f3e:	60 04 20    	mov.w     #0x46, w0
    6f40:	71 05 20    	mov.w     #0x57, w1
    6f42:	23 74 20    	mov.w     #0x742, w3
    6f44:	80 49 78    	mov.b     w0, [w3]
    6f46:	81 49 78    	mov.b     w1, [w3]
    6f48:	82 49 78    	mov.b     w2, [w3]
    RPINR[MISO1_RP] = MISO_DDS_RP;
    6f4a:	1e 00 90    	mov.w     [w14+2], w0
    6f4c:	80 02 b0    	add.w     #0x28, w0
    6f4e:	c1 c1 b3    	mov.b     #0x1c, w1
    6f50:	01 48 78    	mov.b     w1, [w0]
    RPOR[MOSI_DDS_RP] = MOSI1_RP;
    6f52:	9e 00 78    	mov.w     [w14], w1
    6f54:	7d 80 40    	add.w     w1, #0x1d, w0
    6f56:	71 c0 b3    	mov.b     #0x7, w1
    6f58:	01 48 78    	mov.b     w1, [w0]
    RPOR[SCK_DDS_RP] = SCK1OUT_RP;
    6f5a:	9e 00 78    	mov.w     [w14], w1
    6f5c:	6e 80 40    	add.w     w1, #0xe, w0
    6f5e:	81 c0 b3    	mov.b     #0x8, w1
    6f60:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    6f62:	10 3a 80    	mov.w     0x742, w0
    6f64:	00 01 78    	mov.w     w0, w2
    6f66:	02 60 a0    	bset.w    w2, #0x6
    6f68:	60 04 20    	mov.w     #0x46, w0
    6f6a:	71 05 20    	mov.w     #0x57, w1
    6f6c:	23 74 20    	mov.w     #0x742, w3
    6f6e:	80 49 78    	mov.b     w0, [w3]
    6f70:	81 49 78    	mov.b     w1, [w3]
    6f72:	82 49 78    	mov.b     w2, [w3]

    SPI1CON1 = 0x0172;              // SPI mode = 2, SCK freq = 1 MHz
    6f74:	20 17 20    	mov.w     #0x172, w0
    6f76:	10 12 88    	mov.w     w0, 0x242
    SPI1CON2 = 0;
    6f78:	44 22 ef    	clr.w     0x244
    SPI1STAT = 0x8000;
    6f7a:	00 00 28    	mov.w     #0x8000, w0
    6f7c:	00 12 88    	mov.w     w0, 0x240

    nCS_POT_DIR = OUT; nCS_POT = 1;
    6f7e:	d1 82 a9    	bclr.b    0x2d1, #0x4
    6f80:	d5 82 a8    	bset.b    0x2d5, #0x4
    SCK_POT_DIR = OUT; SCK_POT = 0;
    6f82:	d9 62 a9    	bclr.b    0x2d9, #0x3
    6f84:	db 62 a9    	bclr.b    0x2db, #0x3
    MOSI_POT_DIR = OUT; MOSI_POT = 0;
    6f86:	d9 02 a9    	bclr.b    0x2d9, #0x0
    6f88:	db 02 a9    	bclr.b    0x2db, #0x0

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    6f8a:	11 3a 80    	mov.w     0x742, w1
    6f8c:	f0 0b 20    	mov.w     #0xbf, w0
    6f8e:	00 81 60    	and.w     w1, w0, w2
    6f90:	60 04 20    	mov.w     #0x46, w0
    6f92:	71 05 20    	mov.w     #0x57, w1
    6f94:	23 74 20    	mov.w     #0x742, w3
    6f96:	80 49 78    	mov.b     w0, [w3]
    6f98:	81 49 78    	mov.b     w1, [w3]
    6f9a:	82 49 78    	mov.b     w2, [w3]
    RPINR[MISO2_RP] = MISO_POT_RP;
    6f9c:	1e 00 90    	mov.w     [w14+2], w0
    6f9e:	c0 02 b0    	add.w     #0x2c, w0
    6fa0:	21 c1 b3    	mov.b     #0x12, w1
    6fa2:	01 48 78    	mov.b     w1, [w0]
    RPOR[MOSI_POT_RP] = MOSI2_RP;
    6fa4:	1e 80 e8    	inc2.w    [w14], w0
    6fa6:	a1 c0 b3    	mov.b     #0xa, w1
    6fa8:	01 48 78    	mov.b     w1, [w0]
    RPOR[SCK_POT_RP] = SCK2OUT_RP;
    6faa:	9e 00 78    	mov.w     [w14], w1
    6fac:	6c 80 40    	add.w     w1, #0xc, w0
    6fae:	b1 c0 b3    	mov.b     #0xb, w1
    6fb0:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    6fb2:	10 3a 80    	mov.w     0x742, w0
    6fb4:	00 01 78    	mov.w     w0, w2
    6fb6:	02 60 a0    	bset.w    w2, #0x6
    6fb8:	60 04 20    	mov.w     #0x46, w0
    6fba:	71 05 20    	mov.w     #0x57, w1
    6fbc:	23 74 20    	mov.w     #0x742, w3
    6fbe:	80 49 78    	mov.b     w0, [w3]
    6fc0:	81 49 78    	mov.b     w1, [w3]
    6fc2:	82 49 78    	mov.b     w2, [w3]

    SPI2CON1 = 0x0132;              // SPI mode = 0, SCK freq = 1 MHz
    6fc4:	20 13 20    	mov.w     #0x132, w0
    6fc6:	10 13 88    	mov.w     w0, 0x262
    SPI2CON2 = 0;
    6fc8:	64 22 ef    	clr.w     0x264
    SPI2STAT = 0x8000;
    6fca:	00 00 28    	mov.w     #0x8000, w0
    6fcc:	00 13 88    	mov.w     w0, 0x260

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    6fce:	11 3a 80    	mov.w     0x742, w1
    6fd0:	f0 0b 20    	mov.w     #0xbf, w0
    6fd2:	00 81 60    	and.w     w1, w0, w2
    6fd4:	60 04 20    	mov.w     #0x46, w0
    6fd6:	71 05 20    	mov.w     #0x57, w1
    6fd8:	23 74 20    	mov.w     #0x742, w3
    6fda:	80 49 78    	mov.b     w0, [w3]
    6fdc:	81 49 78    	mov.b     w1, [w3]
    6fde:	82 49 78    	mov.b     w2, [w3]
    RPOR[MCLK_DDS_RP] = OC5_RP;
    6fe0:	9e 00 78    	mov.w     [w14], w1
    6fe2:	70 80 40    	add.w     w1, #0x10, w0
    6fe4:	61 c1 b3    	mov.b     #0x16, w1
    6fe6:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    6fe8:	10 3a 80    	mov.w     0x742, w0
    6fea:	00 01 78    	mov.w     w0, w2
    6fec:	02 60 a0    	bset.w    w2, #0x6
    6fee:	60 04 20    	mov.w     #0x46, w0
    6ff0:	71 05 20    	mov.w     #0x57, w1
    6ff2:	23 74 20    	mov.w     #0x742, w3
    6ff4:	80 49 78    	mov.b     w0, [w3]
    6ff6:	81 49 78    	mov.b     w1, [w3]
    6ff8:	82 49 78    	mov.b     w2, [w3]

    OC5CON1 = 0x1C06;               // configure OC5 to produce a 4 MHz, 50% duty cycle PWM output
    6ffa:	60 c0 21    	mov.w     #0x1c06, w0
    6ffc:	c0 0d 88    	mov.w     w0, 0x1b8
    OC5CON2 = 0x001F;
    6ffe:	f0 01 20    	mov.w     #0x1f, w0
    7000:	d0 0d 88    	mov.w     w0, 0x1ba
    OC5RS = 3;
    7002:	30 00 20    	mov.w     #0x3, w0
    7004:	e0 0d 88    	mov.w     w0, 0x1bc
    OC5R = 1;
    7006:	10 00 20    	mov.w     #0x1, w0
    7008:	f0 0d 88    	mov.w     w0, 0x1be

    nSQUARE_DIR = OUT; nSQUARE = 1;
    700a:	d8 c2 a9    	bclr.b    0x2d8, #0x6
    700c:	dc c2 a8    	bset.b    0x2dc, #0x6
    WG_GAIN_DIR = OUT; WG_GAIN = 0;
    700e:	e0 42 a9    	bclr.b    0x2e0, #0x2
    7010:	e4 42 a9    	bclr.b    0x2e4, #0x2

    AD9837_control_bits = AD9837_B28 | AD9837_RESET;
    7012:	00 10 22    	mov.w     #0x2100, w0
    7014:	80 41 88    	mov.w     w0, 0x830
    spi_out_dds(AD9837_CONTROL | AD9837_control_bits);
    7016:	80 41 80    	mov.w     0x830, w0
    7018:	53 00 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>

    sq_offset_adj = 580;
    701a:	40 24 20    	mov.w     #0x244, w0
    701c:	60 41 88    	mov.w     w0, 0x82c
    nsq_offset_adj = 580;
    701e:	40 24 20    	mov.w     #0x244, w0
    7020:	70 41 88    	mov.w     w0, 0x82e

    set_shape(0);                   // set initial shape to DC
    7022:	00 00 eb    	clr.w     w0
    7024:	79 00 07    	rcall     0x7118 <_set_shape> <.LFB8> <.LFE7>
    set_freq(1573, 4);              // set initial freq to 1 kHz
    7026:	41 00 20    	mov.w     #0x4, w1
    7028:	50 62 20    	mov.w     #0x625, w0
    702a:	be 00 07    	rcall     0x71a8 <_set_freq> <.LFB10> <.LFE9>
    set_phase(0);
    702c:	00 00 eb    	clr.w     w0
    702e:	e9 00 07    	rcall     0x7202 <_set_phase> <.LFB13> <.LFE12>
    set_amplitude(0);               // set initial amplitude to 0 V
    7030:	00 00 eb    	clr.w     w0
    7032:	0d 01 07    	rcall     0x724e <_set_amplitude> <.LFB15> <.LFE14>
    set_offset(500);                // set initial offset to 2.5 V
    7034:	40 1f 20    	mov.w     #0x1f4, w0
    7036:	19 01 07    	rcall     0x726a <_set_offset> <.LFB17> <.LFE16>

    T3CON = 0x0010;                 // set Timer3 period to 30ms
    7038:	00 01 20    	mov.w     #0x10, w0
    703a:	90 08 88    	mov.w     w0, 0x112
    PR3 = 0xEA5F;
    703c:	f0 a5 2e    	mov.w     #0xea5f, w0
    703e:	70 08 88    	mov.w     w0, 0x10e
    TMR3 = 0;
    7040:	0a 21 ef    	clr.w     0x10a
    IFS0bits.T3IF = 0;
    7042:	85 00 a9    	bclr.b    0x85, #0x0

    wavegen_offset_set_mode(SINGLE);
    7044:	00 00 eb    	clr.w     w0
    7046:	47 01 07    	rcall     0x72d6 <_wavegen_offset_set_mode> <.LFB24> <.LFE23>
    wavegen_offset_samples = 0;
    7048:	34 28 ef    	clr.w     0x834
    wavegen_offset_address.ul = WAVEGEN_OFFSET_SAMPLE_MEM;
    704a:	20 40 20    	mov.w     #0x402, w0
    704c:	11 00 20    	mov.w     #0x1, w1
    704e:	b0 41 88    	mov.w     w0, 0x836
    7050:	c1 41 88    	mov.w     w1, 0x838
}
    7052:	00 80 fa    	ulnk      
    7054:	00 00 06    	return    

00007056 <_set_wg_gain>:

void set_wg_gain(uint16_t value) {
    7056:	02 00 fa    	lnk       #0x2
    7058:	00 0f 78    	mov.w     w0, [w14]
    WG_GAIN = (value) ? 1 : 0;
    705a:	1e 00 78    	mov.w     [w14], w0
    705c:	00 f0 a7    	btsc.w    w0, #0xf
    705e:	00 00 ea    	neg.w     w0, w0
    7060:	00 00 ea    	neg.w     w0, w0
    7062:	4f 00 de    	lsr.w     w0, #0xf, w0
    7064:	00 40 78    	mov.b     w0, w0
    7066:	00 80 fb    	ze        w0, w0
    7068:	61 00 60    	and.w     w0, #0x1, w0
    706a:	42 00 dd    	sl.w      w0, #0x2, w0
    706c:	21 17 80    	mov.w     0x2e4, w1
    706e:	01 20 a1    	bclr.w    w1, #0x2
    7070:	01 00 70    	ior.w     w0, w1, w0
    7072:	20 17 88    	mov.w     w0, 0x2e4
}
    7074:	00 80 fa    	ulnk      
    7076:	00 00 06    	return    

00007078 <_get_wg_gain>:

uint16_t get_wg_gain(void) {
    7078:	00 00 fa    	lnk       #0x0
    return (WG_GAIN) ? 1 : 0;
    707a:	20 17 80    	mov.w     0x2e4, w0
    707c:	64 00 60    	and.w     w0, #0x4, w0
    707e:	00 f0 a7    	btsc.w    w0, #0xf
    7080:	00 00 ea    	neg.w     w0, w0
    7082:	00 00 ea    	neg.w     w0, w0
    7084:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    7086:	00 80 fa    	ulnk      
    7088:	00 00 06    	return    

0000708a <_set_nsq>:

void set_nsq(uint16_t value) {
    708a:	02 00 fa    	lnk       #0x2
    708c:	00 0f 78    	mov.w     w0, [w14]
    nSQUARE = (value) ? 1 : 0;
    708e:	1e 00 78    	mov.w     [w14], w0
    7090:	00 f0 a7    	btsc.w    w0, #0xf
    7092:	00 00 ea    	neg.w     w0, w0
    7094:	00 00 ea    	neg.w     w0, w0
    7096:	4f 00 de    	lsr.w     w0, #0xf, w0
    7098:	00 40 78    	mov.b     w0, w0
    709a:	00 80 fb    	ze        w0, w0
    709c:	61 00 60    	and.w     w0, #0x1, w0
    709e:	46 00 dd    	sl.w      w0, #0x6, w0
    70a0:	e1 16 80    	mov.w     0x2dc, w1
    70a2:	01 60 a1    	bclr.w    w1, #0x6
    70a4:	01 00 70    	ior.w     w0, w1, w0
    70a6:	e0 16 88    	mov.w     w0, 0x2dc
}
    70a8:	00 80 fa    	ulnk      
    70aa:	00 00 06    	return    

000070ac <_get_nsq>:

uint16_t get_nsq(void) {
    70ac:	00 00 fa    	lnk       #0x0
    return (nSQUARE) ? 1 : 0;
    70ae:	e1 16 80    	mov.w     0x2dc, w1
    70b0:	00 04 20    	mov.w     #0x40, w0
    70b2:	00 80 60    	and.w     w1, w0, w0
    70b4:	00 f0 a7    	btsc.w    w0, #0xf
    70b6:	00 00 ea    	neg.w     w0, w0
    70b8:	00 00 ea    	neg.w     w0, w0
    70ba:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    70bc:	00 80 fa    	ulnk      
    70be:	00 00 06    	return    

000070c0 <_spi_out_dds>:

void spi_out_dds(uint16_t value) {
    70c0:	06 00 fa    	lnk       #0x6
    70c2:	20 07 98    	mov.w     w0, [w14+4]
    uint16_t ret;
    WORD temp;

    temp.w = value;
    70c4:	ae 00 90    	mov.w     [w14+4], w1
    70c6:	11 07 98    	mov.w     w1, [w14+2]
    nCS_DDS = 0;
    70c8:	cd 82 a9    	bclr.b    0x2cd, #0x4
    SPI1BUF = (uint16_t)temp.b[1];
    70ca:	3e 40 90    	mov.b     [w14+3], w0
    70cc:	00 80 fb    	ze        w0, w0
    70ce:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    70d0:	00 00 00    	nop       

000070d2 <.L10>:
    70d2:	00 12 80    	mov.w     0x240, w0
    70d4:	61 00 60    	and.w     w0, #0x1, w0
    70d6:	00 00 e0    	cp0.w     w0
    70d8:	fc ff 32    	bra       Z, 0x70d2 <.L10>
    ret = SPI1BUF;
    70da:	41 12 80    	mov.w     0x248, w1
    70dc:	01 0f 78    	mov.w     w1, [w14]
    SPI1BUF = (uint16_t)temp.b[0];
    70de:	2e 40 90    	mov.b     [w14+2], w0
    70e0:	00 80 fb    	ze        w0, w0
    70e2:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    70e4:	00 00 00    	nop       

000070e6 <.L11>:
    70e6:	00 12 80    	mov.w     0x240, w0
    70e8:	61 00 60    	and.w     w0, #0x1, w0
    70ea:	00 00 e0    	cp0.w     w0
    70ec:	fc ff 32    	bra       Z, 0x70e6 <.L11>
    ret = SPI1BUF;
    70ee:	41 12 80    	mov.w     0x248, w1
    70f0:	01 0f 78    	mov.w     w1, [w14]
    nCS_DDS = 1;
    70f2:	cd 82 a8    	bset.b    0x2cd, #0x4
}
    70f4:	00 80 fa    	ulnk      
    70f6:	00 00 06    	return    

000070f8 <_spi_out_pot>:

void spi_out_pot(uint8_t value) {
    70f8:	04 00 fa    	lnk       #0x4
    70fa:	20 47 98    	mov.b     w0, [w14+2]
    uint16_t ret;

    nCS_POT = 0;
    70fc:	d5 82 a9    	bclr.b    0x2d5, #0x4
    SPI2BUF = (uint16_t)value;
    70fe:	2e 40 90    	mov.b     [w14+2], w0
    7100:	00 80 fb    	ze        w0, w0
    7102:	40 13 88    	mov.w     w0, 0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    7104:	00 00 00    	nop       

00007106 <.L13>:
    7106:	00 13 80    	mov.w     0x260, w0
    7108:	61 00 60    	and.w     w0, #0x1, w0
    710a:	00 00 e0    	cp0.w     w0
    710c:	fc ff 32    	bra       Z, 0x7106 <.L13>
    ret = SPI2BUF;
    710e:	41 13 80    	mov.w     0x268, w1
    7110:	01 0f 78    	mov.w     w1, [w14]
    nCS_POT = 1;
    7112:	d5 82 a8    	bset.b    0x2d5, #0x4
}
    7114:	00 80 fa    	ulnk      
    7116:	00 00 06    	return    

00007118 <_set_shape>:

void set_shape(uint16_t value) {
    7118:	02 00 fa    	lnk       #0x2
    711a:	00 0f 78    	mov.w     w0, [w14]
    if (value <= 3)
    711c:	1e 00 78    	mov.w     [w14], w0
    711e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    7120:	02 00 3e    	bra       GTU, 0x7126 <.L15>
        shape_val = value;
    7122:	9e 00 78    	mov.w     [w14], w1
    7124:	01 41 88    	mov.w     w1, 0x820

00007126 <.L15>:
    switch (shape_val) {
    7126:	00 41 80    	mov.w     0x820, w0
    7128:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    712a:	14 00 32    	bra       Z, 0x7154 <.L18>
    712c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    712e:	05 00 39    	bra       NC, 0x713a <.L17>
    7130:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    7132:	1a 00 32    	bra       Z, 0x7168 <.L19>
    7134:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    7136:	26 00 32    	bra       Z, 0x7184 <.L20>
    7138:	31 00 37    	bra       0x719c <.L14>

0000713a <.L17>:
        case DC:
            AD9837_control_bits |= AD9837_RESET;
    713a:	80 41 80    	mov.w     0x830, w0
    713c:	00 80 a0    	bset.w    w0, #0x8
    713e:	80 41 88    	mov.w     w0, 0x830
            AD9837_control_bits &= ~(AD9837_OPBITEN | AD9837_MODE | AD9837_DIV2);
    7140:	81 41 80    	mov.w     0x830, w1
    7142:	50 fd 2f    	mov.w     #0xffd5, w0
    7144:	00 80 60    	and.w     w1, w0, w0
    7146:	80 41 88    	mov.w     w0, 0x830
            spi_out_dds(AD9837_CONTROL | AD9837_control_bits);
    7148:	80 41 80    	mov.w     0x830, w0
    714a:	ba ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
            nSQUARE = 1;
    714c:	dc c2 a8    	bset.b    0x2dc, #0x6
            DAC2DAT = nsq_offset_adj;
    714e:	70 41 80    	mov.w     0x82e, w0
    7150:	30 22 88    	mov.w     w0, 0x446
            break;
    7152:	24 00 37    	bra       0x719c <.L14>

00007154 <.L18>:
        case SIN:
            AD9837_control_bits &= ~(AD9837_RESET | AD9837_OPBITEN | AD9837_MODE | AD9837_DIV2);
    7154:	81 41 80    	mov.w     0x830, w1
    7156:	50 ed 2f    	mov.w     #0xfed5, w0
    7158:	00 80 60    	and.w     w1, w0, w0
    715a:	80 41 88    	mov.w     w0, 0x830
            spi_out_dds(AD9837_CONTROL | AD9837_control_bits);
    715c:	80 41 80    	mov.w     0x830, w0
    715e:	b0 ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
            nSQUARE = 1;
    7160:	dc c2 a8    	bset.b    0x2dc, #0x6
            DAC2DAT = nsq_offset_adj;
    7162:	70 41 80    	mov.w     0x82e, w0
    7164:	30 22 88    	mov.w     w0, 0x446
            break;
    7166:	1a 00 37    	bra       0x719c <.L14>

00007168 <.L19>:
        case SQUARE:
            AD9837_control_bits |= (AD9837_OPBITEN | AD9837_DIV2);
    7168:	81 41 80    	mov.w     0x830, w1
    716a:	80 02 20    	mov.w     #0x28, w0
    716c:	01 00 70    	ior.w     w0, w1, w0
    716e:	80 41 88    	mov.w     w0, 0x830
            AD9837_control_bits &= ~(AD9837_RESET | AD9837_MODE);
    7170:	81 41 80    	mov.w     0x830, w1
    7172:	d0 ef 2f    	mov.w     #0xfefd, w0
    7174:	00 80 60    	and.w     w1, w0, w0
    7176:	80 41 88    	mov.w     w0, 0x830
            spi_out_dds(AD9837_CONTROL | AD9837_control_bits);
    7178:	80 41 80    	mov.w     0x830, w0
    717a:	a2 ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
            nSQUARE = 0;
    717c:	dc c2 a9    	bclr.b    0x2dc, #0x6
            DAC2DAT = sq_offset_adj;
    717e:	60 41 80    	mov.w     0x82c, w0
    7180:	30 22 88    	mov.w     w0, 0x446
            break;
    7182:	0c 00 37    	bra       0x719c <.L14>

00007184 <.L20>:
        case TRIANGLE:
            AD9837_control_bits |= AD9837_MODE;
    7184:	80 41 80    	mov.w     0x830, w0
    7186:	00 10 a0    	bset.w    w0, #0x1
    7188:	80 41 88    	mov.w     w0, 0x830
            AD9837_control_bits &= ~(AD9837_RESET | AD9837_OPBITEN | AD9837_DIV2);
    718a:	81 41 80    	mov.w     0x830, w1
    718c:	70 ed 2f    	mov.w     #0xfed7, w0
    718e:	00 80 60    	and.w     w1, w0, w0
    7190:	80 41 88    	mov.w     w0, 0x830
            spi_out_dds(AD9837_CONTROL | AD9837_control_bits);
    7192:	80 41 80    	mov.w     0x830, w0
    7194:	95 ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
            nSQUARE = 1;
    7196:	dc c2 a8    	bset.b    0x2dc, #0x6
            DAC2DAT = nsq_offset_adj;
    7198:	70 41 80    	mov.w     0x82e, w0
    719a:	30 22 88    	mov.w     w0, 0x446

0000719c <.L14>:
    }
}
    719c:	00 80 fa    	ulnk      
    719e:	00 00 06    	return    

000071a0 <_get_shape>:

uint16_t get_shape(void) {
    71a0:	00 00 fa    	lnk       #0x0
    return shape_val;
    71a2:	00 41 80    	mov.w     0x820, w0
}
    71a4:	00 80 fa    	ulnk      
    71a6:	00 00 06    	return    

000071a8 <_set_freq>:

void set_freq(uint16_t value_l, uint16_t value_h) {
    71a8:	04 00 fa    	lnk       #0x4
    71aa:	00 0f 78    	mov.w     w0, [w14]
    71ac:	11 07 98    	mov.w     w1, [w14+2]
    freq_val_l = value_l;
    71ae:	9e 00 78    	mov.w     [w14], w1
    71b0:	11 41 88    	mov.w     w1, 0x822
    freq_val_h = value_h;
    71b2:	9e 00 90    	mov.w     [w14+2], w1
    71b4:	21 41 88    	mov.w     w1, 0x824
    if ((AD9837_control_bits & AD9837_FSEL) != 0) {
    71b6:	81 41 80    	mov.w     0x830, w1
    71b8:	00 80 20    	mov.w     #0x800, w0
    71ba:	00 80 60    	and.w     w1, w0, w0
    71bc:	00 00 e0    	cp0.w     w0
    71be:	0c 00 32    	bra       Z, 0x71d8 <.L23>
        spi_out_dds(AD9837_14FREQ0 | freq_val_l);
    71c0:	10 41 80    	mov.w     0x822, w0
    71c2:	00 e0 a0    	bset.w    w0, #0xe
    71c4:	7d ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
        spi_out_dds(AD9837_14FREQ0 | freq_val_h);
    71c6:	20 41 80    	mov.w     0x824, w0
    71c8:	00 e0 a0    	bset.w    w0, #0xe
    71ca:	7a ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
        AD9837_control_bits &= ~AD9837_FSEL;
    71cc:	80 41 80    	mov.w     0x830, w0
    71ce:	00 b0 a1    	bclr.w    w0, #0xb
    71d0:	80 41 88    	mov.w     w0, 0x830
        spi_out_dds(AD9837_CONTROL | AD9837_control_bits);
    71d2:	80 41 80    	mov.w     0x830, w0
    71d4:	75 ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
    71d6:	0b 00 37    	bra       0x71ee <.L22>

000071d8 <.L23>:
    } else {
        spi_out_dds(AD9837_14FREQ1 | freq_val_l);
    71d8:	10 41 80    	mov.w     0x822, w0
    71da:	00 f0 a0    	bset.w    w0, #0xf
    71dc:	71 ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
        spi_out_dds(AD9837_14FREQ1 | freq_val_h);
    71de:	20 41 80    	mov.w     0x824, w0
    71e0:	00 f0 a0    	bset.w    w0, #0xf
    71e2:	6e ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
        AD9837_control_bits |= AD9837_FSEL;
    71e4:	80 41 80    	mov.w     0x830, w0
    71e6:	00 b0 a0    	bset.w    w0, #0xb
    71e8:	80 41 88    	mov.w     w0, 0x830
        spi_out_dds(AD9837_CONTROL | AD9837_control_bits);
    71ea:	80 41 80    	mov.w     0x830, w0
    71ec:	69 ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>

000071ee <.L22>:
    }
}
    71ee:	00 80 fa    	ulnk      
    71f0:	00 00 06    	return    

000071f2 <_get_freq_l>:

uint16_t get_freq_l(void) {
    71f2:	00 00 fa    	lnk       #0x0
    return freq_val_l;
    71f4:	10 41 80    	mov.w     0x822, w0
}
    71f6:	00 80 fa    	ulnk      
    71f8:	00 00 06    	return    

000071fa <_get_freq_h>:

uint16_t get_freq_h(void) {
    71fa:	00 00 fa    	lnk       #0x0
    return freq_val_h;
    71fc:	20 41 80    	mov.w     0x824, w0
}
    71fe:	00 80 fa    	ulnk      
    7200:	00 00 06    	return    

00007202 <_set_phase>:

void set_phase(uint16_t value) {
    7202:	02 00 fa    	lnk       #0x2
    7204:	00 0f 78    	mov.w     w0, [w14]
    phase_val = value;
    7206:	9e 00 78    	mov.w     [w14], w1
    7208:	31 41 88    	mov.w     w1, 0x826
    if ((AD9837_control_bits & AD9837_PSEL) != 0) {
    720a:	81 41 80    	mov.w     0x830, w1
    720c:	00 40 20    	mov.w     #0x400, w0
    720e:	00 80 60    	and.w     w1, w0, w0
    7210:	00 00 e0    	cp0.w     w0
    7212:	0c 00 32    	bra       Z, 0x722c <.L28>
        spi_out_dds(AD9837_12PHASE0 | (phase_val & 0x0FFF));
    7214:	31 41 80    	mov.w     0x826, w1
    7216:	f0 ff 20    	mov.w     #0xfff, w0
    7218:	80 80 60    	and.w     w1, w0, w1
    721a:	00 00 2c    	mov.w     #0xc000, w0
    721c:	01 00 70    	ior.w     w0, w1, w0
    721e:	50 ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
        AD9837_control_bits &= ~AD9837_PSEL;
    7220:	80 41 80    	mov.w     0x830, w0
    7222:	00 a0 a1    	bclr.w    w0, #0xa
    7224:	80 41 88    	mov.w     w0, 0x830
        spi_out_dds(AD9837_CONTROL | AD9837_control_bits);
    7226:	80 41 80    	mov.w     0x830, w0
    7228:	4b ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
    722a:	0b 00 37    	bra       0x7242 <.L27>

0000722c <.L28>:
    } else {
        spi_out_dds(AD9837_12PHASE1 | (phase_val & 0x0FFF));
    722c:	31 41 80    	mov.w     0x826, w1
    722e:	f0 ff 20    	mov.w     #0xfff, w0
    7230:	80 80 60    	and.w     w1, w0, w1
    7232:	00 00 2e    	mov.w     #0xe000, w0
    7234:	01 00 70    	ior.w     w0, w1, w0
    7236:	44 ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>
        AD9837_control_bits |= AD9837_PSEL;
    7238:	80 41 80    	mov.w     0x830, w0
    723a:	00 a0 a0    	bset.w    w0, #0xa
    723c:	80 41 88    	mov.w     w0, 0x830
        spi_out_dds(AD9837_CONTROL | AD9837_control_bits);
    723e:	80 41 80    	mov.w     0x830, w0
    7240:	3f ff 07    	rcall     0x70c0 <_spi_out_dds> <.LFB6> <.LFE5>

00007242 <.L27>:
    }
}
    7242:	00 80 fa    	ulnk      
    7244:	00 00 06    	return    

00007246 <_get_phase>:

uint16_t get_phase(void) {
    7246:	00 00 fa    	lnk       #0x0
    return phase_val;
    7248:	30 41 80    	mov.w     0x826, w0
}
    724a:	00 80 fa    	ulnk      
    724c:	00 00 06    	return    

0000724e <_set_amplitude>:

void set_amplitude(uint16_t value) {
    724e:	02 00 fa    	lnk       #0x2
    7250:	00 0f 78    	mov.w     w0, [w14]
    amplitude_val = value & 0xFF;
    7252:	f0 0f 20    	mov.w     #0xff, w0
    7254:	1e 00 60    	and.w     w0, [w14], w0
    7256:	40 41 88    	mov.w     w0, 0x828
    spi_out_pot((uint8_t)amplitude_val);
    7258:	40 41 80    	mov.w     0x828, w0
    725a:	00 40 78    	mov.b     w0, w0
    725c:	4d ff 07    	rcall     0x70f8 <_spi_out_pot> <.LFB7> <.LFE6>
}
    725e:	00 80 fa    	ulnk      
    7260:	00 00 06    	return    

00007262 <_get_amplitude>:

uint16_t get_amplitude(void) {
    7262:	00 00 fa    	lnk       #0x0
    return amplitude_val;
    7264:	40 41 80    	mov.w     0x828, w0
}
    7266:	00 80 fa    	ulnk      
    7268:	00 00 06    	return    

0000726a <_set_offset>:

void set_offset(uint16_t value) {
    726a:	02 00 fa    	lnk       #0x2
    726c:	00 0f 78    	mov.w     w0, [w14]
    offset_val = value & 0x03FF;
    726e:	f0 3f 20    	mov.w     #0x3ff, w0
    7270:	1e 00 60    	and.w     w0, [w14], w0
    7272:	50 41 88    	mov.w     w0, 0x82a
    if (T3CONbits.TON == 0)
    7274:	91 08 80    	mov.w     0x112, w1
    7276:	00 00 28    	mov.w     #0x8000, w0
    7278:	00 80 60    	and.w     w1, w0, w0
    727a:	00 00 e0    	cp0.w     w0
    727c:	02 00 3a    	bra       NZ, 0x7282 <.L33>
        DAC1DAT = offset_val;
    727e:	50 41 80    	mov.w     0x82a, w0
    7280:	10 22 88    	mov.w     w0, 0x442

00007282 <.L33>:
}
    7282:	00 80 fa    	ulnk      
    7284:	00 00 06    	return    

00007286 <_get_offset>:

uint16_t get_offset(void) {
    7286:	00 00 fa    	lnk       #0x0
    return offset_val;
    7288:	50 41 80    	mov.w     0x82a, w0
}
    728a:	00 80 fa    	ulnk      
    728c:	00 00 06    	return    

0000728e <_set_sq_offset_adj>:

void set_sq_offset_adj(uint16_t value) {
    728e:	02 00 fa    	lnk       #0x2
    7290:	00 0f 78    	mov.w     w0, [w14]
    sq_offset_adj = value & 0x03FF;
    7292:	f0 3f 20    	mov.w     #0x3ff, w0
    7294:	1e 00 60    	and.w     w0, [w14], w0
    7296:	60 41 88    	mov.w     w0, 0x82c
    DAC2DAT = sq_offset_adj;
    7298:	60 41 80    	mov.w     0x82c, w0
    729a:	30 22 88    	mov.w     w0, 0x446
}
    729c:	00 80 fa    	ulnk      
    729e:	00 00 06    	return    

000072a0 <_get_sq_offset_adj>:

uint16_t get_sq_offset_adj(void) {
    72a0:	00 00 fa    	lnk       #0x0
    return sq_offset_adj;
    72a2:	60 41 80    	mov.w     0x82c, w0
}
    72a4:	00 80 fa    	ulnk      
    72a6:	00 00 06    	return    

000072a8 <_set_nsq_offset_adj>:

void set_nsq_offset_adj(uint16_t value) {
    72a8:	02 00 fa    	lnk       #0x2
    72aa:	00 0f 78    	mov.w     w0, [w14]
    nsq_offset_adj = value & 0x03FF;
    72ac:	f0 3f 20    	mov.w     #0x3ff, w0
    72ae:	1e 00 60    	and.w     w0, [w14], w0
    72b0:	70 41 88    	mov.w     w0, 0x82e
    DAC2DAT = nsq_offset_adj;
    72b2:	70 41 80    	mov.w     0x82e, w0
    72b4:	30 22 88    	mov.w     w0, 0x446
}
    72b6:	00 80 fa    	ulnk      
    72b8:	00 00 06    	return    

000072ba <_get_nsq_offset_adj>:

uint16_t get_nsq_offset_adj(void) {
    72ba:	00 00 fa    	lnk       #0x0
    return nsq_offset_adj;
    72bc:	70 41 80    	mov.w     0x82e, w0
}
    72be:	00 80 fa    	ulnk      
    72c0:	00 00 06    	return    

000072c2 <_wavegen_offset_set_interval>:

void wavegen_offset_set_interval(uint16_t value1, uint16_t value2) {
    72c2:	04 00 fa    	lnk       #0x4
    72c4:	00 0f 78    	mov.w     w0, [w14]
    72c6:	11 07 98    	mov.w     w1, [w14+2]
    wavegen_offset_stop();
    72c8:	2d 00 07    	rcall     0x7324 <_wavegen_offset_stop> <.LFB27> <.LFE26>
    PR3 = value1;
    72ca:	9e 00 78    	mov.w     [w14], w1
    72cc:	71 08 88    	mov.w     w1, 0x10e
    T3CON = value2;
    72ce:	9e 00 90    	mov.w     [w14+2], w1
    72d0:	91 08 88    	mov.w     w1, 0x112
}
    72d2:	00 80 fa    	ulnk      
    72d4:	00 00 06    	return    

000072d6 <_wavegen_offset_set_mode>:

void wavegen_offset_set_mode(uint16_t value) {
    72d6:	02 00 fa    	lnk       #0x2
    72d8:	00 0f 78    	mov.w     w0, [w14]
    wavegen_offset_mode = (value) ? REPEAT : SINGLE;
    72da:	1e 00 78    	mov.w     [w14], w0
    72dc:	00 f0 a7    	btsc.w    w0, #0xf
    72de:	00 00 ea    	neg.w     w0, w0
    72e0:	00 00 ea    	neg.w     w0, w0
    72e2:	4f 00 de    	lsr.w     w0, #0xf, w0
    72e4:	90 41 88    	mov.w     w0, 0x832
}
    72e6:	00 80 fa    	ulnk      
    72e8:	00 00 06    	return    

000072ea <_wavegen_offset_get_mode>:

uint16_t wavegen_offset_get_mode(void) {
    72ea:	00 00 fa    	lnk       #0x0
    return wavegen_offset_mode;
    72ec:	90 41 80    	mov.w     0x832, w0
}
    72ee:	00 80 fa    	ulnk      
    72f0:	00 00 06    	return    

000072f2 <_wavegen_offset_start>:

void wavegen_offset_start(void) {
    72f2:	02 00 fa    	lnk       #0x2
    uint16_t no_samples_present;

    wavegen_offset_address.ul = WAVEGEN_OFFSET_SAMPLE_MEM;
    72f4:	20 40 20    	mov.w     #0x402, w0
    72f6:	11 00 20    	mov.w     #0x1, w1
    72f8:	b0 41 88    	mov.w     w0, 0x836
    72fa:	c1 41 88    	mov.w     w1, 0x838
    __asm__("push _TBLPAG");
    72fc:	54 00 f8    	push      0x54
    TBLPAG = WAVEGEN_OFFSET_NUM_SAMPLES >> 16;
    72fe:	10 00 20    	mov.w     #0x1, w0
    7300:	a0 02 88    	mov.w     w0, 0x54
    wavegen_offset_samples = __builtin_tblrdl(WAVEGEN_OFFSET_NUM_SAMPLES & 0xFFFF);
    7302:	00 40 20    	mov.w     #0x400, w0
    7304:	10 00 ba    	tblrdl.w  [w0], w0
    7306:	a0 41 88    	mov.w     w0, 0x834
    no_samples_present = __builtin_tblrdh(WAVEGEN_OFFSET_NUM_SAMPLES & 0xFFFF);
    7308:	00 40 20    	mov.w     #0x400, w0
    730a:	10 8f ba    	tblrdh.w  [w0], [w14]
    __asm__("pop _TBLPAG");
    730c:	54 00 f9    	pop       0x54

    if (no_samples_present)
    730e:	1e 00 78    	mov.w     [w14], w0
    7310:	00 00 e0    	cp0.w     w0
    7312:	05 00 3a    	bra       NZ, 0x731e <.L46>
        return;

    IFS0bits.T3IF = 0;
    7314:	85 00 a9    	bclr.b    0x85, #0x0
    TMR3 = 0;
    7316:	0a 21 ef    	clr.w     0x10a
    IEC0bits.T3IE = 1;
    7318:	95 00 a8    	bset.b    0x95, #0x0
    T3CONbits.TON = 1;
    731a:	13 e1 a8    	bset.b    0x113, #0x7
    731c:	01 00 37    	bra       0x7320 <.L43>

0000731e <.L46>:
    731e:	00 00 00    	nop       

00007320 <.L43>:
}
    7320:	00 80 fa    	ulnk      
    7322:	00 00 06    	return    

00007324 <_wavegen_offset_stop>:

void wavegen_offset_stop(void) {
    7324:	00 00 fa    	lnk       #0x0
    T3CONbits.TON = 0;
    7326:	13 e1 a9    	bclr.b    0x113, #0x7
    IEC0bits.T3IE = 0;
    7328:	95 00 a9    	bclr.b    0x95, #0x0
    set_offset(offset_val);
    732a:	50 41 80    	mov.w     0x82a, w0
    732c:	9e ff 07    	rcall     0x726a <_set_offset> <.LFB17> <.LFE16>
}
    732e:	00 80 fa    	ulnk      
    7330:	00 00 06    	return    

00007332 <_wavegen_offset_get_samples_left>:

uint16_t wavegen_offset_get_samples_left(void) {
    7332:	00 00 fa    	lnk       #0x0
    return wavegen_offset_samples;
    7334:	a0 41 80    	mov.w     0x834, w0
}
    7336:	00 80 fa    	ulnk      
    7338:	00 00 06    	return    

0000733a <_trigger_sweep_lt_4MSps>:
    T2CONbits.TON = 0;
    IFS0bits.DMA1IF = 0;
}

void trigger_sweep_lt_4MSps(void) {
    733a:	00 00 fa    	lnk       #0x0
    if (sweep_in_progress == FALSE) {
    733c:	b0 42 80    	mov.w     0x856, w0
    733e:	00 00 e0    	cp0.w     w0
    7340:	17 00 3a    	bra       NZ, 0x7370 <.L3>
        IFS0bits.AD1IF = 0;
    7342:	85 a0 a9    	bclr.b    0x85, #0x5
        IFS0bits.DMA0IF = 0;
    7344:	84 80 a9    	bclr.b    0x84, #0x4
        IFS0bits.DMA1IF = 0;
    7346:	85 c0 a9    	bclr.b    0x85, #0x6
        IFS0bits.T2IF = 0;
    7348:	84 e0 a9    	bclr.b    0x84, #0x7
        TMR2 = 0;
    734a:	06 21 ef    	clr.w     0x106
        DMACH0bits.CHEN = 1;
    734c:	88 03 a8    	bset.b    0x388, #0x0
        DMACH1bits.CHEN = 1;
    734e:	92 03 a8    	bset.b    0x392, #0x0
        T2CONbits.TON = 1;
    7350:	11 e1 a8    	bset.b    0x111, #0x7
        sweep_in_progress = TRUE;
    7352:	10 00 20    	mov.w     #0x1, w0
    7354:	b0 42 88    	mov.w     w0, 0x856
        if (((T2CON & 0x0030) == 0) && (PR2 < 1600)) {
    7356:	81 08 80    	mov.w     0x110, w1
    7358:	00 03 20    	mov.w     #0x30, w0
    735a:	00 80 60    	and.w     w1, w0, w0
    735c:	00 00 e0    	cp0.w     w0
    735e:	08 00 3a    	bra       NZ, 0x7370 <.L3>
    7360:	61 08 80    	mov.w     0x10c, w1
    7362:	f0 63 20    	mov.w     #0x63f, w0
    7364:	80 8f 50    	sub.w     w1, w0, [w15]
    7366:	04 00 3e    	bra       GTU, 0x7370 <.L3>
            while (sweep_in_progress) {}
    7368:	00 00 00    	nop       

0000736a <.L5>:
    736a:	b0 42 80    	mov.w     0x856, w0
    736c:	00 00 e0    	cp0.w     w0
    736e:	fd ff 3a    	bra       NZ, 0x736a <.L5>

00007370 <.L3>:
        }
    }
}
    7370:	00 80 fa    	ulnk      
    7372:	00 00 06    	return    

00007374 <_cancel_sweep>:

void cancel_sweep(void) {
    7374:	00 00 fa    	lnk       #0x0
    T2CONbits.TON = 0;
    7376:	11 e1 a9    	bclr.b    0x111, #0x7

    DMACH0bits.CHEN = 0;
    7378:	88 03 a9    	bclr.b    0x388, #0x0
    DMACH1bits.CHEN = 0;
    737a:	92 03 a9    	bclr.b    0x392, #0x0
    DMADST0 = (uint16_t)&scope_buffer[0];
    737c:	80 88 20    	mov.w     #0x888, w0
    737e:	70 1c 88    	mov.w     w0, 0x38e
    DMACNT0 = SCOPE_BUFFER_SIZE / 2;
    7380:	c0 5d 20    	mov.w     #0x5dc, w0
    7382:	80 1c 88    	mov.w     w0, 0x390
    DMADST1 = (uint16_t)&scope_buffer[SCOPE_BUFFER_SIZE / 2];
    7384:	00 44 21    	mov.w     #0x1440, w0
    7386:	c0 1c 88    	mov.w     w0, 0x398
    DMACNT1 = SCOPE_BUFFER_SIZE / 2;
    7388:	c0 5d 20    	mov.w     #0x5dc, w0
    738a:	d0 1c 88    	mov.w     w0, 0x39a
    sweep_in_progress = FALSE;
    738c:	56 28 ef    	clr.w     0x856
}
    738e:	00 80 fa    	ulnk      
    7390:	00 00 06    	return    

00007392 <_update_acquire_mode>:

void update_acquire_mode(void) {
    7392:	00 00 fa    	lnk       #0x0
    T2CONbits.TON = 0;
    7394:	11 e1 a9    	bclr.b    0x111, #0x7
    if (sweep_in_progress == TRUE)
    7396:	b0 42 80    	mov.w     0x856, w0
    7398:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    739a:	01 00 3a    	bra       NZ, 0x739e <.L8>
        cancel_sweep();
    739c:	eb ff 07    	rcall     0x7374 <_cancel_sweep> <.LFB3> <.LFE2>

0000739e <.L8>:

    if ((T2CON & 0x0030) == 0) {
    739e:	81 08 80    	mov.w     0x110, w1
    73a0:	00 03 20    	mov.w     #0x30, w0
    73a2:	00 80 60    	and.w     w1, w0, w0
    73a4:	00 00 e0    	cp0.w     w0
    73a6:	12 00 3a    	bra       NZ, 0x73cc <.L9>
        for (num_avg = max_avg; num_avg > 0; num_avg--)
    73a8:	00 43 80    	mov.w     0x860, w0
    73aa:	f0 42 88    	mov.w     w0, 0x85e
    73ac:	0b 00 37    	bra       0x73c4 <.L10>

000073ae <.L13>:
            if (PR2 >= avg_Tcy_thresholds[num_avg])
    73ae:	f0 42 80    	mov.w     0x85e, w0
    73b0:	80 00 40    	add.w     w0, w0, w1
    73b2:	40 59 22    	mov.w     #0x2594, w0
    73b4:	00 80 40    	add.w     w1, w0, w0
    73b6:	90 00 78    	mov.w     [w0], w1
    73b8:	60 08 80    	mov.w     0x10c, w0
    73ba:	80 8f 50    	sub.w     w1, w0, [w15]
    73bc:	0a 00 36    	bra       LEU, 0x73d2 <.L22>
    73be:	f0 42 80    	mov.w     0x85e, w0
    73c0:	00 00 e9    	dec.w     w0, w0
    73c2:	f0 42 88    	mov.w     w0, 0x85e

000073c4 <.L10>:
    73c4:	f0 42 80    	mov.w     0x85e, w0
    73c6:	00 00 e0    	cp0.w     w0
    73c8:	f2 ff 3a    	bra       NZ, 0x73ae <.L13>
    73ca:	04 00 37    	bra       0x73d4 <.L14>

000073cc <.L9>:
                break;
    } else
        num_avg = max_avg;
    73cc:	00 43 80    	mov.w     0x860, w0
    73ce:	f0 42 88    	mov.w     w0, 0x85e
    73d0:	01 00 37    	bra       0x73d4 <.L14>

000073d2 <.L22>:
    73d2:	00 00 00    	nop       

000073d4 <.L14>:

    if (num_avg == 0) {
    73d4:	f0 42 80    	mov.w     0x85e, w0
    73d6:	00 00 e0    	cp0.w     w0
    73d8:	32 00 3a    	bra       NZ, 0x743e <.L15>
        DMASRC0 = (uint16_t)&ADRES0;
    73da:	00 34 20    	mov.w     #0x340, w0
    73dc:	60 1c 88    	mov.w     w0, 0x38c
        DMASRC1 = (uint16_t)&ADRES1;
    73de:	20 34 20    	mov.w     #0x342, w0
    73e0:	b0 1c 88    	mov.w     w0, 0x396
        T2ISRoffset = 0;
    73e2:	62 28 ef    	clr.w     0x862
        IEC0bits.T2IE = 0;
    73e4:	94 e0 a9    	bclr.b    0x94, #0x7
        if (((T2CON & 0x0030) == 0) && (PR2 < 7)) {
    73e6:	81 08 80    	mov.w     0x110, w1
    73e8:	00 03 20    	mov.w     #0x30, w0
    73ea:	00 80 60    	and.w     w1, w0, w0
    73ec:	00 00 e0    	cp0.w     w0
    73ee:	16 00 3a    	bra       NZ, 0x741c <.L16>
    73f0:	60 08 80    	mov.w     0x10c, w0
    73f2:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    73f4:	13 00 3e    	bra       GTU, 0x741c <.L16>
            PR2 = 3;
    73f6:	30 00 20    	mov.w     #0x3, w0
    73f8:	60 08 88    	mov.w     w0, 0x10c
            DMACH0bits.CHEN = 0;
    73fa:	88 03 a9    	bclr.b    0x388, #0x0
            DMACH1bits.CHEN = 0;
    73fc:	92 03 a9    	bclr.b    0x392, #0x0
            ADCON3bits.SLEN0 = 0;
    73fe:	05 05 a9    	bclr.b    0x505, #0x0
            ADL0CONLbits.SLEN = 0;
    7400:	1d e5 a9    	bclr.b    0x51d, #0x7
            while (ADL0STATbits.LBUSY == 1) {}
    7402:	00 00 00    	nop       

00007404 <.L17>:
    7404:	11 29 80    	mov.w     0x522, w1
    7406:	00 00 24    	mov.w     #0x4000, w0
    7408:	00 80 60    	and.w     w1, w0, w0
    740a:	00 00 e0    	cp0.w     w0
    740c:	fb ff 3a    	bra       NZ, 0x7404 <.L17>
            ADL0CONL = 0x0281;      //     SLENCLR = 0 (SLEN cleared by software), 
    740e:	10 28 20    	mov.w     #0x281, w0
    7410:	e0 28 88    	mov.w     w0, 0x51c
                                    //     SLTSRC = 00010 (manual trigger event), 
                                    //     THSRC = 1 (thresh comp from samp list thresh reg),
                                    //     SLSIZE = 00001 (samp list size = 2)
            ADL0PTR = 0;
    7412:	20 25 ef    	clr.w     0x520
            ADL0CONLbits.SAMP = 1;
    7414:	1d c5 a8    	bset.b    0x51d, #0x6
            trigger_sweep = trigger_sweep_at_4MSps;
    7416:	e0 63 21    	mov.w     #0x163e, w0
    7418:	a0 42 88    	mov.w     w0, 0x854
    741a:	31 00 37    	bra       0x747e <.L7>

0000741c <.L16>:
        } else {
            ADCON3bits.SLEN0 = 0;
    741c:	05 05 a9    	bclr.b    0x505, #0x0
            ADL0CONLbits.SLEN = 0;
    741e:	1d e5 a9    	bclr.b    0x51d, #0x7
            while (ADL0STATbits.LBUSY == 1) {}
    7420:	00 00 00    	nop       

00007422 <.L19>:
    7422:	11 29 80    	mov.w     0x522, w1
    7424:	00 00 24    	mov.w     #0x4000, w0
    7426:	00 80 60    	and.w     w1, w0, w0
    7428:	00 00 e0    	cp0.w     w0
    742a:	fb ff 3a    	bra       NZ, 0x7422 <.L19>
            ADL0CONL = 0x0581;      //     SLENCLR = 0 (SLEN cleared by software), 
    742c:	10 58 20    	mov.w     #0x581, w0
    742e:	e0 28 88    	mov.w     w0, 0x51c
                                    //     SLTSRC = 00101 (trigger on Timer2), 
                                    //     THSRC = 1 (thresh comp from samp list thresh reg),
                                    //     SLSIZE = 00001 (samp list size = 2)
            ADL0PTR = 0;
    7430:	20 25 ef    	clr.w     0x520
            ADL0CONLbits.SAMP = 1;
    7432:	1d c5 a8    	bset.b    0x51d, #0x6
            ADCON3bits.SLEN0 = 1;
    7434:	05 05 a8    	bset.b    0x505, #0x0
            ADL0CONLbits.SLEN = 1;
    7436:	1d e5 a8    	bset.b    0x51d, #0x7
            trigger_sweep = trigger_sweep_lt_4MSps;
    7438:	a0 33 27    	mov.w     #0x733a, w0
    743a:	a0 42 88    	mov.w     w0, 0x854
    743c:	20 00 37    	bra       0x747e <.L7>

0000743e <.L15>:
        }
    } else {
        DMASRC0 = (uint16_t)&ch1val;
    743e:	a0 85 20    	mov.w     #0x85a, w0
    7440:	60 1c 88    	mov.w     w0, 0x38c
        DMASRC1 = (uint16_t)&ch2val;
    7442:	c0 85 20    	mov.w     #0x85c, w0
    7444:	b0 1c 88    	mov.w     w0, 0x396
        T2ISRoffset = T2ISRoffset_vals[num_avg];
    7446:	f0 42 80    	mov.w     0x85e, w0
    7448:	80 00 40    	add.w     w0, w0, w1
    744a:	00 58 22    	mov.w     #0x2580, w0
    744c:	00 80 40    	add.w     w1, w0, w0
    744e:	10 00 78    	mov.w     [w0], w0
    7450:	10 43 88    	mov.w     w0, 0x862
        IFS0bits.T2IF = 0;
    7452:	84 e0 a9    	bclr.b    0x84, #0x7
        IEC0bits.T2IE = 1;
    7454:	94 e0 a8    	bset.b    0x94, #0x7
        ADCON3bits.SLEN0 = 0;
    7456:	05 05 a9    	bclr.b    0x505, #0x0
        ADL0CONLbits.SLEN = 0;
    7458:	1d e5 a9    	bclr.b    0x51d, #0x7
        while (ADL0STATbits.LBUSY == 1) {}
    745a:	00 00 00    	nop       

0000745c <.L21>:
    745c:	11 29 80    	mov.w     0x522, w1
    745e:	00 00 24    	mov.w     #0x4000, w0
    7460:	00 80 60    	and.w     w1, w0, w0
    7462:	00 00 e0    	cp0.w     w0
    7464:	fb ff 3a    	bra       NZ, 0x745c <.L21>
        ADL0CONL = ADL0CONL_vals[num_avg];
    7466:	f0 42 80    	mov.w     0x85e, w0
    7468:	80 00 40    	add.w     w0, w0, w1
    746a:	a0 58 22    	mov.w     #0x258a, w0
    746c:	00 80 40    	add.w     w1, w0, w0
    746e:	10 00 78    	mov.w     [w0], w0
    7470:	e0 28 88    	mov.w     w0, 0x51c
        ADL0PTR = 0;
    7472:	20 25 ef    	clr.w     0x520
        ADL0CONLbits.SAMP = 1;
    7474:	1d c5 a8    	bset.b    0x51d, #0x6
        ADCON3bits.SLEN0 = 1;
    7476:	05 05 a8    	bset.b    0x505, #0x0
        ADL0CONLbits.SLEN = 1;
    7478:	1d e5 a8    	bset.b    0x51d, #0x7
        trigger_sweep = trigger_sweep_lt_4MSps;
    747a:	a0 33 27    	mov.w     #0x733a, w0
    747c:	a0 42 88    	mov.w     w0, 0x854

0000747e <.L7>:
    }
}
    747e:	00 80 fa    	ulnk      
    7480:	00 00 06    	return    

00007482 <_clear_scope_buffer>:

void clear_scope_buffer(void) {
    7482:	02 00 fa    	lnk       #0x2
    uint16_t i;

    for (i = 0; i < SCOPE_BUFFER_SIZE; i++)
    7484:	00 00 eb    	clr.w     w0
    7486:	00 0f 78    	mov.w     w0, [w14]
    7488:	07 00 37    	bra       0x7498 <.L24>

0000748a <.L25>:
        scope_buffer[i] = 0;
    748a:	1e 00 78    	mov.w     [w14], w0
    748c:	80 00 40    	add.w     w0, w0, w1
    748e:	80 88 20    	mov.w     #0x888, w0
    7490:	00 80 40    	add.w     w1, w0, w0
    7492:	80 00 eb    	clr.w     w1
    7494:	01 08 78    	mov.w     w1, [w0]
    7496:	1e 0f e8    	inc.w     [w14], [w14]

00007498 <.L24>:
    7498:	70 bb 20    	mov.w     #0xbb7, w0
    749a:	9e 00 78    	mov.w     [w14], w1
    749c:	80 8f 50    	sub.w     w1, w0, [w15]
    749e:	f5 ff 36    	bra       LEU, 0x748a <.L25>
}
    74a0:	00 80 fa    	ulnk      
    74a2:	00 00 06    	return    

000074a4 <_set_period>:

void set_period(uint16_t value1, uint16_t value2) {
    74a4:	04 00 fa    	lnk       #0x4
    74a6:	00 0f 78    	mov.w     w0, [w14]
    74a8:	11 07 98    	mov.w     w1, [w14+2]
    T2CONbits.TON = 0;
    74aa:	11 e1 a9    	bclr.b    0x111, #0x7
    PR2 = value1;
    74ac:	9e 00 78    	mov.w     [w14], w1
    74ae:	61 08 88    	mov.w     w1, 0x10c
    T2CON = value2;
    74b0:	9e 00 90    	mov.w     [w14+2], w1
    74b2:	81 08 88    	mov.w     w1, 0x110
    TMR2 = 0;
    74b4:	06 21 ef    	clr.w     0x106
    update_acquire_mode();
    74b6:	6d ff 07    	rcall     0x7392 <_update_acquire_mode> <.LFB4> <.LFE3>
}
    74b8:	00 80 fa    	ulnk      
    74ba:	00 00 06    	return    

000074bc <_set_sweep_in_progress>:

void set_sweep_in_progress(uint16_t value) {
    74bc:	02 00 fa    	lnk       #0x2
    74be:	00 0f 78    	mov.w     w0, [w14]
    sweep_in_progress = value;
    74c0:	9e 00 78    	mov.w     [w14], w1
    74c2:	b1 42 88    	mov.w     w1, 0x856
}
    74c4:	00 80 fa    	ulnk      
    74c6:	00 00 06    	return    

000074c8 <_get_sweep_in_progress>:

uint16_t get_sweep_in_progress(void) {
    74c8:	00 00 fa    	lnk       #0x0
    return sweep_in_progress;
    74ca:	b0 42 80    	mov.w     0x856, w0
}
    74cc:	00 80 fa    	ulnk      
    74ce:	00 00 06    	return    

000074d0 <_set_samples_left>:

void set_samples_left(uint16_t value) {
    74d0:	02 00 fa    	lnk       #0x2
    74d2:	00 0f 78    	mov.w     w0, [w14]
    samples_left = value;
    74d4:	9e 00 78    	mov.w     [w14], w1
    74d6:	c1 42 88    	mov.w     w1, 0x858
}
    74d8:	00 80 fa    	ulnk      
    74da:	00 00 06    	return    

000074dc <_get_samples_left>:

uint16_t get_samples_left(void) {
    74dc:	00 00 fa    	lnk       #0x0
    return samples_left;
    74de:	c0 42 80    	mov.w     0x858, w0
}
    74e0:	00 80 fa    	ulnk      
    74e2:	00 00 06    	return    

000074e4 <_set_max_avg>:

void set_max_avg(uint16_t value) {
    74e4:	02 00 fa    	lnk       #0x2
    74e6:	00 0f 78    	mov.w     w0, [w14]
    max_avg = value;
    74e8:	9e 00 78    	mov.w     [w14], w1
    74ea:	01 43 88    	mov.w     w1, 0x860
    update_acquire_mode();
    74ec:	52 ff 07    	rcall     0x7392 <_update_acquire_mode> <.LFB4> <.LFE3>
}
    74ee:	00 80 fa    	ulnk      
    74f0:	00 00 06    	return    

000074f2 <_get_max_avg>:

uint16_t get_max_avg(void) {
    74f2:	00 00 fa    	lnk       #0x0
    return max_avg;
    74f4:	00 43 80    	mov.w     0x860, w0
}
    74f6:	00 80 fa    	ulnk      
    74f8:	00 00 06    	return    

000074fa <_set_num_avg>:

void set_num_avg(uint16_t value) {
    74fa:	02 00 fa    	lnk       #0x2
    74fc:	00 0f 78    	mov.w     w0, [w14]
    num_avg = value;
    74fe:	9e 00 78    	mov.w     [w14], w1
    7500:	f1 42 88    	mov.w     w1, 0x85e
}
    7502:	00 80 fa    	ulnk      
    7504:	00 00 06    	return    

00007506 <_get_num_avg>:

uint16_t get_num_avg(void) {
    7506:	00 00 fa    	lnk       #0x0
    return num_avg;
    7508:	f0 42 80    	mov.w     0x85e, w0
}
    750a:	00 80 fa    	ulnk      
    750c:	00 00 06    	return    
Disassembly of section .isr.text:

0000750e <__T2Interrupt>:
uint16_t T2ISRoffset_vals[5] = { 0x0000, 0x0000, 0x000E, 0x0024, 0x004A };
uint16_t ADL0CONL_vals[5] = { 0x0581, 0x0083, 0x0087, 0x008F, 0x009F };
uint16_t avg_Tcy_thresholds[5] = { 0, 42, 50, 66, 98 };

void __attribute__((interrupt, no_auto_psv)) _T2Interrupt(void) {
    750e:	00 00 fa    	lnk       #0x0
    disable_interrupts();
    7510:	ff 3f fc    	disi      #0x3fff
    ADL0CONLbits.SAMP = 0;
    7512:	1d c5 a9    	bclr.b    0x51d, #0x6
    IFS0bits.T2IF = 0;
    7514:	84 e0 a9    	bclr.b    0x84, #0x7
    __asm__("push.s");
    7516:	00 a0 fe    	push.s    
	...
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("nop");
    __asm__("mov _T2ISRoffset, W0");
    7528:	10 43 80    	mov.w     0x862, w0
    __asm__("bra W0");
    752a:	00 60 01    	bra       w0

0000752c <T2ISR_AVG2>:

    __asm__("T2ISR_AVG2: mov #_ADRES0, W0");
    752c:	00 34 20    	mov.w     #0x340, w0
    __asm__("mov [W0++], W1");
    752e:	b0 00 78    	mov.w     [w0++], w1
    __asm__("nop");
    7530:	00 00 00    	nop       
    __asm__("mov [W0++], W2");
    7532:	30 01 78    	mov.w     [w0++], w2
    __asm__("nop");
    7534:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    7536:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("mov W1, _ch1val");
    7538:	d1 42 88    	mov.w     w1, 0x85a
    __asm__("add W2, [W0], W2");
    753a:	10 01 41    	add.w     w2, [w0], w2
    __asm__("mov W2, _ch2val");
    753c:	e2 42 88    	mov.w     w2, 0x85c
    ADL0CONLbits.SAMP = 1;
    753e:	1d c5 a8    	bset.b    0x51d, #0x6
    __asm__("pop.s");
    7540:	00 80 fe    	pop.s     
    enable_interrupts();
    7542:	52 20 ef    	clr.w     0x52
    __asm__("ulnk");
    7544:	00 80 fa    	ulnk      
    __asm__("retfie");
    7546:	00 40 06    	retfie    

00007548 <T2ISR_AVG4>:

    __asm__("T2ISR_AVG4: mov #_ADRES0, W0");
    7548:	00 34 20    	mov.w     #0x340, w0
    __asm__("mov [W0++], W1");
    754a:	b0 00 78    	mov.w     [w0++], w1
    __asm__("nop");
    754c:	00 00 00    	nop       
    __asm__("mov [W0++], W2");
    754e:	30 01 78    	mov.w     [w0++], w2
    __asm__("nop");
    7550:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    7552:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    7554:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    7556:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7558:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    755a:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    755c:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    755e:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7560:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    7562:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("mov W1, _ch1val");
    7564:	d1 42 88    	mov.w     w1, 0x85a
    __asm__("add W2, [W0], W2");
    7566:	10 01 41    	add.w     w2, [w0], w2
    __asm__("mov W2, _ch2val");
    7568:	e2 42 88    	mov.w     w2, 0x85c
    ADL0CONLbits.SAMP = 1;
    756a:	1d c5 a8    	bset.b    0x51d, #0x6
    __asm__("pop.s");
    756c:	00 80 fe    	pop.s     
    enable_interrupts();
    756e:	52 20 ef    	clr.w     0x52
    __asm__("ulnk");
    7570:	00 80 fa    	ulnk      
    __asm__("retfie");
    7572:	00 40 06    	retfie    

00007574 <T2ISR_AVG8>:

    __asm__("T2ISR_AVG8: mov #_ADRES0, W0");
    7574:	00 34 20    	mov.w     #0x340, w0
    __asm__("mov [W0++], W1");
    7576:	b0 00 78    	mov.w     [w0++], w1
    __asm__("nop");
    7578:	00 00 00    	nop       
    __asm__("mov [W0++], W2");
    757a:	30 01 78    	mov.w     [w0++], w2
    __asm__("nop");
    757c:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    757e:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    7580:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    7582:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7584:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    7586:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    7588:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    758a:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    758c:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    758e:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    7590:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    7592:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7594:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    7596:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    7598:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    759a:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    759c:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    759e:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    75a0:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    75a2:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    75a4:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    75a6:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    75a8:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    75aa:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    75ac:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    75ae:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("mov W1, _ch1val");
    75b0:	d1 42 88    	mov.w     w1, 0x85a
    __asm__("add W2, [W0], W2");
    75b2:	10 01 41    	add.w     w2, [w0], w2
    __asm__("mov W2, _ch2val");
    75b4:	e2 42 88    	mov.w     w2, 0x85c
    ADL0CONLbits.SAMP = 1;
    75b6:	1d c5 a8    	bset.b    0x51d, #0x6
    __asm__("pop.s");
    75b8:	00 80 fe    	pop.s     
    enable_interrupts();
    75ba:	52 20 ef    	clr.w     0x52
    __asm__("ulnk");
    75bc:	00 80 fa    	ulnk      
    __asm__("retfie");
    75be:	00 40 06    	retfie    

000075c0 <T2ISR_AVG16>:

    __asm__("T2ISR_AVG16: mov #_ADRES0, W0");
    75c0:	00 34 20    	mov.w     #0x340, w0
    __asm__("mov [W0++], W1");
    75c2:	b0 00 78    	mov.w     [w0++], w1
    __asm__("nop");
    75c4:	00 00 00    	nop       
    __asm__("mov [W0++], W2");
    75c6:	30 01 78    	mov.w     [w0++], w2
    __asm__("nop");
    75c8:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    75ca:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    75cc:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    75ce:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    75d0:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    75d2:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    75d4:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    75d6:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    75d8:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    75da:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    75dc:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    75de:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    75e0:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    75e2:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    75e4:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    75e6:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    75e8:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    75ea:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    75ec:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    75ee:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    75f0:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    75f2:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    75f4:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    75f6:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    75f8:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    75fa:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    75fc:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    75fe:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7600:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    7602:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    7604:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    7606:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7608:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    760a:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    760c:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    760e:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7610:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    7612:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    7614:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    7616:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7618:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    761a:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    761c:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    761e:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7620:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    7622:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    7624:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    7626:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7628:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    762a:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    762c:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    762e:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7630:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    7632:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("nop");
    7634:	00 00 00    	nop       
    __asm__("add W2, [W0++], W2");
    7636:	30 01 41    	add.w     w2, [w0++], w2
    __asm__("nop");
    7638:	00 00 00    	nop       
    __asm__("add W1, [W0++], W1");
    763a:	b0 80 40    	add.w     w1, [w0++], w1
    __asm__("mov W1, _ch1val");
    763c:	d1 42 88    	mov.w     w1, 0x85a
    __asm__("add W2, [W0], W2");
    763e:	10 01 41    	add.w     w2, [w0], w2
    __asm__("mov W2, _ch2val");
    7640:	e2 42 88    	mov.w     w2, 0x85c
    ADL0CONLbits.SAMP = 1;
    7642:	1d c5 a8    	bset.b    0x51d, #0x6
    __asm__("pop.s");
    7644:	00 80 fe    	pop.s     
    enable_interrupts();
    7646:	52 20 ef    	clr.w     0x52
    __asm__("ulnk");
    7648:	00 80 fa    	ulnk      
    __asm__("retfie");
    764a:	00 40 06    	retfie    
}
    764c:	00 80 fa    	ulnk      
    764e:	00 40 06    	retfie    

00007650 <__DMA1Interrupt>:

void __attribute__((interrupt, no_auto_psv)) _DMA1Interrupt(void) {
    7650:	00 00 fa    	lnk       #0x0
    sweep_in_progress = FALSE;
    7652:	56 28 ef    	clr.w     0x856
    T2CONbits.TON = 0;
    7654:	11 e1 a9    	bclr.b    0x111, #0x7
    IFS0bits.DMA1IF = 0;
    7656:	85 c0 a9    	bclr.b    0x85, #0x6
}
    7658:	00 80 fa    	ulnk      
    765a:	00 40 06    	retfie    
Disassembly of section .dinit:

0000765c <.dinit>:
    765c:	20 08 00    	nop       
    765e:	1a 00 00    	nop       
    7660:	80 00 00    	nop       
    7662:	80 25 00    	nop       
    7664:	1e 00 00    	nop       
    7666:	82 00 00    	nop       
    7668:	00 00 00    	nop       
    766a:	00 0e 00    	nop       
    766c:	24 00 4a    	addc.w    w4, [w4--], w0
    766e:	00 81 05    	.pword 0x058100
    7670:	83 00 87    	mov.w     0xe010, w3
    7672:	00 8f 00    	nop       
    7674:	9f 00 00    	nop       
    7676:	00 2a 00    	nop       
    7678:	32 00 42    	add.w     w4, [w2++], w0
    767a:	00 62 00    	nop       
    767c:	88 08 00    	nop       
    767e:	70 17 00    	nop       
    7680:	80 00 00    	nop       
    7682:	54 08 00    	nop       
    7684:	10 00 00    	nop       
    7686:	80 00 00    	nop       
    7688:	84 08 00    	nop       
    768a:	04 00 00    	nop       
    768c:	80 00 00    	nop       
    768e:	7c 08 00    	nop       
    7690:	08 00 00    	nop       
    7692:	80 00 00    	nop       
    7694:	00 08 00    	nop       
    7696:	20 00 00    	nop       
    7698:	82 00 00    	nop       
    769a:	7f 3e 7f    	.pword 0x7f3e7f
    769c:	3e 7f 3e    	bra       GTU, 0x1751a
    769e:	7f 3e 3f    	bra       0xf39e
    76a0:	1f 3f 1f    	.pword 0x1f3f1f
    76a2:	3f 1f 3f    	bra       0xb522
    76a4:	1f bf 5d    	.pword 0x5dbf1f
    76a6:	bf 5d bf    	.pword 0xbf5dbf
    76a8:	5d bf 5d    	.pword 0x5dbf5d
    76aa:	01 00 01    	call      w1
    76ac:	00 01 00    	nop       
    76ae:	01 00 00    	nop       
    76b0:	96 22 00    	nop       
    76b2:	10 01 00    	nop       
    76b4:	82 00 00    	nop       
    76b6:	a6 93 e0    	.pword 0xe093a6
    76b8:	48 a9 93    	mov.w     [w8+984], w2
    76ba:	38 4b ad    	.pword 0xad4b38
    76bc:	93 b2 4e    	.pword 0x4eb293
    76be:	b3 93 66    	and.w     w13, [w3++], [w7--]
    76c0:	52 bb 93    	mov.w     [w2+1018], w6
    76c2:	9c 56 c1    	msc       w4 * w6, A, [w9]+=4, w5, [w10]-=2, w5, w13
    76c4:	93 32 49    	.pword 0x493293
    76c6:	c6 93 ba    	tblrdh.w  [--w6], [w7--]
    76c8:	49 cc 93    	mov.b     [w9+460], w8
    76ca:	d4 49 d1    	lsr.b     [++w4], [w3]
    76cc:	93 5c 4a    	addc.b    w4, [w3], [w9++]
    76ce:	d7 93 76    	ior.w     w13, [++w7], [w7--]
    76d0:	4a dc 93    	mov.b     [w10+476], w8
    76d2:	00 4b e2    	cp0.b     0xb00
    76d4:	93 1c 4b    	addc.w    w6, [w3], [w9++]
    76d6:	e7 93 8a    	mov.w     w7, 0x527c
    76d8:	4b eb 93    	mov.b     [w11+492], w6
    76da:	a6 4b f1    	.pword 0xf14ba6
    76dc:	93 c2 4b    	addc.b    w7, [w3], w5
    76de:	f8 93 de    	.pword 0xde93f8
    76e0:	4b fe 93    	mov.b     [w11+508], w12
    76e2:	1e 4c 03    	.pword 0x034c1e
    76e4:	94 46 4c    	addc.b    w8, [w4], w13
    76e6:	06 94 86    	mov.w     0xd280, w6
    76e8:	4c 0a 94    	mov.w     [w12-1000], w4
    76ea:	ae 4c 0f    	bra       SB, 0x11048
    76ec:	94 ee 4c    	addc.b    w9, [w4], [++w13]
    76ee:	15 94 16    	subr.w    w13, [w5], [w8--]
    76f0:	4d 1c 94    	mov.w     [w13-968], w8
    76f2:	56 4d 24    	mov.w     #0x44d5, w6
    76f4:	94 7e 4d    	.pword 0x4d7e94
    76f6:	29 94 be    	.pword 0xbe9429
    76f8:	4d 2f 94    	mov.w     [w13-936], w14
    76fa:	e6 4d 35    	bra       LT, 0x112c8
    76fc:	94 26 4e    	addc.w    w12, [w4], [--w13]
    76fe:	3c 94 4e    	addc.w    w13, [w12++], [w8--]
    7700:	4e 45 94    	mov.b     [w14-508], w10
    7702:	8e 4e 4f    	addc.b    w14, w14, [w13]
    7704:	94 04 4f    	addc.w    w14, [w4], w9
    7706:	57 94 48    	addc.w    w1, [++w7], [w8--]
    7708:	4f 60 94    	mov.b     [w15-476], w0
    770a:	62 4f 68    	xor.b     w0, #0x2, [w14]
    770c:	94 a4 4f    	addc.w    w15, [w4], [--w9]
    770e:	71 94 be    	.pword 0xbe9471
    7710:	4f 7a 94    	mov.b     [w15-452], w4
    7712:	fe 4f 84    	mov.w     0x89fe, w14
    7714:	94 22 50    	sub.w     w0, [w4], [--w5]
    7716:	8b 94 56    	sub.w     w13, w11, [w9--]
    7718:	50 93 94    	mov.w     [w0-854], w6
    771a:	6c 50 9b    	mov.b     w12, [w0+406]
    771c:	94 82 50    	sub.w     w1, [w4], w5
    771e:	a2 94 a6    	.pword 0xa694a2
    7720:	50 aa 94    	mov.w     [w0-806], w4
    7722:	b6 50 b2    	and.b     #0xb, w6
    7724:	94 1c 51    	sub.w     w2, [w4], [w9++]
    7726:	bd 94 b8    	.pword 0xb894bd
    7728:	52 c2 94    	mov.b     [w2-443], w4
    772a:	fc 52 c8    	sftac     A, #0x3c
    772c:	94 16 53    	sub.w     w6, [w4], [w13--]
    772e:	ce 94 84    	mov.w     0x9298, w14
    7730:	53 d5 94    	mov.b     [w3-427], w10
    7732:	9a 53 da    	break     
    7734:	94 da 53    	sub.b     w7, [w4], [w5++]
    7736:	e0 94 fe    	.pword 0xfe94e0
    7738:	53 e6 94    	mov.b     [w3-411], w12
    773a:	2c 54 ed    	dec.b     0x142c, WREG
    773c:	94 42 54    	sub.b     w8, [w4], w5
    773e:	f7 94 70    	ior.w     w1, #0x17, [w9--]
    7740:	54 02 95    	mov.w     [w4-758], w4
    7742:	86 54 09    	.pword 0x095486
    7744:	95 ee 54    	sub.b     w9, [w5], [++w13]
    7746:	11 95 04    	goto      0x17559511 <__CONFIG1+0x17543d13>
    7748:	55 17 95 
    774a:	32 55 1e    	subbr.b   w12, [w2++], [w10--]
    774c:	95 48 55    	sub.b     w10, [w5], [w1]
    774e:	25 95 76    	ior.w     w13, [w5--], [w10--]
    7750:	55 71 94    	mov.b     [w5-459], w2
    7752:	8c 55 7a    	mov.b     w12, [w11--]
    7754:	94 cc 55    	sub.b     w11, [w4], [w9]
    7756:	0a 94 f0    	.pword 0xf0940a
    7758:	55 0f 94    	mov.w     [w5-998], w14
    775a:	46 56 2d    	mov.w     #0xd564, w6
    775c:	95 5e 56    	sub.b     w12, [w5], [w13++]
    775e:	33 95 68    	xor.w     w1, [w3++], [w10--]
    7760:	56 9b 94    	mov.w     [w6-838], w6
    7762:	72 56 38    	bra       NOV, 0x12448
    7764:	95 ee 56    	sub.b     w13, [w5], [++w13]
    7766:	fe 93 58    	subb.w    w1, #0x1e, [w7--]
    7768:	57 f8 93    	mov.b     [w7+509], w0
    776a:	34 58 00    	nop       
    776c:	80 24 00    	nop       
    776e:	80 00 00    	nop       
    7770:	80 00 00    	nop       
    7772:	64 08 00    	nop       
    7774:	0e 00 00    	nop       
    7776:	80 00 00    	nop       
    7778:	f8 1f 00    	nop       
    777a:	9e 02 00    	nop       
    777c:	80 00 00    	nop       
    777e:	72 08 00    	nop       
    7780:	0a 00 00    	nop       
    7782:	80 00 00    	nop       
    7784:	a6 23 00    	nop       
    7786:	4e 00 00    	nop       
    7788:	80 00 00    	nop       
    778a:	00 24 00    	nop       
    778c:	80 00 00    	nop       
    778e:	80 00 00    	nop       
    7790:	00 25 00    	nop       
    7792:	40 00 00    	nop       
    7794:	80 00 00    	nop       
    7796:	40 25 00    	nop       
    7798:	40 00 00    	nop       
    779a:	80 00 00    	nop       
    779c:	3a 08 00    	nop       
    779e:	1a 00 00    	nop       
    77a0:	80 00 00    	nop       
    77a2:	00 00 00    	nop       
Disassembly of section .text:

000077a4 <_init_oscope>:
#include "oscope.h"
#include "scope.h"
#include "wavegen.h"

void init_oscope(void) {
    77a4:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;
    uint16_t *ADTBL;
    uint16_t i;

    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2), 
    77a6:	00 10 20    	mov.w     #0x100, w0
    77a8:	30 3a 88    	mov.w     w0, 0x746
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

    OSCTUN = 0x9000;        // enable FRC self tuning with USB host clock
    77aa:	00 00 29    	mov.w     #0x9000, w0
    77ac:	40 3a 88    	mov.w     w0, 0x748

    // Configure digital pins to be outputs
    D0_DIR = OUT; D0 = 0;
    77ae:	e8 82 a9    	bclr.b    0x2e8, #0x4
    77b0:	ea 82 a9    	bclr.b    0x2ea, #0x4
    D1_DIR = OUT; D1 = 0;
    77b2:	e8 a2 a9    	bclr.b    0x2e8, #0x5
    77b4:	ea a2 a9    	bclr.b    0x2ea, #0x5
    D2_DIR = OUT; D2 = 0;
    77b6:	d9 22 a9    	bclr.b    0x2d9, #0x1
    77b8:	db 22 a9    	bclr.b    0x2db, #0x1
    D3_DIR = OUT; D3 = 0;
    77ba:	d9 42 a9    	bclr.b    0x2d9, #0x2
    77bc:	db 42 a9    	bclr.b    0x2db, #0x2

    // Make all pins digital I/Os
    ANSB = 0;
    77be:	e2 24 ef    	clr.w     0x4e2
    ANSC = 0;
    77c0:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    77c2:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    77c4:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    77c6:	ec 24 ef    	clr.w     0x4ec

    ANSBbits.ANSB0 = 1;         // configure RB0 (AN0) for analog function
    77c8:	e2 04 a8    	bset.b    0x4e2, #0x0
    TRISBbits.TRISB0 = 1;       // tristate RB0's output driver
    77ca:	c8 02 a8    	bset.b    0x2c8, #0x0

    ANSBbits.ANSB1 = 1;         // configure RB1 (AN1) for analog function
    77cc:	e2 24 a8    	bset.b    0x4e2, #0x1
    TRISBbits.TRISB1 = 1;       // tristate RB0's output driver
    77ce:	c8 22 a8    	bset.b    0x2c8, #0x1

    ANSBbits.ANSB2 = 1;         // configure RB2 (AN2) for analog function
    77d0:	e2 44 a8    	bset.b    0x4e2, #0x2
    TRISBbits.TRISB2 = 1;       // tristate RB2's output driver
    77d2:	c8 42 a8    	bset.b    0x2c8, #0x2

    ANSBbits.ANSB3 = 1;         // configure RB3 (AN3) for analog function
    77d4:	e2 64 a8    	bset.b    0x4e2, #0x3
    TRISBbits.TRISB3 = 1;       // tristate RB3's output driver
    77d6:	c8 62 a8    	bset.b    0x2c8, #0x3

    ANSGbits.ANSG9 = 1;         // configure RG9 (DAC1) for analog function
    77d8:	ed 24 a8    	bset.b    0x4ed, #0x1
    TRISGbits.TRISG9 = 1;       // tristate RG9's output driver
    77da:	f1 22 a8    	bset.b    0x2f1, #0x1
    DAC1CON = 0x8081;           // enable DAC1, no trigger, and reference is DREF+
    77dc:	10 08 28    	mov.w     #0x8081, w0
    77de:	00 22 88    	mov.w     w0, 0x440

    ANSBbits.ANSB13 = 1;        // configure RB13 (DAC2) for analog function
    77e0:	e3 a4 a8    	bset.b    0x4e3, #0x5
    TRISBbits.TRISB13 = 1;      // tristate RB13's output driver
    77e2:	c9 a2 a8    	bset.b    0x2c9, #0x5
    DAC2CON = 0x8081;           // enable DAC2, no trigger, and reference is DREF+
    77e4:	10 08 28    	mov.w     #0x8081, w0
    77e6:	20 22 88    	mov.w     w0, 0x444

    // Configure LED pins as outputs, set to low (off)
    LED1_DIR = OUT; LED1 = OFF;
    77e8:	e0 62 a9    	bclr.b    0x2e0, #0x3
    77ea:	e4 62 a9    	bclr.b    0x2e4, #0x3
    LED2_DIR = OUT; LED2 = OFF;
    77ec:	e0 82 a9    	bclr.b    0x2e0, #0x4
    77ee:	e4 82 a9    	bclr.b    0x2e4, #0x4
    LED3_DIR = OUT; LED3 = OFF;
    77f0:	e0 a2 a9    	bclr.b    0x2e0, #0x5
    77f2:	e4 a2 a9    	bclr.b    0x2e4, #0x5

    // Configure SW pins as inputs
    SW1_DIR = IN;
    77f4:	d1 e2 a8    	bset.b    0x2d1, #0x7

    // Configure channel gain pins
    CH1_GAIN_DIR = OUT; CH1_GAIN = 0;
    77f6:	e0 22 a9    	bclr.b    0x2e0, #0x1
    77f8:	e4 22 a9    	bclr.b    0x2e4, #0x1
    CH2_GAIN_DIR = OUT; CH2_GAIN = 0;
    77fa:	e0 02 a9    	bclr.b    0x2e0, #0x0
    77fc:	e4 02 a9    	bclr.b    0x2e4, #0x0

    set_sweep_in_progress(FALSE);
    77fe:	00 00 eb    	clr.w     w0
    7800:	5d fe 07    	rcall     0x74bc <_set_sweep_in_progress> <.LFB7> <.LFE6>
    set_samples_left(SCOPE_BUFFER_SIZE / 2);
    7802:	c0 5d 20    	mov.w     #0x5dc, w0
    7804:	65 fe 07    	rcall     0x74d0 <_set_samples_left> <.LFB9> <.LFE8>
    clear_scope_buffer();
    7806:	3d fe 07    	rcall     0x7482 <_clear_scope_buffer> <.LFB5> <.LFE4>

    // Configure DMA module
    DMACON = 0x8000;            // enable DMA peripheral with fixed priority scheme
    7808:	00 00 28    	mov.w     #0x8000, w0
    780a:	00 1c 88    	mov.w     w0, 0x380
    DMAL = 0x0000;
    780c:	84 23 ef    	clr.w     0x384
    DMAH = 0x2000;
    780e:	00 00 22    	mov.w     #0x2000, w0
    7810:	30 1c 88    	mov.w     w0, 0x386

    DMASRC0 = (uint16_t)&ADRES0;
    7812:	00 34 20    	mov.w     #0x340, w0
    7814:	60 1c 88    	mov.w     w0, 0x38c
    DMADST0 = (uint16_t)&scope_buffer[0];
    7816:	80 88 20    	mov.w     #0x888, w0
    7818:	70 1c 88    	mov.w     w0, 0x38e
    DMACNT0 = SCOPE_BUFFER_SIZE / 2;
    781a:	c0 5d 20    	mov.w     #0x5dc, w0
    781c:	80 1c 88    	mov.w     w0, 0x390
    DMAINT0 = 0x2F00;           // set DMA0 trigger to pipeline ADC:
    781e:	00 f0 22    	mov.w     #0x2f00, w0
    7820:	50 1c 88    	mov.w     w0, 0x38a
                                //   CHSEL = 0b101111 (pipeline ADC)
    DMACH0 = 0x0215;            // enable DMA CH0 with 
    7822:	50 21 20    	mov.w     #0x215, w0
    7824:	40 1c 88    	mov.w     w0, 0x388
                                //   RELOAD = 1, 
                                //   SAMODE = 0b00 (fixed), 
                                //   DAMODE = 0b01 (increment), 
                                //   TRMODE = 0b01 (repeated one-shot), and 
                                //   SIZE = 0 (word)

    DMASRC1 = (uint16_t)&ADRES1;
    7826:	20 34 20    	mov.w     #0x342, w0
    7828:	b0 1c 88    	mov.w     w0, 0x396
    DMADST1 = (uint16_t)&scope_buffer[SCOPE_BUFFER_SIZE / 2];
    782a:	00 44 21    	mov.w     #0x1440, w0
    782c:	c0 1c 88    	mov.w     w0, 0x398
    DMACNT1 = SCOPE_BUFFER_SIZE / 2;
    782e:	c0 5d 20    	mov.w     #0x5dc, w0
    7830:	d0 1c 88    	mov.w     w0, 0x39a
    DMAINT1 = 0x2F00;           // set DMA1 trigger to pipeline ADC:
    7832:	00 f0 22    	mov.w     #0x2f00, w0
    7834:	a0 1c 88    	mov.w     w0, 0x394
                                //   CHSEL = 0b101111 (pipeline ADC)
    DMACH1 = 0x0215;            // enable DMA CH1 with 
    7836:	50 21 20    	mov.w     #0x215, w0
    7838:	90 1c 88    	mov.w     w0, 0x392
                                //   RELOAD = 1, 
                                //   SAMODE = 0b00 (fixed), 
                                //   DAMODE = 0b01 (increment), 
                                //   TRMODE = 0b01 (repeated one-shot), and 
                                //   SIZE = 0 (word)

    IFS0bits.DMA1IF = 0;
    783a:	85 c0 a9    	bclr.b    0x85, #0x6
    IEC0bits.DMA1IE = 1;
    783c:	95 c0 a8    	bset.b    0x95, #0x6

    set_max_avg(4);
    783e:	40 00 20    	mov.w     #0x4, w0
    7840:	51 fe 07    	rcall     0x74e4 <_set_max_avg> <.LFB11> <.LFE10>
    set_num_avg(0);
    7842:	00 00 eb    	clr.w     w0
    7844:	5a fe 07    	rcall     0x74fa <_set_num_avg> <.LFB13> <.LFE12>

    // Configure pipelined ADC module
    ADCON1 = 0x0001;                // configure pipelined ADC module with
    7846:	10 00 20    	mov.w     #0x1, w0
    7848:	00 28 88    	mov.w     w0, 0x500
                                    //     FORM = 0000 (integer, raw data), 
                                    //     PUMPEN = 0 (charge pump disabled), 
                                    //     PWRLVL = 1 (full power, 1-10MHz clk)
    ADCON2 = 0x4700;                //     PVCFG = 01 (ADREF+ is ext VREF+),
    784a:	00 70 24    	mov.w     #0x4700, w0
    784c:	10 28 88    	mov.w     w0, 0x502
                                    //     NVCFG = 0 (ADREF- is AVSS),
                                    //     BUFORG = 1 (buffer is indexed),
                                    //     ADPWR = 11 (ADC is always powered),
                                    //     BUFINT = 00 (no buffer interrupt),
                                    //     REFPUMP = 0 (ref chg pump disabled)
    ADCON3 = 0x0001;                //     ADRC = 0 (ADC clock from sys clock), 
    784e:	10 00 20    	mov.w     #0x1, w0
    7850:	20 28 88    	mov.w     w0, 0x504
                                    //     ADCS = 00000001 (TAD = 2*TSYS, 8MHz)

    ADL0CONH = 0xA040;              // configure sample list 0 with
    7852:	00 04 2a    	mov.w     #0xa040, w0
    7854:	f0 28 88    	mov.w     w0, 0x51e
                                    //     ASEN = 1 (auto-scan enabled),
                                    //     SLINT = 01 (int after auto-scan done),
                                    //     WM = 00 (all conversion results saved),
                                    //     CM = 000 (threshold matching disabled), 
                                    //     CTMEN = 0 (CTMU not used as Isrc),
                                    //     PINTRIS = 1 (IO pin high-Z during samp),
                                    //     MULCHEN = 0 (only one channel selected),
                                    //     SAMC = 00000 (TSAMP = 0.5*TAD)

    ADL0CONL = 0x0581;              //     SLENCLR = 0 (SLEN cleared by software), 
    7856:	10 58 20    	mov.w     #0x581, w0
    7858:	e0 28 88    	mov.w     w0, 0x51c
                                    //     SLTSRC = 00101 (trigger on Timer2), 
                                    //     THSRC = 1 (thresh comp from samp list thresh reg),
                                    //     SLSIZE = 00001 (samp list size = 2)

    ADL0PTR = 0;                    // sample list starts from first entry
    785a:	20 25 ef    	clr.w     0x520

    ADTBL = (uint16_t *)&ADTBL0;
    785c:	00 30 20    	mov.w     #0x300, w0
    785e:	10 07 98    	mov.w     w0, [w14+2]
    for (i = 0; i < 32; i++) {      // create sample list to alternate between AN1 (A1) and AN2 (A2)
    7860:	00 00 eb    	clr.w     w0
    7862:	00 0f 78    	mov.w     w0, [w14]
    7864:	0e 00 37    	bra       0x7882 <.L2>

00007866 <.L3>:
        ADTBL[i++] = 1;
    7866:	1e 00 78    	mov.w     [w14], w0
    7868:	00 00 40    	add.w     w0, w0, w0
    786a:	9e 00 90    	mov.w     [w14+2], w1
    786c:	00 80 40    	add.w     w1, w0, w0
    786e:	11 00 20    	mov.w     #0x1, w1
    7870:	01 08 78    	mov.w     w1, [w0]
    7872:	1e 0f e8    	inc.w     [w14], [w14]
        ADTBL[i] = 2;
    7874:	1e 00 78    	mov.w     [w14], w0
    7876:	00 00 40    	add.w     w0, w0, w0
    7878:	9e 00 90    	mov.w     [w14+2], w1
    787a:	00 80 40    	add.w     w1, w0, w0
    787c:	21 00 20    	mov.w     #0x2, w1
    787e:	01 08 78    	mov.w     w1, [w0]
    7880:	1e 0f e8    	inc.w     [w14], [w14]

00007882 <.L2>:
    7882:	1e 00 78    	mov.w     [w14], w0
    7884:	ff 0f 50    	sub.w     w0, #0x1f, [w15]
    7886:	ef ff 36    	bra       LEU, 0x7866 <.L3>
    }

    ADCON1bits.ADON = 1;            // enable ADC module
    7888:	01 e5 a8    	bset.b    0x501, #0x7
    while (ADSTATHbits.ADREADY == 0) {}     // wait until ADC module is ready
    788a:	00 00 00    	nop       

0000788c <.L4>:
    788c:	50 28 80    	mov.w     0x50a, w0
    788e:	62 00 60    	and.w     w0, #0x2, w0
    7890:	00 00 e0    	cp0.w     w0
    7892:	fc ff 32    	bra       Z, 0x788c <.L4>

    ADCON1bits.ADCAL = 1;           // start ADC module calibration
    7894:	00 c5 a8    	bset.b    0x500, #0x6
    while (ADSTATHbits.ADREADY == 0) {}     // wait until ADC module is ready
    7896:	00 00 00    	nop       

00007898 <.L5>:
    7898:	50 28 80    	mov.w     0x50a, w0
    789a:	62 00 60    	and.w     w0, #0x2, w0
    789c:	00 00 e0    	cp0.w     w0
    789e:	fc ff 32    	bra       Z, 0x7898 <.L5>

    ADL0CONLbits.SAMP = 1;          // close sampling switch
    78a0:	1d c5 a8    	bset.b    0x51d, #0x6

    ADCON3bits.SLEN0 = 1;           // enable sample list 0 in ADCON3
    78a2:	05 05 a8    	bset.b    0x505, #0x0
    ADL0CONLbits.SLEN = 1;          // enable sample list 0
    78a4:	1d e5 a8    	bset.b    0x51d, #0x7

    set_period(15, 0);              // set Timer2 frequency to 1 MHz
    78a6:	80 00 eb    	clr.w     w1
    78a8:	f0 00 20    	mov.w     #0xf, w0
    78aa:	fc fd 07    	rcall     0x74a4 <_set_period> <.LFB6> <.LFE5>
//    set_period(159, 0);             // set Timer2 frequency to 100 kHz

    // Initialize the waveform generator
    init_wavegen();
    78ac:	38 fb 07    	rcall     0x6f1e <_init_wavegen> <.L0> <.LFB1> <.LFE11> <.Letext0> <.Ltext0>

    // Configure initial PWM frequencies to 1 kHz and duty cycles to 50%
    OC1RS = 15999;
    78ae:	f0 e7 23    	mov.w     #0x3e7f, w0
    78b0:	a0 0c 88    	mov.w     w0, 0x194
    OC1R = 7999;
    78b2:	f0 f3 21    	mov.w     #0x1f3f, w0
    78b4:	b0 0c 88    	mov.w     w0, 0x196
    OC1TMR = 0;
    78b6:	98 21 ef    	clr.w     0x198

    OC2RS = 15999;
    78b8:	f0 e7 23    	mov.w     #0x3e7f, w0
    78ba:	f0 0c 88    	mov.w     w0, 0x19e
    OC2R = 7999;
    78bc:	f0 f3 21    	mov.w     #0x1f3f, w0
    78be:	00 0d 88    	mov.w     w0, 0x1a0
    OC2TMR = 0;
    78c0:	a2 21 ef    	clr.w     0x1a2

    OC3RS = 15999;
    78c2:	f0 e7 23    	mov.w     #0x3e7f, w0
    78c4:	40 0d 88    	mov.w     w0, 0x1a8
    OC3R = 7999;
    78c6:	f0 f3 21    	mov.w     #0x1f3f, w0
    78c8:	50 0d 88    	mov.w     w0, 0x1aa
    OC3TMR = 0;
    78ca:	ac 21 ef    	clr.w     0x1ac

    OC4RS = 15999;
    78cc:	f0 e7 23    	mov.w     #0x3e7f, w0
    78ce:	90 0d 88    	mov.w     w0, 0x1b2
    OC4R = 7999;
    78d0:	f0 f3 21    	mov.w     #0x1f3f, w0
    78d2:	a0 0d 88    	mov.w     w0, 0x1b4
    OC4TMR = 0;
    78d4:	b6 21 ef    	clr.w     0x1b6

    // Configure Timer1 to have a period of 20 ms
    T1CON = 0x0010;
    78d6:	00 01 20    	mov.w     #0x10, w0
    78d8:	20 08 88    	mov.w     w0, 0x104
    PR1 = 0x9C3F;
    78da:	f0 c3 29    	mov.w     #0x9c3f, w0
    78dc:	10 08 88    	mov.w     w0, 0x102

    TMR1 = 0;
    78de:	00 21 ef    	clr.w     0x100
    T1CONbits.TON = 1;
    78e0:	05 e1 a8    	bset.b    0x105, #0x7
}
    78e2:	00 80 fa    	ulnk      
    78e4:	00 00 06    	return    

000078e6 <_set_config_callback>:
#include "parser.h"
#include "usb.h"
#include "cdc.h"

void set_config_callback(void) {
    78e6:	00 00 fa    	lnk       #0x0
    USB_setup_class_callback = cdc_setup_callback;
    78e8:	c0 b3 26    	mov.w     #0x6b3c, w0
    78ea:	80 42 88    	mov.w     w0, 0x850

    BD[EP1IN].bytecount = 0;
    78ec:	c0 40 22    	mov.w     #0x240c, w0
    78ee:	80 40 eb    	clr.b     w1
    78f0:	01 48 78    	mov.b     w1, [w0]
    BD[EP1IN].address = EP1_IN_buffer;
    78f2:	80 ff 21    	mov.w     #0x1ff8, w0
    78f4:	70 20 89    	mov.w     w0, 0x240e
    BD[EP1IN].status = UOWN | DTS | DTSEN;
    78f6:	d0 40 22    	mov.w     #0x240d, w0
    78f8:	81 cc b3    	mov.b     #0xc8, w1
    78fa:	01 48 78    	mov.b     w1, [w0]
    U1EP1 = ENDPT_IN_ONLY;
    78fc:	50 00 20    	mov.w     #0x5, w0
    78fe:	60 25 88    	mov.w     w0, 0x4ac

    BD[EP2OUT].bytecount = 64;
    7900:	00 41 22    	mov.w     #0x2410, w0
    7902:	01 c4 b3    	mov.b     #0x40, w1
    7904:	01 48 78    	mov.b     w1, [w0]
    BD[EP2OUT].address = EP2_OUT_buffer;
    7906:	20 00 22    	mov.w     #0x2002, w0
    7908:	90 20 89    	mov.w     w0, 0x2412
    BD[EP2OUT].status = UOWN | DTSEN;
    790a:	10 41 22    	mov.w     #0x2411, w0
    790c:	81 c8 b3    	mov.b     #0x88, w1
    790e:	01 48 78    	mov.b     w1, [w0]
    USB_out_callbacks[2] = cdc_rx_service;
    7910:	c0 cd 26    	mov.w     #0x6cdc, w0
    7912:	c0 1e 89    	mov.w     w0, 0x23d8

    BD[EP2IN].bytecount = 0;
    7914:	40 41 22    	mov.w     #0x2414, w0
    7916:	80 40 eb    	clr.b     w1
    7918:	01 48 78    	mov.b     w1, [w0]
    BD[EP2IN].address = EP2_IN_buffer;
    791a:	20 04 22    	mov.w     #0x2042, w0
    791c:	b0 20 89    	mov.w     w0, 0x2416
    BD[EP2IN].status = UOWN | DTS | DTSEN;
    791e:	50 41 22    	mov.w     #0x2415, w0
    7920:	81 cc b3    	mov.b     #0xc8, w1
    7922:	01 48 78    	mov.b     w1, [w0]
    U1EP2 = ENDPT_NON_CONTROL;
    7924:	d0 01 20    	mov.w     #0x1d, w0
    7926:	70 25 88    	mov.w     w0, 0x4ae
    USB_in_callbacks[2] = cdc_tx_service;
    7928:	60 c6 26    	mov.w     #0x6c66, w0
    792a:	c0 1d 89    	mov.w     w0, 0x23b8
}
    792c:	00 80 fa    	ulnk      
    792e:	00 00 06    	return    

00007930 <_main>:

int16_t main(void) {
    7930:	00 00 fa    	lnk       #0x0
    init_oscope();
    7932:	38 ff 07    	rcall     0x77a4 <_init_oscope> <.L0> <.LFB0> <.Ltext0>
    init_parser();
    7934:	2c f0 07    	rcall     0x598e <_init_parser> <.LFB79> <.LFE78>

    init_cdc();
    7936:	72 f9 07    	rcall     0x6c1c <_init_cdc> <.LFB2> <.LFE1>
    USB_set_config_callback = set_config_callback;
    7938:	60 8e 27    	mov.w     #0x78e6, w0
    793a:	60 42 88    	mov.w     w0, 0x84c
    init_usb();
    793c:	c7 f0 07    	rcall     0x5acc <_init_usb> <.LFB2> <.LFE1>

    while (USB_USWSTAT != CONFIG_STATE) {
    793e:	01 00 37    	bra       0x7942 <.L3>

00007940 <.L4>:
#ifndef USB_INTERRUPT
        usb_service();
    7940:	fc f0 07    	rcall     0x5b3a <_usb_service> <.LFB3> <.LFE2>

00007942 <.L3>:
    7942:	4a c8 bf    	mov.b     0x84a, WREG
    7944:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    7946:	fc ff 3a    	bra       NZ, 0x7940 <.L4>

00007948 <.L5>:
#endif
    }
    while (1) {
        parser_state();
    7948:	20 43 80    	mov.w     0x864, w0
    794a:	00 00 01    	call      w0
#ifndef USB_INTERRUPT
        usb_service();
    794c:	f6 f0 07    	rcall     0x5b3a <_usb_service> <.LFB3> <.LFE2>
#endif
    }
    794e:	fc ff 37    	bra       0x7948 <.L5>
Disassembly of section .isr.text:

00007950 <__T3Interrupt>:

uint16_t wavegen_offset_mode, wavegen_offset_samples;
WORD32 wavegen_offset_address;

void __attribute__((interrupt, no_auto_psv)) _T3Interrupt(void) {
    7950:	36 00 f8    	push      0x36
    7952:	80 9f be    	mov.d     w0, [w15++]
    7954:	82 9f be    	mov.d     w2, [w15++]
    7956:	84 9f be    	mov.d     w4, [w15++]
    7958:	86 9f be    	mov.d     w6, [w15++]
    795a:	00 00 fa    	lnk       #0x0
    IFS0bits.T3IF = 0;
    795c:	85 00 a9    	bclr.b    0x85, #0x0

    __asm__("push _TBLPAG");
    795e:	54 00 f8    	push      0x54
    TBLPAG = wavegen_offset_address.w[1];
    7960:	c0 41 80    	mov.w     0x838, w0
    7962:	a0 02 88    	mov.w     w0, 0x54
    DAC1DAT = __builtin_tblrdl(wavegen_offset_address.w[0]);
    7964:	b0 41 80    	mov.w     0x836, w0
    7966:	10 00 ba    	tblrdl.w  [w0], w0
    7968:	10 22 88    	mov.w     w0, 0x442
    __asm__("pop _TBLPAG");
    796a:	54 00 f9    	pop       0x54

    wavegen_offset_address.ul += 2;
    796c:	b0 41 80    	mov.w     0x836, w0
    796e:	c1 41 80    	mov.w     0x838, w1
    7970:	62 00 40    	add.w     w0, #0x2, w0
    7972:	e0 80 48    	addc.w    w1, #0x0, w1
    7974:	b0 41 88    	mov.w     w0, 0x836
    7976:	c1 41 88    	mov.w     w1, 0x838
    wavegen_offset_samples--;
    7978:	a0 41 80    	mov.w     0x834, w0
    797a:	00 00 e9    	dec.w     w0, w0
    797c:	a0 41 88    	mov.w     w0, 0x834
    if (wavegen_offset_samples == 0) {
    797e:	a0 41 80    	mov.w     0x834, w0
    7980:	00 00 e0    	cp0.w     w0
    7982:	10 00 3a    	bra       NZ, 0x79a4 <.L1>
        if (wavegen_offset_mode) {
    7984:	90 41 80    	mov.w     0x832, w0
    7986:	00 00 e0    	cp0.w     w0
    7988:	0c 00 32    	bra       Z, 0x79a2 <.L3>
            wavegen_offset_address.ul = WAVEGEN_OFFSET_SAMPLE_MEM;
    798a:	20 40 20    	mov.w     #0x402, w0
    798c:	11 00 20    	mov.w     #0x1, w1
    798e:	b0 41 88    	mov.w     w0, 0x836
    7990:	c1 41 88    	mov.w     w1, 0x838
            __asm__("push _TBLPAG");
    7992:	54 00 f8    	push      0x54
            TBLPAG = WAVEGEN_OFFSET_NUM_SAMPLES >> 16;
    7994:	10 00 20    	mov.w     #0x1, w0
    7996:	a0 02 88    	mov.w     w0, 0x54
            wavegen_offset_samples = __builtin_tblrdl(WAVEGEN_OFFSET_NUM_SAMPLES & 0xFFFF);
    7998:	00 40 20    	mov.w     #0x400, w0
    799a:	10 00 ba    	tblrdl.w  [w0], w0
    799c:	a0 41 88    	mov.w     w0, 0x834
            __asm__("pop _TBLPAG");
    799e:	54 00 f9    	pop       0x54
    79a0:	01 00 37    	bra       0x79a4 <.L1>

000079a2 <.L3>:
        } else {
            wavegen_offset_stop();
    79a2:	c0 fc 07    	rcall     0x7324 <_wavegen_offset_stop> <.LFB27> <.LFE26>

000079a4 <.L1>:
        }
    }
}
    79a4:	00 80 fa    	ulnk      
    79a6:	4f 03 be    	mov.d     [--w15], w6
    79a8:	4f 02 be    	mov.d     [--w15], w4
    79aa:	4f 01 be    	mov.d     [--w15], w2
    79ac:	4f 00 be    	mov.d     [--w15], w0
    79ae:	36 00 f9    	pop       0x36
    79b0:	00 40 06    	retfie    
Disassembly of section .isr:

000079b2 <__DefaultInterrupt>:
    79b2:	00 40 da    	break     
    79b4:	00 00 fe    	reset     
